{"name": "HumanEval_30_get_positive", "language": "py", "prompt": "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n", "tests": "def check(candidate):\n    total_tests = 0\n    failed_tests = 0\n\n    try:\n        total_tests += 1\n        assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate([-1, -2]) == []\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate([]) == []\n    except AssertionError:\n        failed_tests += 1\n    print(total_tests, failed_tests)\n\ndef test_check():\n    check(get_positive)\n\ntest_check()\n", "completions": ["    positive_list = []\n    for number in l:\n        if number >= 0:\n            positive_list.append(number)\n    return positive_list\n\n", "    return list(filter(lambda x: x >= 0, l))\n", "    result = []\n    for item in l:\n        if item > 0:\n            result.append(item)\n    return result\n\n", "    return list(filter(lambda x: x > 0, l))\n", "    return list(filter(lambda x: x >= 0, l))\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [i for i in l if i >= 0]\n", "    return [i for i in l if i > 0]\n", "    return [num for num in l if num >= 0]\n\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    return list(filter(lambda x: x > 0, l))\n", "    result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result\n", "    return [num for num in l if num > 0]\n", "    result = []\n    for n in l:\n        if n > 0:\n            result.append(n)\n    return result\n", "    return [x for x in l if x > 0]\n\n", "    return [i for i in l if i > 0]\n", "    return [x for x in l if x > 0]\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [x for x in l if x >= 0]\n", "    return [n for n in l if n > 0]\n", "    return [x for x in l if x > 0]\n", "    lst = []\n    for i in range(len(l)):\n        if l[i] > 0:\n            lst.append(l[i])\n    return lst\n", "    return list(filter(lambda x: x > 0, l))\n\n", "    return [n for n in l if n >= 0]\n", "    return [x for x in l if x > 0]\n", "    positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n\n", "    return [x for x in l if x >= 0]\n", "    result = []\n    for i in l:\n        if i >= 0:\n            result.append(i)\n    return result\n", "    result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    positive_numbers = []\n    for number in l:\n        if number >= 0:\n            positive_numbers.append(number)\n    return positive_numbers\n", "    return [n for n in l if n > 0]\n\n", "    positive_list = []\n    for i in l:\n        if i > 0:\n            positive_list.append(i)\n    return positive_list\n", "    positive = []\n    for num in l:\n        if num > 0:\n            positive.append(num)\n    return positive\n\n", "    return [num for num in l if num > 0]\n", "    positive = []\n    for i in range(len(l)):\n        if l[i] > 0:\n            positive.append(l[i])\n    return positive\n\n", "    positive_l = []\n    for i in l:\n        if i >= 0:\n            positive_l.append(i)\n    return positive_l\n\n", "    result = []\n    for i in range(len(l)):\n        if l[i] > 0:\n            result.append(l[i])\n    return result\n", "    return [x for x in l if x > 0]\n", "    return [n for n in l if n > 0]\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [x for x in l if x >= 0]\n", "    positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n", "    return [n for n in l if n > 0]\n", "    return [x for x in l if x > 0]\n", "    result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result\n", "    return [i for i in l if i > 0]\n", "    return [n for n in l if n > 0]\n", "    return [x for x in l if x > 0]\n", "    new_list = []\n    for i in l:\n        if i > 0:\n            new_list.append(i)\n    return new_list\n", "    return [x for x in l if x > 0]\n\n", "    return list(filter(lambda x: x > 0, l))\n\n", "    return [i for i in l if i > 0]\n", "    return list(filter(lambda x: x > 0, l))\n", "    new_l = []\n    for item in l:\n        if item > 0:\n            new_l.append(item)\n    return new_l\n\n", "    positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n", "    return [x for x in l if x > 0]\n", "    return [i for i in l if i > 0]\n", "    # if l:\n    #     return [x for x in l if x > 0]\n    # return l\n    return [x for x in l if x >= 0]\n", "    return [i for i in l if i > 0]\n", "    return [x for x in l if x > 0]\n\n", "    return list(filter(lambda x: x > 0, l))\n", "    result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [x for x in l if x > 0]\n", "    return [i for i in l if i > 0]\n", "    return [x for x in l if x > 0]\n", "    return list(filter(lambda x: x >= 0, l))\n\n", "    return [num for num in l if num > 0]\n", "    return [number for number in l if number > 0]\n\n", "    return [x for x in l if x > 0]\n", "    return [i for i in l if i > 0]\n\n", "    positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x >= 0]\n", "    return list(filter(lambda x: x > 0, l))\n\n", "    new_list = []\n    for i in range(len(l)):\n        if l[i] > 0:\n            new_list.append(l[i])\n    return new_list\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n", "    return list(filter(lambda x: x >= 0, l))\n\n", "    positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n", "    result = []\n    for i in range(len(l)):\n        if l[i] > 0:\n            result.append(l[i])\n    return result\n", "    return [num for num in l if num > 0]\n", "    return list(filter(lambda x: x > 0, l))\n\n", "    return [i for i in l if i > 0]\n\n", "    positive = []\n    for num in l:\n        if num >= 0:\n            positive.append(num)\n    return positive\n", "    return [x for x in l if x > 0]\n\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n\n", "    return [i for i in l if i > 0]\n", "    new_list = []\n    for num in l:\n        if num > 0:\n            new_list.append(num)\n    return new_list\n\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    return [num for num in l if num >= 0]\n", "    return [i for i in l if i > 0]\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    new_l = []\n    for i in l:\n        if i >= 0:\n            new_l.append(i)\n    return new_l\n", "    return [num for num in l if num > 0]\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x >= 0]\n\n", "    return [i for i in l if i > 0]\n", "    return [x for x in l if x > 0]\n\n", "    return [i for i in l if i > 0]\n", "    pos = []\n    for i in l:\n        if i > 0:\n            pos.append(i)\n    return pos\n", "    return [i for i in l if i > 0]\n", "    pos_list = []\n    for item in l:\n        if item >= 0:\n            pos_list.append(item)\n    return pos_list\n", "    return [i for i in l if i > 0]\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    return list(filter(lambda x: x > 0, l))\n\n", "    positive_numbers = []\n    for num in l:\n        if num >= 0:\n            positive_numbers.append(num)\n    return positive_numbers\n\n", "    return [i for i in l if i > 0]\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [i for i in l if i > 0]\n", "    return [num for num in l if num >= 0]\n", "    positive = []\n    for i in range(len(l)):\n        if l[i] > 0:\n            positive.append(l[i])\n    return positive\n", "    result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result\n", "    positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [num for num in l if num > 0]\n\n", "    return list(filter(lambda x: x > 0, l))\n\n", "    positive_numbers = []\n    for i in l:\n        if i > 0:\n            positive_numbers.append(i)\n    return positive_numbers\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [i for i in l if i > 0]\n\n", "    positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [i for i in l if i > 0]\n", "    return [number for number in l if number > 0]\n", "    pos_numbers = []\n    for i in l:\n        if i > 0:\n            pos_numbers.append(i)\n    return pos_numbers\n\n", "    return [x for x in l if x > 0]\n", "    return [num for num in l if num > 0]\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [x for x in l if x >= 0]\n\n", "    return [x for x in l if x > 0]\n", "    return list(filter(lambda x: x > 0, l))\n\n", "    return [i for i in l if i > 0]\n", "    return [i for i in l if i > 0]\n\n", "    new_l = []\n    for i in l:\n        if i > 0:\n            new_l.append(i)\n    return new_l\n", "    result = []\n    for element in l:\n        if element > 0:\n            result.append(element)\n    return result\n", "    positive = []\n    for num in l:\n        if num > 0:\n            positive.append(num)\n    return positive\n", "    return list(filter(lambda x: x > 0, l))\n\n", "    return [x for x in l if x >= 0]\n", "    return [x for x in l if x >= 0]\n", "    return [i for i in l if i > 0]\n\n", "    return [num for num in l if num > 0]\n", "    new_l = []\n    for i in l:\n        if i >= 0:\n            new_l.append(i)\n    return new_l\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x > 0]\n", "    return [i for i in l if i > 0]\n", "    return list(filter(lambda x: x > 0, l))\n\n", "    return [x for x in l if x > 0]\n\n", "    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n", "    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n", "    return [x for x in l if x > 0]\n", "    return [i for i in l if i > 0]\n\n", "    return [x for x in l if x > 0]\n", "    return [x for x in l if x >= 0]\n", "    return list(filter(lambda x: x > 0, l))\n", "    result = []\n    for item in l:\n        if item >= 0:\n            result.append(item)\n    return result\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [i for i in l if i > 0]\n\n", "    pos_list = []\n    for i in l:\n        if i > 0:\n            pos_list.append(i)\n    return pos_list\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [x for x in l if x > 0]\n", "    positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [i for i in l if i > 0]\n", "    return [i for i in l if i > 0]\n", "    positive = []\n    for num in l:\n        if num > 0:\n            positive.append(num)\n    return positive\n", "    return [x for x in l if x > 0]\n", "    new_list = []\n    for i in l:\n        if i > 0:\n            new_list.append(i)\n    return new_list\n", "    return list(filter(lambda x: x > 0, l))\n", "    return list(filter(lambda x: x > 0, l))\n\n", "    result = []\n    for x in l:\n        if x > 0:\n            result.append(x)\n    return result\n", "    return list(filter(lambda x: x > 0, l))\n", "    positive = []\n    for num in l:\n        if num > 0:\n            positive.append(num)\n    return positive\n", "    return [n for n in l if n > 0]\n", "    return [i for i in l if i >= 0]\n\n", "    return [i for i in l if i >= 0]\n", "    return list(filter(lambda x: x > 0, l))\n\n", "    return [x for x in l if x > 0]\n", "    return list(filter(lambda x: x >= 0, l))\n", "    return list(filter(lambda x: x > 0, l))\n\n", "    return [x for x in l if x > 0]\n", "    return list(filter(lambda x: x > 0, l))\n", "    return [x for x in l if x > 0]\n", "    return [n for n in l if n > 0]\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}