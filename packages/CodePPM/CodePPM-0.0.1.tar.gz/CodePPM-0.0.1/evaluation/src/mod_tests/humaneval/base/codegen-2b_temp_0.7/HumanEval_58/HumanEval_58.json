{"name": "HumanEval_58_common", "language": "py", "prompt": "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "tests": "def check(candidate):\n    total_tests = 0\n    failed_tests = 0\n\n    try:\n        total_tests += 1\n        assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate([4, 3, 2, 8], []) == []\n    except AssertionError:\n        failed_tests += 1\n    print(total_tests, failed_tests)\n\ndef test_check():\n    check(common)\n\ntest_check()\n", "completions": ["    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n", "    return list(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n", "    # Get unique values\n    l1 = set(l1)\n    l2 = set(l2)\n    # Get the values in common\n    common = list(l1.intersection(l2))\n    return sorted(common)\n\n", "    l1 = sorted(set(l1))\n    l2 = sorted(set(l2))\n    return l1[:min(len(l1), len(l2))] + l2[min(len(l1), len(l2)):]\n\n", "    return sorted(set(l1) & set(l2))\n\n", "    common = []\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\n\n    for i in l2:\n        if i in l1 and i not in common:\n            common.append(i)\n\n    common.sort()\n    return common\n\n", "    common = set(l1) & set(l2)\n    return sorted(common)\n\n", "    return sorted(set(l1) & set(l2))\n\n", "    l1 = list(set(l1))\n    l2 = list(set(l2))\n    l = l1 + l2\n    l.sort()\n    return l\n", "    result = []\n    for i in l1:\n        if i in l2 and i not in result:\n            result.append(i)\n\n    for i in l2:\n        if i in l1 and i not in result:\n            result.append(i)\n\n    return result\n", "    return sorted(set(l1) & set(l2))\n\n", "    common_elements = set(l1) & set(l2)\n    common_elements = sorted(common_elements)\n    return common_elements\n\n", "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1.intersection(s2))\n\n", "    # l1 = [1, 4, 3, 34, 653, 2, 5]\n    # l2 = [5, 7, 1, 5, 9, 653, 121]\n    # sorted_list = sorted(set(l1 + l2))\n    # return sorted_list\n\n    # l1 = [1, 4, 3, 34, 653, 2, 5]\n    # l2 = [5, 7, 1, 5, 9, 653, 121]\n    sorted_list = sorted(set(l1 + l2))\n    # print(sorted_list)\n    return sorted_list\n\n", "    l1.sort()\n    l2.sort()\n    common = []\n    l1_index = 0\n    l2_index = 0\n    while l1_index < len(l1) and l2_index < len(l2):\n        if l1[l1_index] == l2[l2_index]:\n            common.append(l1[l1_index])\n            l1_index += 1\n            l2_index += 1\n        elif l1[l1_index] > l2[l2_index]:\n            l2_index += 1\n        else:\n            l1_index += 1\n    return common\n", "    res = []\n    for num in l1:\n        if num in l2 and num not in res:\n            res.append(num)\n    return res\n", "    # Your code here\n    common_list = []\n    for i in l1:\n        for j in l2:\n            if i == j and i not in common_list:\n                common_list.append(i)\n    return sorted(common_list)\n\n", "    common_lst = []\n    for i in l1:\n        for j in l2:\n            if i == j and i not in common_lst:\n                common_lst.append(i)\n    return sorted(common_lst)\n\n", "    l3 = []\n    for i in l1:\n        if i in l2 and i not in l3:\n            l3.append(i)\n    return l3\n", "    l3 = []\n    for x in l1:\n        if x in l2 and x not in l3:\n            l3.append(x)\n    return sorted(l3)\n", "    # create a set from l1\n    set1 = set(l1)\n    # create a set from l2\n    set2 = set(l2)\n    # return sorted unique common elements\n    return sorted(set1 & set2)\n\n", "    result = []\n    for item in l1:\n        if item in l2:\n            result.append(item)\n    return result\n\n", "    common_elements = []\n    for i in l1:\n        if i in l2 and i not in common_elements:\n            common_elements.append(i)\n    return sorted(common_elements)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n\n", "    # your code here\n    l1_set = set(l1)\n    l2_set = set(l2)\n    l1_set.discard(None)\n    l2_set.discard(None)\n    return sorted(l1_set.intersection(l2_set))\n\n", "    a, b = set(l1), set(l2)\n    return list(a & b)\n\n", "    return sorted(list(set(l1).intersection(set(l2))))\n", "    common = []\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\n    return sorted(common)\n", "    # l1 = sorted(set(l1))\n    # l2 = sorted(set(l2))\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    return result\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(list(set(l1).intersection(l2)))\n\n", "    sorted_l1 = sorted(set(l1))\n    sorted_l2 = sorted(set(l2))\n    common_elements = sorted_l1 + sorted_l2\n    common_elements.sort()\n    return common_elements\n", "    l1_elements = set(l1)\n    l2_elements = set(l2)\n    common_elements = l1_elements.intersection(l2_elements)\n    return sorted(common_elements)\n\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    common = l1_set & l2_set\n    common = list(common)\n    common.sort()\n    return common\n", "    common_elements = []\n    for element in l1:\n        if element in l2 and element not in common_elements:\n            common_elements.append(element)\n    return sorted(common_elements)\n\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    common = list(l1_set & l2_set)\n    common.sort()\n    return common\n", "    l1_copy = list(l1)\n    l2_copy = list(l2)\n    l1_copy.sort()\n    l2_copy.sort()\n    result = []\n    i = 0\n    j = 0\n\n    while i < len(l1_copy) and j < len(l2_copy):\n        if l1_copy[i] == l2_copy[j]:\n            result.append(l1_copy[i])\n            i += 1\n            j += 1\n        elif l1_copy[i] < l2_copy[j]:\n            i += 1\n        else:\n            j += 1\n    return result\n", "    common = []\n    l1_dict = {}\n    l2_dict = {}\n    l1_len = len(l1)\n    l2_len = len(l2)\n    for i in range(0, l1_len):\n        l1_dict[l1[i]] = True\n    for i in range(0, l2_len):\n        l2_dict[l2[i]] = True\n\n    for i in range(0, l1_len):\n        if l1_dict.get(l1[i])!= None:\n            common.append(l1[i])\n\n    for i in range(0, l2_len):\n        if l2_dict.get(l2[i])!= None:\n            common.append(l2[i])\n\n    return sorted(common)\n", "    return sorted(list(set(l1).intersection(set(l2))))\n\n", "    l3 = list(set(l1) & set(l2))\n    l4 = sorted(l3)\n    return l4\n\n", "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(list(s1.intersection(s2)))\n", "    return sorted(set(l1) & set(l2))\n\n", "    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            result.append(l1[i])\n    return sorted(result)\n\n", "    l3 = []\n    for e in l1:\n        if e in l2:\n            if e not in l3:\n                l3.append(e)\n    return l3\n", "    common_elements = []\n    for num in l1:\n        if num in l2 and num not in common_elements:\n            common_elements.append(num)\n    return common_elements\n\n", "    return sorted(list(set(l1).intersection(l2)))\n", "    return sorted(list(set(l1) & set(l2)))\n\n", "    # set to store the common elements\n    common = set()\n\n    # iterate through each element in list\n    for num in l1:\n        # check if element exists in l2\n        if num in l2:\n            # add the element to the set\n            common.add(num)\n\n    # return sorted list of common elements\n    return sorted(common)\n\n", "    new = []\n    for i in l1:\n        if i in l2 and i not in new:\n            new.append(i)\n    return sorted(new)\n", "    return sorted(set(l1).intersection(set(l2)))\n\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n\n    return sorted(l1_set.intersection(l2_set))\n\n", "    return sorted(set(l1) & set(l2))\n", "    common = []\n    l1_set = set(l1)\n    l2_set = set(l2)\n    common = list(l1_set.intersection(l2_set))\n    common.sort()\n    return common\n", "    # return sorted(set(l1) & set(l2))\n    # return list(set(l1) & set(l2))\n\n    l1_dict = {}\n    for i in range(len(l1)):\n        l1_dict[l1[i]] = i\n    l2_dict = {}\n    for i in range(len(l2)):\n        l2_dict[l2[i]] = i\n\n    # print(l1_dict, l2_dict)\n    return sorted(set(l1_dict.keys()) & set(l2_dict.keys()))\n\n", "    new_list = []\n    for i in l1:\n        if i in l2:\n            if i not in new_list:\n                new_list.append(i)\n    return new_list\n\n", "    l1.sort()\n    l2.sort()\n\n    return sorted(set(l1) & set(l2))\n\n", "    common = []\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\n    for i in l2:\n        if i in l1 and i not in common:\n            common.append(i)\n    return sorted(common)\n", "    l = []\n    for i in l1:\n        if i in l2 and i not in l:\n            l.append(i)\n    return l\n\n", "    l = []\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                l.append(e1)\n    return sorted(l)\n", "    return sorted(set(l1) & set(l2))\n", "    l1.sort()\n    l2.sort()\n    common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common\n", "    sorted_l1 = sorted(l1)\n    sorted_l2 = sorted(l2)\n    common_set = set(sorted_l1) & set(sorted_l2)\n    return sorted(list(common_set))\n", "    common_list = []\n    for item in l1:\n        if item in l2:\n            common_list.append(item)\n\n    common_list.sort()\n    return common_list\n", "    result = []\n    set1 = set(l1)\n    set2 = set(l2)\n\n    for i in set1:\n        if i in set2:\n            result.append(i)\n\n    return sorted(result)\n\n", "    common = []\n    for item in l1:\n        if item in l2:\n            common.append(item)\n\n    return sorted(common)\n\n", "    l1_s = set(l1)\n    l2_s = set(l2)\n    return list(l1_s.intersection(l2_s))\n", "    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return sorted(common_elements)\n", "    common = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j] and l1[i] not in common:\n                common.append(l1[i])\n    return sorted(common)\n", "    common = []\n    l1 = set(l1)\n    l2 = set(l2)\n    for x in l1:\n        if x in l2:\n            common.append(x)\n    return sorted(common)\n", "    common = []\n    for num in l1:\n        if num in l2 and num not in common:\n            common.append(num)\n    common.sort()\n    return common\n\n", "    # Create a dictionary of all elements in l1 and l2\n    # and create a list of all the keys (unique values)\n    # in the dictionary\n    dic1 = {value: key for key, value in enumerate(l1)}\n    dic2 = {value: key for key, value in enumerate(l2)}\n    # Create a list of all the common elements in the dictionaries\n    # and sort it\n    common = []\n    for key in dic1.keys():\n        if key in dic2:\n            common.append(key)\n            dic1.pop(key)\n            dic2.pop(key)\n    # Create a new list without the common elements\n    l1 = list(dic1.keys())\n    l2 = list(dic2.keys())\n    # Sort the lists\n    l1.sort()\n    l2.sort()\n    # Return the sorted list of common elements\n    return common\n", "    return sorted(set(l1) & set(l2))\n\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    common_list = list(l1_set & l2_set)\n    common_list.sort()\n    return common_list\n\n", "    l1 = set(l1)\n    l2 = set(l2)\n\n    return list(l1.intersection(l2))\n\n", "    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] not in common:\n            common.append(l1[i])\n    return common\n", "    # Your code here\n    set_1 = set(l1)\n    set_2 = set(l2)\n    common_elements = set_1.intersection(set_2)\n    return sorted(common_elements)\n\n", "    \n    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    common = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                common.append(l1[i])\n    return sorted(common)\n", "    return sorted(set(l1) & set(l2))\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    common_set = l1_set.intersection(l2_set)\n    return sorted(common_set)\n\n", "    l1 = sorted(set(l1))\n    l2 = sorted(set(l2))\n    return l1[:l2.index(l1[0])+1]\n", "    return sorted(set(l1) & set(l2))\n\n", "    # l1 = sorted(set(l1))\n    # l2 = sorted(set(l2))\n    # return list(set(l1) & set(l2))\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    return list(set(l1) & set(l2))\n\n", "    common = []\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\n    for i in l2:\n        if i in l1 and i not in common:\n            common.append(i)\n    return sorted(common)\n\n", "    return sorted(set(l1).intersection(set(l2)))\n", "    return sorted(set(l1) & set(l2))\n", "    # first get common elements in both lists\n    common = list(set(l1) & set(l2))\n    # get sorted common elements\n    common.sort()\n    return common\n", "    return sorted(list(set(l1) & set(l2)))\n\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    common_set = l1_set.intersection(l2_set)\n    return sorted(common_set)\n\n", "    common_list = []\n    l1_index = 0\n    l2_index = 0\n    while l1_index < len(l1) and l2_index < len(l2):\n        if l1[l1_index] == l2[l2_index]:\n            common_list.append(l1[l1_index])\n            l1_index += 1\n            l2_index += 1\n        elif l1[l1_index] < l2[l2_index]:\n            l1_index += 1\n        else:\n            l2_index += 1\n    return sorted(common_list)\n\n", "    l1.sort()\n    l2.sort()\n    return list(set(l1) & set(l2))\n", "    common = []\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\n    return sorted(common)\n", "    out = []\n    for i in l1:\n        if i in l2 and i not in out:\n            out.append(i)\n    return out\n", "    # Use set() to get unique items\n    l1_set = set(l1)\n    l2_set = set(l2)\n\n    # Use set.intersection() to get common elements\n    common_set = l1_set.intersection(l2_set)\n\n    return list(common_set)\n\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    common = []\n    for item in l1_set:\n        if item in l2_set:\n            common.append(item)\n    common.sort()\n    return common\n\n", "    return sorted(set(l1) & set(l2))\n\n", "    # O(n * m) time | O(n) space\n    common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        else:\n            i += 1\n    return common\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    return sorted(l1_set.intersection(l2_set))\n", "    set1, set2 = set(l1), set(l2)\n    return sorted(list(set1.intersection(set2)))\n\n", "    return sorted(set(l1) & set(l2))\n", "    l1_idx = {}\n    l2_idx = {}\n    for i in range(len(l1)):\n        if l1[i] in l1_idx:\n            l1_idx[l1[i]].append(i)\n        else:\n            l1_idx[l1[i]] = [i]\n    for i in range(len(l2)):\n        if l2[i] in l2_idx:\n            l2_idx[l2[i]].append(i)\n        else:\n            l2_idx[l2[i]] = [i]\n    common_idx = []\n    for i in l1_idx.keys():\n        if i in l2_idx.keys():\n            for j in l1_idx[i]:\n                if j in l2_idx[i]:\n                    common_idx.append(j)\n    return sorted(common_idx)\n\n", "    res = []\n    for i in l1:\n        if i in l2 and i not in res:\n            res.append(i)\n    return sorted(res)\n\n", "    return sorted(set(l1) & set(l2))\n\n", "    l1.sort()\n    l2.sort()\n    result = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            result.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return result\n", "    l3 = []\n    for i in l1:\n        if i in l2:\n            l3.append(i)\n    l3.sort()\n    return l3\n\n", "    l1.sort()\n    l2.sort()\n    i = 0\n    j = 0\n    result = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            result.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        elif l1[i] > l2[j]:\n            j += 1\n\n    return result\n", "    return sorted(set(l1).intersection(set(l2)))\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    return sorted(l1_set.intersection(l2_set))\n\n", "    return sorted(set(l1) & set(l2))\n", "    common_elements = set(l1) & set(l2)\n    common_elements = sorted(common_elements)\n    return common_elements\n", "    return sorted(list(set(l1) & set(l2)))\n", "    sorted_l1 = sorted(l1)\n    sorted_l2 = sorted(l2)\n\n    i = j = 0\n    while i < len(sorted_l1) and j < len(sorted_l2):\n        if sorted_l1[i] == sorted_l2[j]:\n            return sorted_l1[i:i+1]\n        elif sorted_l1[i] < sorted_l2[j]:\n            i += 1\n        else:\n            j += 1\n    return []\n\n", "    return sorted(set(l1) & set(l2))\n", "    l = []\n    for i in l1:\n        if i in l2:\n            if i not in l:\n                l.append(i)\n    return l\n\n\n", "    common_list = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_list.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n\n    return common_list\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    common_set = l1_set & l2_set\n    common_list = list(common_set)\n    common_list.sort()\n    return common_list\n\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    return sorted(l1_set.intersection(l2_set))\n", "    # return sorted(set(l1).intersection(set(l2)))\n    l1_ = set(l1)\n    l2_ = set(l2)\n    return list(l1_.intersection(l2_))\n", "    if not l1 or not l2:\n        return []\n    l3 = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                l3.append(i)\n    return sorted(l3)\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    return list(l1_set.intersection(l2_set))\n", "    return list(set(l1) & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n", "    common_elements = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_elements.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n\n    return common_elements\n\n", "    common = []\n    for item in l1:\n        if item in l2 and item not in common:\n            common.append(item)\n\n    return common\n", "    res = []\n    for i in l1:\n        if i in l2:\n            res.append(i)\n    return sorted(res)\n", "    return sorted(list(set(l1).intersection(set(l2))))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(list(set(l1) & set(l2)))\n\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    common_list = list(l1_set.intersection(l2_set))\n    return sorted(common_list)\n", "    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] not in result:\n            result.append(l1[i])\n\n    return result\n", "    common = []\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\n    for i in l2:\n        if i in l1 and i not in common:\n            common.append(i)\n    return sorted(common)\n\n", "    common = []\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\n\n    return common\n", "    common = []\n    for x in l1:\n        if x in l2 and x not in common:\n            common.append(x)\n    return common\n", "    return sorted(set(l1) & set(l2))\n\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    common_set = l1_set.intersection(l2_set)\n    return sorted(common_set)\n\n", "    common_list = []\n    for i in l1:\n        if i in l2:\n            common_list.append(i)\n    common_list.sort()\n    return common_list\n\n", "    l = set(l1)\n    l.update(l2)\n    return sorted(l)\n", "    # Make a list of only the common elements\n    common_list = []\n    for i in l1:\n        if i in l2 and i not in common_list:\n            common_list.append(i)\n    common_list.sort()\n    return common_list\n", "    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            l.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return l\n\n", "    l1.sort()\n    l2.sort()\n    i = 0\n    j = 0\n    common = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common\n\n", "    # Sort lists\n    l1.sort()\n    l2.sort()\n\n    # Find common elements\n    i = j = 0\n    common = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n\n    return common\n", "    return sorted(set(l1) & set(l2))\n", "    result = set(l1) & set(l2)\n    result = sorted(result)\n    return result\n", "    # l1 = sorted(set(l1))\n    # l2 = sorted(set(l2))\n    return sorted(set(l1).intersection(set(l2)))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    common_elements = []\n    for e in l1:\n        if e in l2:\n            if e not in common_elements:\n                common_elements.append(e)\n    return common_elements\n", "    if not l1 or not l2:\n        return []\n    return sorted(set(l1) & set(l2))\n\n", "    # Assume l1 and l2 are not empty\n    l1_copy = l1[:]\n    l2_copy = l2[:]\n\n    common_elements = []\n    while len(l1_copy) > 0 and len(l2_copy) > 0:\n        if l1_copy[0] == l2_copy[0]:\n            common_elements.append(l1_copy.pop(0))\n            l2_copy.pop(0)\n        else:\n            if l1_copy[0] < l2_copy[0]:\n                l1_copy.pop(0)\n            else:\n                l2_copy.pop(0)\n\n    return common_elements\n", "    l = []\n    for i in l1:\n        if i in l2:\n            if i not in l:\n                l.append(i)\n    return sorted(l)\n\n", "    common = list(set(l1).intersection(set(l2)))\n    common.sort()\n    return common\n", "    l1.sort()\n    l2.sort()\n    result = []\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            result.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return result\n\n", "    # return list(set(l1) & set(l2))\n    # return list(set(l1) & set(l2))\n    # return list(set(l1) & set(l2))\n    # return set(l1) & set(l2)\n    # return set(l1) & set(l2)\n    # return list(set(l1) & set(l2))\n    # return list(set(l1) & set(l2))\n    # return list(set(l1) & set(l2))\n    # return set(l1) & set(l2)\n    # return set(l1) & set(l2)\n    # return list(set(l1) & set(l2))\n\n    l = []\n    for item in l1:\n        if item in l2:\n            l.append(item)\n    return sorted(l)\n\n", "    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common.append(l1[i])\n    return sorted(common)\n\n", "    \n    set1 = set(l1)\n    set2 = set(l2)\n    common = []\n    \n    for i in set1:\n        if i in set2:\n            common.append(i)\n    \n    common.sort()\n    return common\n", "    l1_unique = set(l1)\n    l2_unique = set(l2)\n    result = []\n\n    for elem in l1_unique:\n        if elem in l2_unique:\n            result.append(elem)\n    return sorted(result)\n\n", "    # Make a dictionary with elements of l1 as keys\n    # and elements of l2 as values\n    d = {}\n    for i in l1:\n        d[i] = 0\n\n    # Iterate over l2\n    for i in l2:\n        # If the element is in dictionary\n        # then increment its count\n        if i in d:\n            d[i] += 1\n    # Get the list of keys\n    keys = list(d.keys())\n\n    # Sort the list\n    keys.sort()\n\n    # Get the sorted unique values\n    # and return the list\n    return keys\n", "    common = set(l1) & set(l2)\n    return sorted(common)\n", "    a = set(l1)\n    b = set(l2)\n    return list(a.intersection(b))\n", "    l1_dict = {}\n    l2_dict = {}\n    for i in l1:\n        l1_dict[i] = i\n    for i in l2:\n        l2_dict[i] = i\n    common_list = []\n    for key in l1_dict.keys():\n        if key in l2_dict.keys():\n            common_list.append(key)\n    return sorted(common_list)\n\n", "    # Using set\n    return sorted(set(l1).intersection(set(l2)))\n\n", "    return sorted(list(set(l1).intersection(set(l2))))\n\n", "    common = []\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\n    common.sort()\n    return common\n\n", "    l3 = []\n    for i in l1:\n        if i in l2:\n            if i not in l3:\n                l3.append(i)\n    return sorted(l3)\n\n", "    return list(set(l1) & set(l2))\n", "    sorted_l1 = sorted(l1)\n    sorted_l2 = sorted(l2)\n    common_elements = []\n    common_index = 0\n    for i in sorted_l1:\n        if i in sorted_l2:\n            common_elements.append(i)\n            common_index = sorted_l2.index(i)\n            sorted_l2.pop(common_index)\n    return common_elements\n\n", "    res = []\n    for i in l1:\n        if i in l2:\n            if i not in res:\n                res.append(i)\n    for i in l2:\n        if i in l1:\n            if i not in res:\n                res.append(i)\n    return sorted(res)\n", "    return sorted(set(l1) & set(l2))\n\n", "    common_elements = []\n    for x in l1:\n        if x in l2 and x not in common_elements:\n            common_elements.append(x)\n    return sorted(common_elements)\n\n", "    return sorted(set(l1) & set(l2))\n", "    result = []\n    for x in l1:\n        if x in l2 and x not in result:\n            result.append(x)\n    for x in l2:\n        if x in l1 and x not in result:\n            result.append(x)\n    return result\n\n", "    # TODO: start with the shortest list, work from there\n    # TODO: return as soon as you find a common element\n    # TODO: compare the lengths of the lists\n    # TODO: if equal length, compare elements one by one\n    # TODO: if equal lengths, compare elements 1 by 1\n    # TODO: if equal lengths, compare elements 2 by 2\n    # TODO: if equal lengths, compare elements 3 by 3\n    # TODO: if equal lengths, compare elements 4 by 4\n    # TODO: if equal lengths, compare elements 5 by 5\n    # TODO: if equal lengths, compare elements 6 by 6\n    # TODO: if equal lengths, compare elements 7 by 7\n    # TODO: if equal lengths, compare elements 8 by 8\n    # TODO: if equal lengths, compare elements 9 by 9\n    # TODO: if equal lengths, compare elements 10 by 10\n    # TODO: if equal lengths, compare elements 11 by 11\n    # TODO: if equal lengths, compare elements 12 by 12\n    # TODO: if equal lengths, compare elements 13 by 13\n    # TODO: if equal lengths, compare elements 14 by 14\n    # TODO: if equal lengths, compare elements 15 by 15\n    # TODO: if equal lengths, compare elements 16 by 16\n    # TODO: if equal lengths, compare elements 17 by 17\n    # TODO: if equal lengths, compare elements 18 by 18\n    # TODO: if equal lengths, compare elements 19 by 19\n    # TODO: if equal lengths, compare elements 20 by 20\n    # TODO: if equal lengths, compare elements 21 by 21\n    # TODO: if equal lengths, compare elements 22 by 22\n    # TODO: if equal lengths, compare elements 23 by 23\n    # TODO: if equal lengths, compare elements 24 by 24\n    # TODO: if equal lengths, compare elements 25 by 25\n    # TODO: if equal lengths, compare elements 26 by 26\n    # TODO: if equal lengths, compare elements 27 by 27\n    # TODO: if equal lengths, compare elements 28 by 28\n    # TODO: if equal lengths, compare elements 29 by 29\n    # TODO: if equal lengths, compare elements 30 by 30\n    # TODO:", "    common = []\n    for x in l1:\n        if x in l2 and x not in common:\n            common.append(x)\n    for x in l2:\n        if x in l1 and x not in common:\n            common.append(x)\n    common.sort()\n    return common\n\n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(set(l1) & set(l2))\n", "    return list(set(l1) & set(l2))\n", "    return sorted(list(set(l1).intersection(set(l2))))\n", "    common = []\n    for x in l1:\n        if x in l2:\n            if x not in common:\n                common.append(x)\n    return common\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    common = []\n    for x in l1_set:\n        if x in l2_set:\n            common.append(x)\n    return sorted(common)\n", "    s = set(l1) & set(l2)\n    return sorted(list(s))\n", "    # l1 = sorted(set(l1))\n    # l2 = sorted(set(l2))\n    common = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common.append(l1[i])\n    return common\n\n", "    set1 = set(l1)\n    set2 = set(l2)\n    res = list(set1 & set2)\n    return sorted(res)\n\n", "    return sorted(set(l1) & set(l2))\n", "    common = []\n    for num in l1:\n        if num in l2 and num not in common:\n            common.append(num)\n    return common\n", "    \n    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    common = set(l1).intersection(set(l2))\n    common = list(common)\n    common.sort()\n    return common\n\n", "    return sorted(set(l1) & set(l2))\n\n", "    return sorted(list(set(l1).intersection(set(l2))))\n", "    if len(l1) > len(l2):\n        return common(l2, l1)\n    elif len(l1) < len(l2):\n        return common(l1, l2)\n    else:\n        return list(set(l1).intersection(l2))\n", "    common_list = []\n    for i in l1:\n        if i in l2 and i not in common_list:\n            common_list.append(i)\n    for i in l2:\n        if i in l1 and i not in common_list:\n            common_list.append(i)\n    return common_list\n\n", "    out = []\n    for e in l1:\n        if e in l2:\n            out.append(e)\n    return sorted(out)\n\n", "    l1.sort()\n    l2.sort()\n    i = 0\n    j = 0\n    result = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            result.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return result\n", "    common_set = set(l1) & set(l2)\n    return sorted(list(common_set))\n\n", "    # Add code here\n    l1_set = set(l1)\n    l2_set = set(l2)\n    return sorted(l1_set & l2_set)\n", "    l1_set = set(l1)\n    l2_set = set(l2)\n    return sorted(l1_set & l2_set)\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}