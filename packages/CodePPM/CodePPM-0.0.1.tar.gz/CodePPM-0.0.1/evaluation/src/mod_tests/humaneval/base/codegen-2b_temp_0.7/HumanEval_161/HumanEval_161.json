{"name": "HumanEval_161_solve", "language": "py", "prompt": "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    >>> solve('1234')\n    '4321'\n    >>> solve('ab')\n    'AB'\n    >>> solve('#a@C')\n    '#A@c'\n    \"\"\"\n", "tests": "def check(candidate):\n    total_tests = 0\n    failed_tests = 0\n\n    try:\n        total_tests += 1\n        assert candidate('AsDf') == 'aSdF'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate('1234') == '4321'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate('ab') == 'AB'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate('#a@C') == '#A@c'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate('#AsdfW^45') == '#aSDFw^45'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate('#6@2') == '2@6#'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate('#$a^D') == '#$A^d'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate('#ccc') == '#CCC'\n    except AssertionError:\n        failed_tests += 1\n    print(total_tests, failed_tests)\n\ndef test_check():\n    check(solve)\n\ntest_check()\n", "completions": ["    # your code here\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n", "    return s.swapcase() if s else s[::-1]\n\n", "    s = list(s)\n    s = solve_letters(s)\n    s = solve_numbers(s)\n    return ''.join(s)\n\n", "    return \"\".join(c.upper() if c.isalpha() else c.lower() for c in s)\n\n", "    result = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].swapcase()\n        else:\n            result += s[i]\n    return result\n\n", "    \n    if s == \"\":\n        return s\n    \n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n\n", "    return \"\".join(\n        [char.upper() if char.isalpha() else char.lower() for char in s]\n    )\n\n", "    if len(s) == 0:\n        return s\n    if s[0].isalpha():\n        if s[0].isupper():\n            return s[::-1].upper()\n        else:\n            return s[::-1].lower()\n    return s[::-1]\n\n", "    return ''.join(i.swapcase() if i.isalpha() else i for i in s)\n", "    return ''.join(map(lambda x: x if x.isalpha() else x.upper() if x.islower() else x, s))\n\n", "    return \"\".join(map(lambda x: x.upper() if x.isalpha() else x.lower(), s))\n\n", "    result = \"\"\n    for letter in s:\n        if letter.islower():\n            result += letter.upper()\n        elif letter.isupper():\n            result += letter.lower()\n        else:\n            result += letter\n    return result\n\n", "    if not s:\n        return s\n    s = list(s)\n    if any(letter.isalpha() for letter in s):\n        for i in range(len(s)):\n            if s[i].isalpha():\n                if s[i].islower():\n                    s[i] = s[i].upper()\n                else:\n                    s[i] = s[i].lower()\n        return ''.join(s)\n    else:\n        return ''.join(s)\n\n", "    if s.isalpha():\n        if s.isupper():\n            return s[::-1].lower()\n        else:\n            return s[::-1].upper()\n    else:\n        return s[::-1]\n", "    return \"\".join(map(lambda x: x.upper() if x.islower() else x.lower(), s))\n\n", "    return ''.join([c.upper() if c.isalpha() else c for c in s])\n\n", "    # your code here\n    return ''.join([i.upper() if i.isalpha() else i for i in s])\n\n", "    string_list = list(s)\n    if string_list:\n        for index in range(len(string_list)):\n            if string_list[index].isalpha():\n                if string_list[index].isupper():\n                    string_list[index] = string_list[index].lower()\n                else:\n                    string_list[index] = string_list[index].upper()\n    return ''.join(string_list)\n\n", "    result = ''\n    for char in s:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    if not result:\n        result = result[::-1]\n    return result\n\n", "    return s[::-1].upper() if s else s[::-1]\n\n", "    if not s:\n        return s\n\n    result = \"\"\n\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n\n    return result\n\n", "    return \"\".join(sorted(s, key=lambda x: 1 if x.isalpha() else 2))\n", "    result = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].swapcase() if s[i].islower() else s[i]\n        else:\n            result += s[i]\n    return result if len(result) > 0 else ''\n\n", "    s = s.lower()\n    s = s.upper()\n    return s\n", "    return \"\".join(char.upper() if char.islower() else char.lower() for char in s)\n\n", "    res = list(s)\n    for i in range(len(res)):\n        if res[i].isalpha():\n            if res[i].islower():\n                res[i] = res[i].upper()\n            else:\n                res[i] = res[i].lower()\n    return ''.join(res)\n\n", "    return \"\".join(c.upper() if c.isalpha() else c.lower() for c in s)\n\n", "    \n    if len(s) == 0:\n        return s\n    \n    res = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                res += s[i].lower()\n            else:\n                res += s[i].upper()\n        else:\n            res += s[i]\n    return res\n", "    if not s:\n        return s\n\n    return \"\".join(x.upper() if x.isalpha() else x.lower() for x in s)\n\n", "    res = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                res += s[i].upper()\n            else:\n                res += s[i].lower()\n        else:\n            res += s[i]\n    if res:\n        return res\n    return ''.join(reversed(s))\n\n", "    if not s:\n        return s\n\n    alphabet = string.ascii_lowercase\n\n    new_string = ''\n\n    for letter in s:\n        if letter.isalpha():\n            new_string += letter.upper() if letter.islower() else letter.lower()\n        else:\n            new_string += letter\n\n    return new_string\n\n", "    return ''.join(c.upper() if c.isalpha() else c.lower() for c in s)\n", "    res = ''\n    for i in range(len(s)):\n        if s[i].islower():\n            res += s[i].upper()\n        elif s[i].isupper():\n            res += s[i].lower()\n        else:\n            res += s[i]\n    return res\n", "    s = ''.join(s.split(' '))\n    # return s[::-1] if s else s\n    return''.join(s[i].upper() if s[i].isalpha() else s[i].lower() for i in range(len(s)))\n\n", "    # # we can use a regular expression and split the string\n    # return ''.join([i.upper() if i.isalpha() else i.lower() for i in s])\n    # # or\n    # return ''.join([i.lower() if i.isalpha() else i.upper() for i in s])\n\n    # # or\n    # return ''.join([i.upper() if i.isalpha() else i.lower() for i in s if not i.isalpha()])\n    # # or\n    # return ''.join([i.lower() if i.isalpha() else i.upper() for i in s if not i.isalpha()])\n    return ''.join([i.upper() if not i.isalpha() else i.lower() for i in s])\n\n", "    if len(s) == 0:\n        return ''\n    result = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n\n", "    # return s[::-1] if not s else ''.join(s[i].upper() if i.isalpha() else s[i] for i in s)\n    return s[::-1].upper() if not s else ''.join(s[i].upper() if i.isalpha() else s[i] for i in s)\n\n", "    s = s.lower() if s.islower() else s.upper()\n    s = s[::-1] if s else s\n    return s\n\n", "    s = s.lower() if s.isalpha() else s.upper()\n    return s[::-1] if s else s\n\n", "    return ''.join(reversed(s) if s.isalpha() else s)\n\n", "    def reverse_word(word):\n        if word == '':\n            return ''\n        return word[::-1]\n\n    def reverse_letters(letter):\n        if letter.isalpha():\n            return letter.swapcase()\n        else:\n            return letter\n\n    result = s.swapcase()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result = result[:i] + reverse_letters(s[i]) + result[i + 1:]\n    return result\n\n", "    # Your code here\n    s = s.lower()\n    s = s.upper() if s.isalpha() else s\n    return s[::-1] if s.isalpha() else s[::-1].lower()\n\n", "    return ''.join([i.swapcase() if i.isalpha() else i for i in s])\n\n", "    if not s:\n        return s\n\n    result = \"\"\n    for i, letter in enumerate(s):\n        if letter.isalpha():\n            if letter.islower():\n                result += letter.upper()\n            else:\n                result += letter.lower()\n        else:\n            result += letter\n    return result\n\n", "    return s[::-1].upper() if s.isalpha() else s[::-1]\n", "    if not s:\n        return s\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return ''.join(char.upper() if char.isalpha() else char.lower() for char in s)\n\n", "    if not s:\n        return s\n    else:\n        s = list(s)\n        for i, x in enumerate(s):\n            if x.isalpha():\n                if x.islower():\n                    s[i] = x.upper()\n                else:\n                    s[i] = x.lower()\n        return ''.join(s)\n", "    if not s:\n        return s\n    s = s.replace(' ', '')\n    if not s:\n        return s[::-1]\n    return ''.join(\n        x if x.isalpha() else x.upper() if x.isupper() else x.lower()\n        for x in s\n    )\n\n", "    result = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result.append(s[i].lower())\n            else:\n                result.append(s[i].upper())\n        else:\n            result.append(s[i])\n    return ''.join(result)\n\n", "    if not s:\n        return s\n    \n    result = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            result += s[i]\n    return result\n\n", "    return ''.join(i if i.isalpha() else i.upper() if i.islower() else i for i in s)\n\n", "    if not s:\n        return s\n\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if char.islower():\n                s = s[:i] + char.upper() + s[i + 1:]\n            else:\n                s = s[:i] + char.lower() + s[i + 1:]\n    return s\n\n", "    if s == '':\n        return s\n    else:\n        return solve(s[1:]) + s[0].upper() if s[0].isalpha() else solve(s[1:]) + s[0].lower()\n\n", "    return ''.join(c if c.isalpha() else c.swapcase() for c in s)\n", "    if s == '':\n        return ''\n    \n    l = list(s)\n    for i in range(len(l)):\n        if l[i].isalpha():\n            if l[i].islower():\n                l[i] = l[i].upper()\n            else:\n                l[i] = l[i].lower()\n    return ''.join(l)\n", "    if not s:\n        return s\n    s = s.lower() if s.isalpha() else s.upper()\n    return s[::-1] if s else s[::-1]\n\n", "    if not s:\n        return s\n    return \"\".join(\n        char.upper() if char.islower() else char.lower()\n        for char in s\n    )\n\n", "    s = s.lower() if 'a' <= s[0] <= 'z' else s.upper()\n    return ''.join(s[i] if i < len(s) else s[:i][::-1] for i in range(len(s)))\n", "    s = s.lower()\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n\n", "    if not s:\n        return s\n    letters = [c for c in s if c.isalpha()]\n    return ''.join([c.upper() if c.islower() else c.lower() for c in letters])\n    \n", "    result = ''\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result += ch.lower()\n            else:\n                result += ch.upper()\n        else:\n            result += ch\n    return result\n\n", "    s = s.lower() if s.isalpha() else s.upper()\n    return s[::-1] if s else s[::-1]\n\n", "    # solution:\n    # 1) loop through the string.\n    # 2) if the char is a letter, change it into upper or lower case and vice versa.\n    # 3) if the char is a number, reverse it.\n\n    # solution:\n    # 1) reverse the string.\n    # 2) loop through the string.\n    # 3) if the char is a letter, change it into upper or lower case and vice versa.\n    # 4) if the char is a number, reverse it.\n\n    s = s.upper()\n    res = ''\n    for char in s:\n        if char.isalpha():\n            res += char.lower() if char.isupper() else char.upper()\n        elif char.isdigit():\n            res += char[::-1]\n        else:\n            res += char\n    return res\n\n", "    if not s:\n        return s\n    \n    return \"\".join(\n        char.upper() if char.isalpha() else char.lower()\n        for char in s\n    )\n\n", "    if not s:\n        return s\n    s = ''.join(sorted(s))\n    return s[::-1] if s else s[::-1]\n", "    if len(s) == 0:\n        return s\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n\n", "    s = list(s)\n    for i, letter in enumerate(s):\n        if letter.isalpha():\n            if letter.isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    return \"\".join(s)\n\n", "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return \"\".join(s)\n\n", "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    s = ''.join(s)\n    if not s:\n        s = s[::-1]\n    return s\n\n", "    return s[::-1].upper() if s.islower() else s[::-1]\n\n", "    # Your code here\n    s_list = list(s)\n    for i in range(len(s_list)):\n        if s_list[i].isalpha():\n            if s_list[i].isupper():\n                s_list[i] = s_list[i].lower()\n            else:\n                s_list[i] = s_list[i].upper()\n    return ''.join(s_list)\n\n", "    # \u0447\u0430\u0441\u0442\u0438 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044b\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    reverse_alphabet = \"zyxwvutsrqponmlkjihgfedcba\"\n    # \u043d\u0430\u0447\u0430\u043b\u043e \u0437\u0430\u043c\u0435\u043d\u044b\n    new_s = \"\"\n    # \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u043c\u0435\u043d\n    for i in range(len(s)):\n        # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0443\u0441\u0442\u043e\u0442\u0443 \u0441\u0442\u0440\u043e\u043a\u0438\n        if s[i] == \" \":\n            new_s += s[i]\n        else:\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0443\u0441\u0442\u043e\u0442\u0443 \u0441\u0442\u0440\u043e\u043a\u0438\n            if s[i] in alphabet:\n                if s[i] in reverse_alphabet:\n                    new_s += reverse_alphabet[alphabet.find(s[i])]\n                else:\n                    new_s += s[i]\n            else:\n                new_s += s[i]\n    # \u043a\u043e\u043d\u0435\u0446 \u0437\u0430\u043c\u0435\u043d\u044b\n    return new_s\n", "    if not s:\n        return s\n    return ''.join(reversed(s) if s.isalpha() else s)\n", "    if not s:\n        return s\n    return ''.join(c.lower() if c.isalpha() else c for c in s) or s[::-1]\n\n", "    \n    result = ''\n    for letter in s:\n        if letter.islower() or letter.isupper():\n            result += letter.upper() if letter.isupper() else letter.lower()\n        else:\n            result += letter\n    return result\n\n", "    return \"\".join(sorted(s, key=lambda x: x.isalpha() == x.islower(), reverse=True) if s else \"\".join(sorted(s, key=lambda x: x.isalpha() == x.islower(), reverse=True)))\n\n", "    # first solution\n    # s = s.lower()\n    # s = s.upper()\n    # return s\n\n    # second solution\n    if not s:\n        return s\n    else:\n        return ''.join([c.upper() if c.isalpha() else c.lower() for c in s])\n\n", "    result = ''\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                result += i.upper()\n            elif i.isupper():\n                result += i.lower()\n        else:\n            result += i\n    return result\n\n", "    if not s:\n        return s\n    result = ''\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result\n", "    if len(s) == 0:\n        return ''\n    if not is_letter(s[0]):\n        return solve(s[1:]) + s[0].swapcase()\n    return solve(s[1:]) + s[0].swapcase()\n\n", "    if not s:\n        return s\n\n    result = list(s)\n    for i in range(len(result)):\n        if result[i].isalpha():\n            result[i] = result[i].swapcase()\n        else:\n            result[i] = result[i]\n    return \"\".join(result)\n\n", "    s = s.lower() if s.isalpha() else s\n    return s[::-1] if s else s.upper()\n\n", "    # replace this for solution\n    return s\n", "    if not s:\n        return s\n    return ''.join(sorted(s, key=lambda x: x.isupper() and x.islower(), reverse=True))\n\n", "    if not s:\n        return s\n    return \"\".join(\n        [char.upper() if char.islower() else char.lower() for char in s]\n    )\n\n", "    if not s:\n        return ''\n    res = ''\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                res += ch.lower()\n            else:\n                res += ch.upper()\n        else:\n            res += ch\n    return res\n\n", "    return ''.join(sorted(s)) if s else s[::-1]\n", "    result = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n\n", "    \n    return \"\".join(reversed(list(filter(str.isalpha, s))) if s else list(reversed(s)))\n\n", "    if len(s) == 0:\n        return s\n    else:\n        return ''.join([''.join([x.upper() if x.isalpha() else x.lower() for x in s])] if x.isalpha() else\n                       ''.join([x.upper() if x.isupper() else x.lower() for x in s]))\n\n", "    n = len(s)\n    if n == 0:\n        return ''\n\n    s = s.lower() if s[0].isalpha() else s.upper()\n    s = s[::-1]\n    s = s.upper() if s[0].isalpha() else s.lower()\n\n    return s\n\n", "    # for i in s:\n    #     if i.isalpha():\n    #         print(i.lower(), end='')\n    #     else:\n    #         print(i, end='')\n    # print()\n    # return ''.join(s[::-1] if s.isalpha() else s)\n\n    # lower_s = ''.join(c.lower() for c in s)\n    # upper_s = ''.join(c.upper() for c in s)\n    # print(lower_s, upper_s)\n    # return lower_s if s.islower() else upper_s\n    # return s.swapcase()\n\n    return s[::-1].swapcase() if s else s\n\n", "    return \"\".join(chr(ord(c.lower() if c.isalpha() else c) - 32)\n                   if c.isalpha() else c for c in s)\n\n", "    # return s[::-1].swapcase() if s else s[::-1]\n    return s[::-1] if s else s.swapcase()\n\n", "    result = \"\"\n    if len(s) == 0:\n        result = s\n    else:\n        for i in range(len(s)):\n            if s[i].isalpha():\n                if s[i].islower():\n                    result += s[i].upper()\n                else:\n                    result += s[i].lower()\n            else:\n                result += s[i]\n    return result\n\n", "    return s.swapcase() if s else s[::-1]\n\n", "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return ''.join(s)\n\n", "    # A = 0\n    # B = 0\n    # C = 0\n    # D = 0\n    # for i in range(len(s)):\n    #     if s[i].isalpha():\n    #         if s[i].islower():\n    #             A = A + 1\n    #         elif s[i].isupper():\n    #             B = B + 1\n    #         else:\n    #             C = C + 1\n    #     else:\n    #         continue\n    # if A == 0:\n    #     for i in range(len(s)):\n    #         if s[i].isupper():\n    #             D = D + 1\n    #         else:\n    #             continue\n    #     return s[::-1]\n    # elif A!= 0 and B == 0 and C == 0 and D == 0:\n    #     return s[::-1]\n    # else:\n    #     return s\n    # reverse string\n    rev_string = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                rev_string = rev_string + s[i].upper()\n            elif s[i].isupper():\n                rev_string = rev_string + s[i].lower()\n        else:\n            rev_string = rev_string + s[i]\n    return rev_string\n\n", "    letters = []\n    numbers = []\n    for c in s:\n        if c.isalpha():\n            letters.append(c.lower())\n            letters.append(c.upper())\n        else:\n            numbers.append(c)\n    if not letters:\n        return \"\".join(numbers)\n    return \"\".join(letters + numbers)\n\n", "    return s[:] if not any(char.isalpha() for char in s) else ''.join(char.upper() if char.islower() else char.lower() for char in s)\n\n", "    return s.swapcase()\n\n", "    s = s.lower() if 'a' <= s[0] <= 'z' else s.upper()\n    for i in range(len(s)):\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            s = s[:i] + s[i].swapcase() + s[i+1:]\n            break\n    return s\n\n", "    return ''.join(ch.upper() if ch.isalpha() else ch for ch in s)\n\n", "    \n    return s.translate(str.maketrans(string.ascii_letters,string.ascii_letters[::-1]))\n", "    if not s:\n        return ''\n    else:\n        if s[0].isalpha():\n            return s[::-1].upper() if s[0].isupper() else s[::-1].lower()\n        else:\n            return s[::-1]\n", "    if not s:\n        return s\n    if any(not s.isalpha() for s in s):\n        return s[::-1]\n    return s[::-1].swapcase()\n\n", "    s = s.lower()\n    result = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n", "    return s[::-1] if any(c.isalpha() for c in s) else s[::-1].upper()\n\n", "    s = s.lower()\n    return ''.join(char if char in string.ascii_letters else char.upper() for char in s)\n\n", "    if not s:\n        return s\n    return ''.join(\n        (i if i.islower() else i.upper()) if i.isalpha() else i for i in s\n    )\n\n", "    if s:\n        s = s.lower() if s.isalpha() else s.upper()\n        return s[::-1] if s else s\n    return s\n\n", "    \n    if not s:\n        return s\n    \n    if s[0].isalpha():\n        if s[0].islower():\n            return s[::-1].swapcase()\n        else:\n            return s[::-1].upper()\n    else:\n        return s[::-1]\n    \n\n", "    if s == '':\n        return ''\n    # if s is not empty\n    else:\n        # initialize letters\n        letters = []\n        for i in range(len(s)):\n            if s[i].isalpha():\n                letters.append(s[i])\n        # reverse letters\n        letters.reverse()\n        # rejoin letters\n        return ''.join(letters)\n\n", "    if s == '':\n        return s\n    s_list = list(s)\n    lower_s = s_list.copy()\n    upper_s = s_list.copy()\n    for i in range(len(s_list)):\n        if lower_s[i].islower():\n            lower_s[i] = upper_s[i].upper()\n        elif upper_s[i].islower():\n            upper_s[i] = lower_s[i].upper()\n    return ''.join(lower_s) + ''.join(upper_s)\n\n", "    result = \"\"\n    for i in s:\n        if i.islower():\n            result += i.upper()\n        elif i.isupper():\n            result += i.lower()\n        else:\n            result += i\n    return result\n    \n    \n    \n    # for i in range(len(s)):\n    #     if s[i].isalpha():\n    #         if s[i].islower():\n    #             s = s[i].upper() + s[i+1:]\n    #         elif s[i].isupper():\n    #             s = s[i].lower() + s[i+1:]\n    #         else:\n    #             s = s[i:]\n    #     else:\n    #         s = s[i:]\n    # return s\n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.isalpha() else c.lower() for c in s)\n\n", "    result = ''\n    for letter in s:\n        if letter.isalpha():\n            if letter.islower():\n                result += letter.upper()\n            else:\n                result += letter.lower()\n        else:\n            result += letter\n    return result\n\n", "    result = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                result += i.upper()\n            else:\n                result += i.lower()\n        else:\n            result += i\n    return result\n\n", "    if not s:\n        return s\n    res = []\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                res.append(ch.lower())\n            else:\n                res.append(ch.upper())\n        else:\n            res.append(ch)\n    return ''.join(res)\n\n", "    return s[::-1].swapcase() if s.islower() else s[::-1]\n\n", "    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n\n", "    return s.swapcase() if len(s) > 0 else s[::-1]\n", "    s = s.lower()\n    s = re.sub(r'[^a-z]', '', s)\n    if s:\n        s = s[::-1]\n    return s\n\n", "    if s:\n        return \"\".join(i if i.isalpha() else i.upper() if i.islower() else i for i in s)\n    return s[::-1]\n\n", "    if not s:\n        return s\n    res = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            res += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            res += s[i]\n    return res\n\n", "    #  s = list(s)\n    #  if not any(c.isalpha() for c in s):\n    #      s = ''.join(reversed(s))\n    #  else:\n    #      for i in range(len(s)):\n    #          if s[i].isalpha():\n    #              if s[i].islower():\n    #                  s[i] = s[i].upper()\n    #              else:\n    #                  s[i] = s[i].lower()\n    #  return ''.join(s)\n    s = list(s)\n    if not any(c.isalpha() for c in s):\n        s = ''.join(reversed(s))\n    else:\n        for i in range(len(s)):\n            if s[i].isalpha():\n                if s[i].islower():\n                    s[i] = s[i].upper()\n                else:\n                    s[i] = s[i].lower()\n    return ''.join(s)\n\n", "    \n    if s == '':\n        return s\n    \n    letters = list(s)\n    \n    if len(letters) > 1:\n        for i in range(len(letters)//2):\n            if letters[i].isalpha():\n                letters[i] = letters[i].upper()\n            else:\n                letters[i] = letters[i].lower()\n        \n        return ''.join(letters)\n    \n    else:\n        return s\n", "    if not s:\n        return s\n    res = list(s)\n    for i in range(len(res)):\n        if res[i].isalpha():\n            if res[i].islower():\n                res[i] = res[i].upper()\n            else:\n                res[i] = res[i].lower()\n    return \"\".join(res)\n\n", "    # your code here\n    if not s:\n        return ''\n    if s[0].isalpha():\n        return s[::-1].upper() if s[0].islower() else s[::-1].lower()\n    else:\n        return s[::-1]\n\n", "    return ''.join(\n        ''.join(\n            list(reversed(s))\n            if c.islower() or c.isupper()\n            else c\n        )\n        for c in s\n    )\n\n", "    s = s.replace(\" \", \"\")\n    if not s:\n        return s[::-1]\n    return s[::-1].upper() if s[0].isalpha() else s[::-1]\n\n", "    if not s:\n        return s\n\n    reversed_string = \"\"\n    for letter in s:\n        if not letter.isalpha():\n            reversed_string += letter\n        else:\n            if letter.islower():\n                reversed_string += letter.upper()\n            else:\n                reversed_string += letter.lower()\n    return reversed_string\n\n", "    s = s.lower() if 'a' <= s[0] <= 'z' else s.upper()\n    return s[::-1] if s else s\n", "    if not s:\n        return s\n    result = []\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result.append(ch.lower())\n            else:\n                result.append(ch.upper())\n        else:\n            result.append(ch)\n    return ''.join(result)\n\n", "    # your code here\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n", "    if not s:\n        return s\n    return \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n\n", "    return ''.join(i.lower() if i.isalpha() else i for i in s)\n\n", "    s = s.lower()\n    if len(s) == 0:\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s = s[i].lower() + s[i+1:]\n            else:\n                s = s[i].upper() + s[i+1:]\n    return s\n\n", "    \n    result = ''\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result\n", "    if not s:\n        return s\n    else:\n        return ''.join(sorted(s, key=lambda x: x.isalpha() and not x.isdigit()))\n", "    result = ''\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                result += i.lower()\n            else:\n                result += i.upper()\n        else:\n            result += i\n    return result\n\n", "    if not s:\n        return s\n    return ''.join(i.upper() if i.isalpha() else i.lower() for i in s)\n", "    # s = list(s)\n    # for i in range(len(s)):\n    #     if s[i].isalpha():\n    #         if s[i].isupper():\n    #             s[i] = s[i].lower()\n    #         else:\n    #             s[i] = s[i].upper()\n    # return ''.join(s)\n\n    # s = list(s)\n    # for i in range(len(s)):\n    #     if s[i].isalpha():\n    #         s[i] = s[i].swapcase()\n    # return ''.join(s)\n\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n    return ''.join(s)\n\n", "    if not s:\n        return s\n\n    s = s[::-1]\n    return s\n\n", "    if not s:\n        return s\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            elif s[i].isupper():\n                s = s[:i] + s[i].lower() + s[i+1:]\n    return s\n\n", "    s = s.lower() if s.isalpha() else s\n    return s[::-1].upper() if s else s[::-1]\n\n", "    return s if not s else ''.join(\n        [x.upper() if x.isalpha() else x.lower() for x in s]\n    )\n\n", "    return ''.join(c.upper() if c.islower() else c.lower() for c in s) or s\n\n", "    # s = \"aBc\"\n    # s = \"a1b\"\n    # s = \"a#bc\"\n    # s = \"a1\"\n    # s = \"a\"\n    # s = \"abcd\"\n    # s = \"aAbCd\"\n    s = s.strip()\n    if len(s) == 0:\n        return s\n    result = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                result += i.upper()\n            else:\n                result += i.lower()\n        else:\n            result += i\n    return result\n\n", "    return ''.join(x if x.islower() else x.upper() for x in s)\n\n", "    return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n\n", "    return \"\".join(i.upper() if i.isalpha() else i for i in s)\n\n", "    if not s:\n        return ''\n    result = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result.append(s[i].upper())\n            elif s[i].isupper():\n                result.append(s[i].lower())\n        else:\n            result.append(s[i])\n    return ''.join(result)\n\n", "    # print(s)\n    # print(reversed(s))\n    return ''.join(reversed(s)) if s else ''.join(reversed(s))\n\n", "    return ''.join(\n        map(lambda x: x.upper() if x.islower() else x.lower(), s)\n    )\n\n", "    if not s:\n        return ''\n    \n    #print(s)\n    l = list(s)\n    i = 0\n    while i < len(l):\n        if l[i].isalpha():\n            l[i] = l[i].upper() if l[i].islower() else l[i].lower()\n        i += 1\n    \n    return ''.join(l)\n\n", "    if not s:\n        return ''\n    l = list(s)\n    for i in range(len(l)):\n        if l[i].isalpha():\n            if l[i].islower():\n                l[i] = l[i].upper()\n            else:\n                l[i] = l[i].lower()\n        else:\n            continue\n    return ''.join(l)\n", "    if len(s) == 0:\n        return \"\"\n    else:\n        str_s = s.replace(\" \", \"\")\n        return \"\".join([x if x.isalpha() else x.upper() if x.islower() else x for x in str_s])\n\n", "    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                result += c.lower()\n            else:\n                result += c.upper()\n        else:\n            result += c\n    return result\n\n", "    return ''.join(s.lower() if c.isalpha() else s.upper() if c.islower() else c for c in s)\n\n", "    s = s.replace(' ', '')\n    s = s.lower() if s.isalpha() else s.upper()\n    return ''.join(sorted(s, key=lambda i: i.isupper(), reverse=True))\n\n", "    if not s:\n        return s\n    else:\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n", "    s = s.strip()\n    if s:\n        s = ''.join(reversed(s) if s[0].isalpha() else s)\n        return s\n    return ''.join(reversed(s))\n\n", "    if not s:\n        return s\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return \"\".join(char.upper() if char.islower() else char.lower() for char in s)\n\n", "    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n", "    if not s:\n        return s\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    return ''.join(s)\n\n", "    if not s:\n        return s\n    res = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                res.append(s[i].upper())\n            else:\n                res.append(s[i].lower())\n        else:\n            res.append(s[i])\n    return ''.join(res)\n\n", "    return ''.join(reversed(s) if s.isalpha() else s for s in s)\n\n", "    return \"\".join(i.upper() if i.isalpha() else i for i in s)\n\n", "    s_list = list(s)\n    for i in range(len(s_list)):\n        if s_list[i].isalpha():\n            if s_list[i].islower():\n                s_list[i] = s_list[i].upper()\n            else:\n                s_list[i] = s_list[i].lower()\n    return ''.join(s_list)\n", "    if not s:\n        return s\n    l = len(s)\n    for i in range(l):\n        if s[i].islower() or s[i].isupper():\n            s = s[:i] + s[i].swapcase() + s[i + 1:]\n    return s\n\n", "    if not s:\n        return s\n    s = s.lower() if s.isalpha() else s.upper()\n    s = s[::-1] if s else s\n    return s\n\n", "    # Your code here\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].swapcase()\n        else:\n            result += s[i]\n    return result\n\n", "    if not s:\n        return s\n    if all(c.isalpha() for c in s):\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n    return s[::-1]\n\n", "    result = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                i = i.upper()\n            else:\n                i = i.lower()\n        result += i\n    if not result:\n        result = s[::-1]\n    return result\n\n", "    # s = s.lower()\n    # s = s.upper()\n    # return s\n    return s[::-1].swapcase() if s else s[::-1]\n\n", "    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n\n", "    s = s.lower() if s.isalpha() else s\n    return ''.join(reversed(s) if c.isalpha() else c for c in s)\n\n", "    if not s:\n        return s\n    letters = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            letters.append(s[i].upper() if s[i].islower() else s[i].lower())\n        else:\n            letters.append(s[i])\n    return \"\".join(letters)\n\n", "    # Step 1\n    # s = s.lower()\n    # s = s.upper()\n    # Step 2\n    # s = s.swapcase()\n    # Step 3\n    # s = s[::-1]\n    # Step 4\n    # s = s[::-1].swapcase()\n    # Step 5\n    # s = s.swapcase()\n    # Step 6\n    # s = s.swapcase().swapcase()\n    # Step 7\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 8\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 9\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 10\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 11\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 12\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 13\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 14\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 15\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 16\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 17\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 18\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 19\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 20\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 21\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 22\n    # s = s.swapcase().swapcase().swapcase()\n    # Step 23\n    # s = s.swapcase().swap", "    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n", "    # if s is empty, return empty string\n    if len(s) == 0:\n        return ''\n    # if s contains no letters, reverse it\n    if s.islower():\n        return s[::-1]\n    else:\n        return s.lower()\n\n", "    if not s:\n        return s\n    if not any(ch.isalpha() for ch in s):\n        return s[::-1]\n    return ''.join(ch.upper() if ch.isalpha() else ch.lower() for ch in s)\n\n", "    if not s:\n        return s\n\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return \"\".join(s)\n\n", "    result = ''\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                result += i.upper()\n            else:\n                result += i.lower()\n        else:\n            result += i\n    return result\n\n", "    return \"\".join(list(map(lambda x: x.lower() if x.isalpha() else x.upper(), s)))\n\n", "    if not s:\n        return s\n    \n    result = []\n    for ch in s:\n        if ch.isalpha():\n            result.append(ch.upper() if ch.islower() else ch.lower())\n        else:\n            result.append(ch)\n    return \"\".join(result)\n", "    s = s.lower()\n    if s == '':\n        return s\n    else:\n        return ''.join([i.upper() if i.islower() else i.lower() for i in s])\n\n", "    return s.swapcase() if s else s[::-1]\n", "    return \"\".join([chr(ord(c) + (1 if c.isalpha() else 0)) if c.isalpha() else c for c in s])\n\n", "    ans = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                ans += s[i].upper()\n            else:\n                ans += s[i].lower()\n        else:\n            ans += s[i]\n    return ans\n\n", "    return ''.join(\n        c.upper() if c.islower() else c.lower()\n        for c in s\n    )\n\n", "    if not s:\n        return s\n    new_s = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            new_s.append(s[i].upper())\n        else:\n            new_s.append(s[i].lower())\n    return ''.join(new_s)\n\n", "    s = ''.join([char.upper() if char.islower() else char.lower() for char in s])\n    return s[::-1] if s else s[::-1]\n\n", "    if not s:\n        return s\n    if s[0].isalpha():\n        if s[0].isupper():\n            return s[::-1].upper()\n        else:\n            return s[::-1].lower()\n    return s[::-1]\n\n", "    if not s:\n        return s\n\n    # Replace all spaces with lowercase''\n    s = s.replace(' ','')\n\n    # Convert all letters to lowercase\n    s = s.lower()\n\n    # Iterate through the string and swap lowercase and uppercase letters\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s = s[:i] + s[i].lower() + s[i + 1:]\n            else:\n                s = s[:i] + s[i].upper() + s[i + 1:]\n    return s\n\n", "    return ''.join(sorted(s, key=lambda x: x.islower() if x.isalpha() else x.isupper()))\n\n", "    # if not s:\n    #     return s\n    # if s[0].isalpha():\n    #     s = s.lower() if s[0].isupper() else s.upper()\n    #     s = s[::-1]\n    # else:\n    #     s = s[::-1]\n    # return s\n    if not s:\n        return s\n    if s[0].isalpha():\n        return s[0].lower() + solve(s[1:])\n    return solve(s[1:]) + s[0].lower()\n\n", "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    if not s:\n        s = s[::-1]\n    return ''.join(s)\n\n", "    # return s.upper() if s.isalpha() else s[::-1].lower()\n    return s[::-1] if s.isalpha() else s.upper()\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}