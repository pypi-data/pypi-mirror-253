{"name": "HumanEval_29_filter_by_prefix", "language": "py", "prompt": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "tests": "def check(candidate):\n    total_tests = 0\n    failed_tests = 0\n\n    try:\n        total_tests += 1\n        assert candidate([], 'john') == []\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    except AssertionError:\n        failed_tests += 1\n    print(total_tests, failed_tests)\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n", "completions": ["    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered.append(s)\n    return filtered\n", "    \n    filtered_strings = []\n    \n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    \n    return filtered_strings\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n\n    return filtered_strings\n\n", "    if prefix:\n        return [x for x in strings if x.startswith(prefix)]\n    else:\n        return strings\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n", "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n", "    filtered_list = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_list.append(string)\n    return filtered_list\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n", "    filtered = []\n    for word in strings:\n        if word.startswith(prefix):\n            filtered.append(word)\n    return filtered\n", "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n\n    return filtered_strings\n\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n", "    return list(filter(lambda string: string.startswith(prefix), strings))\n", "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n\n    return filtered_strings\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n", "    # TODO: Implement this function.\n    return []\n", "    return filter(lambda s: s.startswith(prefix), strings)\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    result = []\n    for word in strings:\n        if word.startswith(prefix):\n            result.append(word)\n    return result\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return [string for string in strings if string.startswith(prefix)]\n\n", "    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered.append(s)\n    return filtered\n\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return [string for string in strings if string.startswith(prefix)]\n\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return [s for s in strings if s.startswith(prefix)]\n\n", "    filtered = []\n    for word in strings:\n        if word.startswith(prefix):\n            filtered.append(word)\n    return filtered\n", "    return [s for s in strings if s.startswith(prefix)]\n\n", "    return filter(lambda s: s.startswith(prefix), strings)\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered.append(s)\n    return filtered\n\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    if not prefix:\n        return []\n    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    # create empty list\n    filtered_strings = []\n    # iterate through list\n    for string in strings:\n        # check if string starts with prefix\n        if string.startswith(prefix):\n            # append string to list if true\n            filtered_strings.append(string)\n    # return list\n    return filtered_strings\n\n", "    # TODO: implement this function\n    filtered_list = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_list.append(string)\n    return filtered_list\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda string: string.startswith(prefix), strings))\n", "    # YOUR CODE GOES HERE\n    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return filter(lambda s: s.startswith(prefix), strings)\n\n", "    return [string for string in strings if string.startswith(prefix)]\n\n", "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n\n", "    # return [s for s in strings if s.startswith(prefix)]\n    return [s for s in strings if s.startswith(prefix)]\n", "    return [string for string in strings if string.startswith(prefix)]\n\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n", "    if prefix == '':\n        return strings\n    return [string for string in strings if string.startswith(prefix)]\n", "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n\n", "    return [string for string in strings if string.startswith(prefix)]\n\n", "    # Check if prefix is an empty string\n    if prefix == '':\n        return strings\n    return [s for s in strings if s.startswith(prefix)]\n", "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n", "    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered.append(s)\n    return filtered\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings\n", "    result = []\n    for s in strings:\n        if s[0:len(prefix)] == prefix:\n            result.append(s)\n    return result\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    # Your code here\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return filter(lambda s: s.startswith(prefix), strings)\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    return [string for string in strings if string.startswith(prefix)]\n\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    return [string for string in strings if string.startswith(prefix)]\n\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n", "    filtered_list = []\n    for i in strings:\n        if i.startswith(prefix):\n            filtered_list.append(i)\n    return filtered_list\n", "    result = []\n    for s in strings:\n        if s[:len(prefix)] == prefix:\n            result.append(s)\n    return result\n", "    return list(filter(lambda string: string.startswith(prefix), strings))\n", "    filtered_list = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_list.append(s)\n    return filtered_list\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n", "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n\n", "    return [string for string in strings if string.startswith(prefix)]\n\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n", "    # this will loop through the list of strings and return only the ones that start with the prefix\n    return list(filter(lambda string: string.startswith(prefix), strings))\n", "    result = []\n    for item in strings:\n        if item.startswith(prefix):\n            result.append(item)\n    return result\n", "    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n", "    return filter(lambda x: x.startswith(prefix), strings)\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return [string for string in strings if string.startswith(prefix)]\n\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered.append(s)\n    return filtered\n", "    return [s for s in strings if s.startswith(prefix)]\n\n", "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n", "    # strings = ['abc', 'bcd', 'cde', 'array']\n    # prefix = 'a'\n    filtered_list = []\n    for str in strings:\n        if str.startswith(prefix):\n            filtered_list.append(str)\n    return filtered_list\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    if prefix == \"\":\n        return strings\n    else:\n        return [s for s in strings if s.startswith(prefix)]\n", "    return [x for x in strings if x.startswith(prefix)]\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    filtered_list = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_list.append(string)\n    return filtered_list\n", "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n\n    return filtered_strings\n\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    filtered_list = []\n    for item in strings:\n        if item.startswith(prefix):\n            filtered_list.append(item)\n    return filtered_list\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n", "    return list(filter(lambda string: string.startswith(prefix), strings))\n", "    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result\n", "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n", "    filtered = []\n    for i in range(0,len(strings)):\n        if strings[i].startswith(prefix):\n            filtered.append(strings[i])\n    return filtered\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered.append(s)\n    return filtered\n\n", "    return [string for string in strings if string.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n", "    return list(filter(lambda string: string.startswith(prefix), strings))\n", "    # your code here\n    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    return list(filter(lambda string: string.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return [x for x in strings if x.startswith(prefix)]\n", "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n", "    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result\n", "    filtered_list = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_list.append(string)\n    return filtered_list\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n", "    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return [string for string in strings if string.startswith(prefix)]\n\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n", "    return list(filter(lambda s: s.startswith(prefix), strings))\n\n", "    return [s for s in strings if s.startswith(prefix)]\n", "    return list(filter(lambda x: x.startswith(prefix), strings))\n\n", "    return [s for s in strings if s.startswith(prefix)]\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}