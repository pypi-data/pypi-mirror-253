{"name": "HumanEval_7_filter_by_substring", "language": "py", "prompt": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n", "tests": "def check(candidate):\n    total_tests = 0\n    failed_tests = 0\n\n    try:\n        total_tests += 1\n        assert candidate([], 'john') == []\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n    except AssertionError:\n        failed_tests += 1\n    print(total_tests, failed_tests)\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n", "completions": ["    return list(filter(lambda s: substring in s, strings))\n", "    return [string for string in strings if substring in string]\n\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "    return [substring for substring in strings if substring.find(substring) > -1]\n", "    return list(filter(lambda x: substring in x, strings))\n", "    return [string for string in strings if substring in string]\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "    return list(filter(lambda s: substring in s, strings))\n", "    return list(filter(lambda string: substring in string, strings))\n\n", "    # YOUR CODE GOES HERE\n    return list(filter(lambda x: substring in x, strings))\n", "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n", "    return [string for string in strings if substring in string]\n\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    # TODO: implement this function\n    filtered_list = []\n    for s in strings:\n        if substring in s:\n            filtered_list.append(s)\n    return filtered_list\n\n", "    output = []\n    for s in strings:\n        if substring in s:\n            output.append(s)\n    return output\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "    return [string for string in strings if substring in string]\n", "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n", "    return list(filter(lambda s: substring in s, strings))\n", "    output = []\n    for string in strings:\n        if substring in string:\n            output.append(string)\n    return output\n", "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n", "    return [string for string in strings if substring in string]\n", "    return [s for s in strings if substring in s]\n", "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n", "    return [string for string in strings if substring in string]\n\n", "    return list(filter(lambda x: substring in x, strings))\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n\n", "    return [substring for string in strings if substring in string]\n", "    return [string for string in strings if substring in string]\n\n", "    filtered_list = []\n    for element in strings:\n        if substring in element:\n            filtered_list.append(element)\n    return filtered_list\n\n", "    return [string for string in strings if substring in string]\n", "    return [string for string in strings if substring in string]\n", "    return [string for string in strings if substring in string]\n\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n\n", "    return list(filter(lambda x: substring in x, strings))\n", "    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n\n    return filtered_list\n", "    return [string for string in strings if substring in string]\n", "    # write your code here\n    return list(filter(lambda x: substring in x, strings))\n\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    return [string for string in strings if substring in string]\n", "    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n", "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n\n", "    return list(filter(lambda s: substring in s, strings))\n\n", "    return [string for string in strings if substring in string]\n", "    return list(filter(lambda s: substring in s, strings))\n", "    return list(filter(lambda s: substring in s, strings))\n", "    return [string for string in strings if substring in string]\n", "    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n", "    return list(filter(lambda x: substring in x, strings))\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "    return list(filter(lambda x: substring in x, strings))\n", "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n", "    return [string for string in strings if substring in string]\n", "    substring = substring.lower()\n    filtered_strings = []\n    for string in strings:\n        if substring in string.lower():\n            filtered_strings.append(string)\n    return filtered_strings\n", "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n\n", "    filtered_list = []\n    for item in strings:\n        if substring in item:\n            filtered_list.append(item)\n    return filtered_list\n", "    return [string for string in strings if substring in string]\n", "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "    # Filter the list of strings on the basis of substring\n    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n", "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n", "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n", "    return [x for x in strings if substring in x]\n", "    # return [string for string in strings if substring in string]\n    # return [string for string in strings if string.find(substring)!= -1]\n    # return [string for string in strings if substring in string]\n    return [string for string in strings if substring in string.lower()]\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n", "    return [s for s in strings if substring in s]\n\n", "    return [string for string in strings if substring in string]\n", "    if len(substring) == 0:\n        return strings\n    return [string for string in strings if substring in string]\n\n", "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n", "    return [string for string in strings if substring in string]\n\n", "    new_list = []\n    for item in strings:\n        if substring in item:\n            new_list.append(item)\n    return new_list\n\n", "    filtered = []\n    for s in strings:\n        if substring in s:\n            filtered.append(s)\n    return filtered\n", "    return list(filter(lambda string: substring in string, strings))\n\n", "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n", "    return list(filter(lambda x: substring in x, strings))\n", "    return list(filter(lambda x: substring in x, strings))\n", "    return [string for string in strings if substring in string]\n", "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n", "    return list(filter(lambda x: substring in x, strings))\n", "    return filter(lambda string: substring in string, strings)\n", "    return list(filter(lambda x: substring in x, strings))\n", "    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n\n    return filtered_list\n", "    return list(filter(lambda string: substring in string, strings))\n\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    return list(filter(lambda s: substring in s, strings))\n", "    filtered = []\n    for s in strings:\n        if substring in s:\n            filtered.append(s)\n\n    return filtered\n\n", "    return [s for s in strings if substring in s]\n", "    return [s for s in strings if substring in s]\n\n", "    filtered = []\n    for item in strings:\n        if substring in item:\n            filtered.append(item)\n    return filtered\n", "    return list(filter(lambda s: substring in s, strings))\n\n", "    output = []\n    for string in strings:\n        if substring in string:\n            output.append(string)\n    return output\n", "    return [string for string in strings if substring in string]\n", "    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n", "    return [string for string in strings if substring in string]\n", "    return [string for string in strings if substring in string]\n", "    return list(filter(lambda s: substring in s, strings))\n", "    return [string for string in strings if substring in string]\n\n", "    return list(filter(lambda s: substring in s, strings))\n", "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n\n", "    if substring in strings:\n        filtered_list = [string for string in strings if substring in string]\n        return filtered_list\n    else:\n        return []\n", "    return list(filter(lambda x: substring in x, strings))\n", "    return [string for string in strings if substring in string]\n", "    filtered = []\n    for item in strings:\n        if substring in item:\n            filtered.append(item)\n\n    return filtered\n\n", "    filtered_list = []\n    for word in strings:\n        if substring in word:\n            filtered_list.append(word)\n    return filtered_list\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "    return list(filter(lambda string: substring in string, strings))\n", "    return [string for string in strings if substring in string]\n", "    return list(filter(lambda x: substring in x, strings))\n", "    # your code here\n    return [string for string in strings if substring in string]\n", "    return list(filter(lambda s: substring in s, strings))\n", "    return [string for string in strings if substring in string]\n", "    return [string for string in strings if substring in string]\n", "    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n", "    filtered = []\n    for i in strings:\n        if substring in i:\n            filtered.append(i)\n    return filtered\n\n", "    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n\n", "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n\n", "    return [string for string in strings if substring in string]\n", "    return [string for string in strings if substring in string]\n\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "    return list(filter(lambda s: substring in s, strings))\n", "    return [x for x in strings if substring in x]\n", "    return [string for string in strings if substring in string]\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    return list(filter(lambda x: substring in x, strings))\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    # Filter out all strings that do not contain substring\n    substring_filtered = []\n    for string in strings:\n        if substring in string:\n            substring_filtered.append(string)\n    return substring_filtered\n", "    return list(filter(lambda s: substring in s, strings))\n\n", "    return [s for s in strings if substring in s]\n\n", "    return list(filter(lambda x: substring in x, strings))\n", "    return list(filter(lambda s: substring in s, strings))\n\n", "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n", "    return [s for s in strings if substring in s]\n", "    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n\n    return filtered_list\n\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    return list(filter(lambda x: substring in x, strings))\n", "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n", "    return list(filter(lambda s: substring in s, strings))\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    return list(filter(lambda x: substring in x, strings))\n", "    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n\n", "    return [s for s in strings if substring in s]\n", "    return [string for string in strings if substring in string]\n\n", "    filtered_list = []\n    for item in strings:\n        if substring in item:\n            filtered_list.append(item)\n    return filtered_list\n", "    return list(filter(lambda x: substring in x, strings))\n", "    return list(filter(lambda x: substring in x, strings))\n", "    result = []\n    for item in strings:\n        if substring in item:\n            result.append(item)\n    return result\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    filtered = []\n    for item in strings:\n        if substring in item:\n            filtered.append(item)\n    return filtered\n", "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n", "    filtered = []\n    for str in strings:\n        if substring in str:\n            filtered.append(str)\n    return filtered\n", "    return [s for s in strings if substring in s]\n\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    return list(filter(lambda x: substring in x, strings))\n", "    return [string for string in strings if substring in string]\n\n", "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n", "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n", "    filtered = []\n    for i in strings:\n        if substring in i:\n            filtered.append(i)\n    return filtered\n\n", "    return [s for s in strings if substring in s]\n\n", "    return [string for string in strings if substring in string]\n", "    return list(filter(lambda x: substring in x, strings))\n", "    return [string for string in strings if substring in string]\n", "    return [string for string in strings if substring in string]\n", "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n", "    return [string for string in strings if substring in string]\n", "    return list(filter(lambda x: substring in x, strings))\n", "    substring_list = []\n    for string in strings:\n        if substring in string:\n            substring_list.append(string)\n    return substring_list\n", "    return list(filter(lambda s: substring in s, strings))\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    return list(filter(lambda x: substring in x, strings))\n", "    return [string for string in strings if substring in string]\n", "    return list(filter(lambda s: substring in s, strings))\n", "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n\n", "    return list(filter(lambda x: substring in x, strings))\n\n", "    return [s for s in strings if substring in s]\n", "    return list(filter(lambda s: substring in s, strings))\n", "    return list(filter(lambda x: substring in x, strings))\n", "    return list(filter(lambda s: substring in s, strings))\n", "    return [string for string in strings if substring in string]\n", "    return [s for s in strings if substring in s]\n", "    return list(filter(lambda s: substring in s, strings))\n\n", "    substring_list = []\n    for string in strings:\n        if substring in string:\n            substring_list.append(string)\n    return substring_list\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n", "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n", "    return list(filter(lambda s: substring in s, strings))\n", "    # TODO: complete this function\n    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n", "    filtered_list = []\n    for s in strings:\n        if substring in s:\n            filtered_list.append(s)\n    return filtered_list\n\n", "    # your code here\n    return list(filter(lambda x: x.find(substring)!= -1, strings))\n\n", "    return [string for string in strings if substring in string]\n", "    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n", "    return [string for string in strings if substring in string]\n\n", "    return list(filter(lambda string: substring in string, strings))\n", "    return list(filter(lambda string: substring in string, strings))\n", "    return list(filter(lambda x: substring in x, strings))\n", "    filtered_list = []\n    for item in strings:\n        if substring in item:\n            filtered_list.append(item)\n    return filtered_list\n\n", "    return list(filter(lambda x: substring in x, strings))\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}