# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ActionApprovalEmailNotification',
    'ActionApprovalWebhookNotification',
    'ActionAzureMethod',
    'ActionGithubMethod',
    'ActionGitlabMethod',
    'ActionKafkaMethod',
    'ActionPermissionsPermissions',
    'ActionPermissionsPermissionsApprove',
    'ActionPermissionsPermissionsExecute',
    'ActionUserProperties',
    'ActionUserPropertiesArrayProps',
    'ActionUserPropertiesArrayPropsBooleanItems',
    'ActionUserPropertiesArrayPropsDataset',
    'ActionUserPropertiesArrayPropsDatasetRule',
    'ActionUserPropertiesArrayPropsDatasetRuleValue',
    'ActionUserPropertiesArrayPropsNumberItems',
    'ActionUserPropertiesArrayPropsObjectItems',
    'ActionUserPropertiesArrayPropsStringItems',
    'ActionUserPropertiesBooleanProps',
    'ActionUserPropertiesBooleanPropsDataset',
    'ActionUserPropertiesBooleanPropsDatasetRule',
    'ActionUserPropertiesBooleanPropsDatasetRuleValue',
    'ActionUserPropertiesNumberProps',
    'ActionUserPropertiesNumberPropsDataset',
    'ActionUserPropertiesNumberPropsDatasetRule',
    'ActionUserPropertiesNumberPropsDatasetRuleValue',
    'ActionUserPropertiesObjectProps',
    'ActionUserPropertiesObjectPropsDataset',
    'ActionUserPropertiesObjectPropsDatasetRule',
    'ActionUserPropertiesObjectPropsDatasetRuleValue',
    'ActionUserPropertiesStringProps',
    'ActionUserPropertiesStringPropsDataset',
    'ActionUserPropertiesStringPropsDatasetRule',
    'ActionUserPropertiesStringPropsDatasetRuleValue',
    'ActionWebhookMethod',
    'AggregationPropertiesProperties',
    'AggregationPropertiesPropertiesMethod',
    'AggregationPropertiesPropertiesMethodAggregateByProperty',
    'AggregationPropertiesPropertiesMethodAverageByProperty',
    'AggregationPropertiesPropertiesMethodAverageEntities',
    'BlueprintCalculationProperties',
    'BlueprintKafkaChangelogDestination',
    'BlueprintMirrorProperties',
    'BlueprintProperties',
    'BlueprintPropertiesArrayProps',
    'BlueprintPropertiesArrayPropsBooleanItems',
    'BlueprintPropertiesArrayPropsNumberItems',
    'BlueprintPropertiesArrayPropsObjectItems',
    'BlueprintPropertiesArrayPropsStringItems',
    'BlueprintPropertiesBooleanProps',
    'BlueprintPropertiesNumberProps',
    'BlueprintPropertiesObjectProps',
    'BlueprintPropertiesStringProps',
    'BlueprintPropertiesStringPropsSpecAuthentication',
    'BlueprintRelations',
    'BlueprintTeamInheritance',
    'BlueprintWebhookChangelogDestination',
    'EntityProperties',
    'EntityPropertiesArrayProps',
    'EntityRelations',
    'ScorecardRule',
    'ScorecardRuleQuery',
    'WebhookMapping',
    'WebhookMappingEntity',
    'WebhookSecurity',
]

@pulumi.output_type
class ActionApprovalEmailNotification(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class ActionApprovalWebhookNotification(dict):
    def __init__(__self__, *,
                 url: str,
                 format: Optional[str] = None):
        pulumi.set(__self__, "url", url)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")


@pulumi.output_type
class ActionAzureMethod(dict):
    def __init__(__self__, *,
                 org: str,
                 webhook: str):
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter
    def org(self) -> str:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def webhook(self) -> str:
        return pulumi.get(self, "webhook")


@pulumi.output_type
class ActionGithubMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "omitPayload":
            suggest = "omit_payload"
        elif key == "omitUserInputs":
            suggest = "omit_user_inputs"
        elif key == "reportWorkflowStatus":
            suggest = "report_workflow_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGithubMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGithubMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGithubMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 org: str,
                 repo: str,
                 workflow: str,
                 omit_payload: Optional[bool] = None,
                 omit_user_inputs: Optional[bool] = None,
                 report_workflow_status: Optional[bool] = None):
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "repo", repo)
        pulumi.set(__self__, "workflow", workflow)
        if omit_payload is not None:
            pulumi.set(__self__, "omit_payload", omit_payload)
        if omit_user_inputs is not None:
            pulumi.set(__self__, "omit_user_inputs", omit_user_inputs)
        if report_workflow_status is not None:
            pulumi.set(__self__, "report_workflow_status", report_workflow_status)

    @property
    @pulumi.getter
    def org(self) -> str:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def repo(self) -> str:
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def workflow(self) -> str:
        return pulumi.get(self, "workflow")

    @property
    @pulumi.getter(name="omitPayload")
    def omit_payload(self) -> Optional[bool]:
        return pulumi.get(self, "omit_payload")

    @property
    @pulumi.getter(name="omitUserInputs")
    def omit_user_inputs(self) -> Optional[bool]:
        return pulumi.get(self, "omit_user_inputs")

    @property
    @pulumi.getter(name="reportWorkflowStatus")
    def report_workflow_status(self) -> Optional[bool]:
        return pulumi.get(self, "report_workflow_status")


@pulumi.output_type
class ActionGitlabMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "projectName":
            suggest = "project_name"
        elif key == "defaultRef":
            suggest = "default_ref"
        elif key == "omitPayload":
            suggest = "omit_payload"
        elif key == "omitUserInputs":
            suggest = "omit_user_inputs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGitlabMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGitlabMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGitlabMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: str,
                 project_name: str,
                 agent: Optional[bool] = None,
                 default_ref: Optional[str] = None,
                 omit_payload: Optional[bool] = None,
                 omit_user_inputs: Optional[bool] = None):
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "project_name", project_name)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)
        if default_ref is not None:
            pulumi.set(__self__, "default_ref", default_ref)
        if omit_payload is not None:
            pulumi.set(__self__, "omit_payload", omit_payload)
        if omit_user_inputs is not None:
            pulumi.set(__self__, "omit_user_inputs", omit_user_inputs)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def agent(self) -> Optional[bool]:
        return pulumi.get(self, "agent")

    @property
    @pulumi.getter(name="defaultRef")
    def default_ref(self) -> Optional[str]:
        return pulumi.get(self, "default_ref")

    @property
    @pulumi.getter(name="omitPayload")
    def omit_payload(self) -> Optional[bool]:
        return pulumi.get(self, "omit_payload")

    @property
    @pulumi.getter(name="omitUserInputs")
    def omit_user_inputs(self) -> Optional[bool]:
        return pulumi.get(self, "omit_user_inputs")


@pulumi.output_type
class ActionKafkaMethod(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class ActionPermissionsPermissions(dict):
    def __init__(__self__, *,
                 approve: Optional['outputs.ActionPermissionsPermissionsApprove'] = None,
                 execute: Optional['outputs.ActionPermissionsPermissionsExecute'] = None):
        if approve is not None:
            pulumi.set(__self__, "approve", approve)
        if execute is not None:
            pulumi.set(__self__, "execute", execute)

    @property
    @pulumi.getter
    def approve(self) -> Optional['outputs.ActionPermissionsPermissionsApprove']:
        return pulumi.get(self, "approve")

    @property
    @pulumi.getter
    def execute(self) -> Optional['outputs.ActionPermissionsPermissionsExecute']:
        return pulumi.get(self, "execute")


@pulumi.output_type
class ActionPermissionsPermissionsApprove(dict):
    def __init__(__self__, *,
                 policy: Optional[str] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "users")


@pulumi.output_type
class ActionPermissionsPermissionsExecute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownedByTeam":
            suggest = "owned_by_team"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionPermissionsPermissionsExecute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionPermissionsPermissionsExecute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionPermissionsPermissionsExecute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owned_by_team: Optional[bool] = None,
                 policy: Optional[str] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[bool]:
        return pulumi.get(self, "owned_by_team")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "users")


@pulumi.output_type
class ActionUserProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arrayProps":
            suggest = "array_props"
        elif key == "booleanProps":
            suggest = "boolean_props"
        elif key == "numberProps":
            suggest = "number_props"
        elif key == "objectProps":
            suggest = "object_props"
        elif key == "stringProps":
            suggest = "string_props"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 array_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesArrayProps']] = None,
                 boolean_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesBooleanProps']] = None,
                 number_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesNumberProps']] = None,
                 object_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesObjectProps']] = None,
                 string_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesStringProps']] = None):
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[Mapping[str, 'outputs.ActionUserPropertiesArrayProps']]:
        return pulumi.get(self, "array_props")

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[Mapping[str, 'outputs.ActionUserPropertiesBooleanProps']]:
        return pulumi.get(self, "boolean_props")

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[Mapping[str, 'outputs.ActionUserPropertiesNumberProps']]:
        return pulumi.get(self, "number_props")

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[Mapping[str, 'outputs.ActionUserPropertiesObjectProps']]:
        return pulumi.get(self, "object_props")

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[Mapping[str, 'outputs.ActionUserPropertiesStringProps']]:
        return pulumi.get(self, "string_props")


@pulumi.output_type
class ActionUserPropertiesArrayProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanItems":
            suggest = "boolean_items"
        elif key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "maxItems":
            suggest = "max_items"
        elif key == "minItems":
            suggest = "min_items"
        elif key == "numberItems":
            suggest = "number_items"
        elif key == "objectItems":
            suggest = "object_items"
        elif key == "stringItems":
            suggest = "string_items"
        elif key == "visibleJqQuery":
            suggest = "visible_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesArrayProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesArrayProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesArrayProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_items: Optional['outputs.ActionUserPropertiesArrayPropsBooleanItems'] = None,
                 dataset: Optional['outputs.ActionUserPropertiesArrayPropsDataset'] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_items: Optional[int] = None,
                 min_items: Optional[int] = None,
                 number_items: Optional['outputs.ActionUserPropertiesArrayPropsNumberItems'] = None,
                 object_items: Optional['outputs.ActionUserPropertiesArrayPropsObjectItems'] = None,
                 required: Optional[bool] = None,
                 string_items: Optional['outputs.ActionUserPropertiesArrayPropsStringItems'] = None,
                 title: Optional[str] = None,
                 visible: Optional[bool] = None,
                 visible_jq_query: Optional[str] = None):
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_items is not None:
            pulumi.set(__self__, "max_items", max_items)
        if min_items is not None:
            pulumi.set(__self__, "min_items", min_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional['outputs.ActionUserPropertiesArrayPropsBooleanItems']:
        return pulumi.get(self, "boolean_items")

    @property
    @pulumi.getter
    def dataset(self) -> Optional['outputs.ActionUserPropertiesArrayPropsDataset']:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[int]:
        return pulumi.get(self, "max_items")

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[int]:
        return pulumi.get(self, "min_items")

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional['outputs.ActionUserPropertiesArrayPropsNumberItems']:
        return pulumi.get(self, "number_items")

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional['outputs.ActionUserPropertiesArrayPropsObjectItems']:
        return pulumi.get(self, "object_items")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional['outputs.ActionUserPropertiesArrayPropsStringItems']:
        return pulumi.get(self, "string_items")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "visible_jq_query")


@pulumi.output_type
class ActionUserPropertiesArrayPropsBooleanItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[bool]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "defaults")


@pulumi.output_type
class ActionUserPropertiesArrayPropsDataset(dict):
    def __init__(__self__, *,
                 combinator: str,
                 rules: Sequence['outputs.ActionUserPropertiesArrayPropsDatasetRule']):
        pulumi.set(__self__, "combinator", combinator)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ActionUserPropertiesArrayPropsDatasetRule']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class ActionUserPropertiesArrayPropsDatasetRule(dict):
    def __init__(__self__, *,
                 operator: str,
                 value: 'outputs.ActionUserPropertiesArrayPropsDatasetRuleValue',
                 blueprint: Optional[str] = None,
                 property: Optional[str] = None):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ActionUserPropertiesArrayPropsDatasetRuleValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionUserPropertiesArrayPropsDatasetRuleValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqQuery":
            suggest = "jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesArrayPropsDatasetRuleValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesArrayPropsDatasetRuleValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesArrayPropsDatasetRuleValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jq_query: str):
        pulumi.set(__self__, "jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> str:
        return pulumi.get(self, "jq_query")


@pulumi.output_type
class ActionUserPropertiesArrayPropsNumberItems(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumJqQuery":
            suggest = "enum_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesArrayPropsNumberItems. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesArrayPropsNumberItems.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesArrayPropsNumberItems.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 defaults: Optional[Sequence[float]] = None,
                 enum_jq_query: Optional[str] = None,
                 enums: Optional[Sequence[float]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if enum_jq_query is not None:
            pulumi.set(__self__, "enum_jq_query", enum_jq_query)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "enum_jq_query")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "enums")


@pulumi.output_type
class ActionUserPropertiesArrayPropsObjectItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[Mapping[str, str]]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[Mapping[str, str]]]:
        return pulumi.get(self, "defaults")


@pulumi.output_type
class ActionUserPropertiesArrayPropsStringItems(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumJqQuery":
            suggest = "enum_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesArrayPropsStringItems. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesArrayPropsStringItems.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesArrayPropsStringItems.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint: Optional[str] = None,
                 defaults: Optional[Sequence[str]] = None,
                 enum_jq_query: Optional[str] = None,
                 enums: Optional[Sequence[str]] = None,
                 format: Optional[str] = None):
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if enum_jq_query is not None:
            pulumi.set(__self__, "enum_jq_query", enum_jq_query)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "enum_jq_query")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")


@pulumi.output_type
class ActionUserPropertiesBooleanProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "visibleJqQuery":
            suggest = "visible_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesBooleanProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesBooleanProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesBooleanProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset: Optional['outputs.ActionUserPropertiesBooleanPropsDataset'] = None,
                 default: Optional[bool] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None,
                 visible: Optional[bool] = None,
                 visible_jq_query: Optional[str] = None):
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter
    def dataset(self) -> Optional['outputs.ActionUserPropertiesBooleanPropsDataset']:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "visible_jq_query")


@pulumi.output_type
class ActionUserPropertiesBooleanPropsDataset(dict):
    def __init__(__self__, *,
                 combinator: str,
                 rules: Sequence['outputs.ActionUserPropertiesBooleanPropsDatasetRule']):
        pulumi.set(__self__, "combinator", combinator)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ActionUserPropertiesBooleanPropsDatasetRule']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class ActionUserPropertiesBooleanPropsDatasetRule(dict):
    def __init__(__self__, *,
                 operator: str,
                 value: 'outputs.ActionUserPropertiesBooleanPropsDatasetRuleValue',
                 blueprint: Optional[str] = None,
                 property: Optional[str] = None):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ActionUserPropertiesBooleanPropsDatasetRuleValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionUserPropertiesBooleanPropsDatasetRuleValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqQuery":
            suggest = "jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesBooleanPropsDatasetRuleValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesBooleanPropsDatasetRuleValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesBooleanPropsDatasetRuleValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jq_query: str):
        pulumi.set(__self__, "jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> str:
        return pulumi.get(self, "jq_query")


@pulumi.output_type
class ActionUserPropertiesNumberProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "enumJqQuery":
            suggest = "enum_jq_query"
        elif key == "visibleJqQuery":
            suggest = "visible_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesNumberProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesNumberProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesNumberProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset: Optional['outputs.ActionUserPropertiesNumberPropsDataset'] = None,
                 default: Optional[float] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 enum_jq_query: Optional[str] = None,
                 enums: Optional[Sequence[float]] = None,
                 icon: Optional[str] = None,
                 maximum: Optional[float] = None,
                 minimum: Optional[float] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None,
                 visible: Optional[bool] = None,
                 visible_jq_query: Optional[str] = None):
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_jq_query is not None:
            pulumi.set(__self__, "enum_jq_query", enum_jq_query)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter
    def dataset(self) -> Optional['outputs.ActionUserPropertiesNumberPropsDataset']:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def default(self) -> Optional[float]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "enum_jq_query")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[float]:
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[float]:
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "visible_jq_query")


@pulumi.output_type
class ActionUserPropertiesNumberPropsDataset(dict):
    def __init__(__self__, *,
                 combinator: str,
                 rules: Sequence['outputs.ActionUserPropertiesNumberPropsDatasetRule']):
        pulumi.set(__self__, "combinator", combinator)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ActionUserPropertiesNumberPropsDatasetRule']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class ActionUserPropertiesNumberPropsDatasetRule(dict):
    def __init__(__self__, *,
                 operator: str,
                 value: 'outputs.ActionUserPropertiesNumberPropsDatasetRuleValue',
                 blueprint: Optional[str] = None,
                 property: Optional[str] = None):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ActionUserPropertiesNumberPropsDatasetRuleValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionUserPropertiesNumberPropsDatasetRuleValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqQuery":
            suggest = "jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesNumberPropsDatasetRuleValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesNumberPropsDatasetRuleValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesNumberPropsDatasetRuleValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jq_query: str):
        pulumi.set(__self__, "jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> str:
        return pulumi.get(self, "jq_query")


@pulumi.output_type
class ActionUserPropertiesObjectProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "visibleJqQuery":
            suggest = "visible_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesObjectProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesObjectProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesObjectProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset: Optional['outputs.ActionUserPropertiesObjectPropsDataset'] = None,
                 default: Optional[str] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 encryption: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None,
                 visible: Optional[bool] = None,
                 visible_jq_query: Optional[str] = None):
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter
    def dataset(self) -> Optional['outputs.ActionUserPropertiesObjectPropsDataset']:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def encryption(self) -> Optional[str]:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "visible_jq_query")


@pulumi.output_type
class ActionUserPropertiesObjectPropsDataset(dict):
    def __init__(__self__, *,
                 combinator: str,
                 rules: Sequence['outputs.ActionUserPropertiesObjectPropsDatasetRule']):
        pulumi.set(__self__, "combinator", combinator)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ActionUserPropertiesObjectPropsDatasetRule']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class ActionUserPropertiesObjectPropsDatasetRule(dict):
    def __init__(__self__, *,
                 operator: str,
                 value: 'outputs.ActionUserPropertiesObjectPropsDatasetRuleValue',
                 blueprint: Optional[str] = None,
                 property: Optional[str] = None):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ActionUserPropertiesObjectPropsDatasetRuleValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionUserPropertiesObjectPropsDatasetRuleValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqQuery":
            suggest = "jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesObjectPropsDatasetRuleValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesObjectPropsDatasetRuleValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesObjectPropsDatasetRuleValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jq_query: str):
        pulumi.set(__self__, "jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> str:
        return pulumi.get(self, "jq_query")


@pulumi.output_type
class ActionUserPropertiesStringProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "enumJqQuery":
            suggest = "enum_jq_query"
        elif key == "maxLength":
            suggest = "max_length"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "visibleJqQuery":
            suggest = "visible_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesStringProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesStringProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesStringProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint: Optional[str] = None,
                 dataset: Optional['outputs.ActionUserPropertiesStringPropsDataset'] = None,
                 default: Optional[str] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 encryption: Optional[str] = None,
                 enum_jq_query: Optional[str] = None,
                 enums: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_length: Optional[int] = None,
                 min_length: Optional[int] = None,
                 pattern: Optional[str] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None,
                 visible: Optional[bool] = None,
                 visible_jq_query: Optional[str] = None):
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if enum_jq_query is not None:
            pulumi.set(__self__, "enum_jq_query", enum_jq_query)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def dataset(self) -> Optional['outputs.ActionUserPropertiesStringPropsDataset']:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def encryption(self) -> Optional[str]:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "enum_jq_query")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[int]:
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "visible_jq_query")


@pulumi.output_type
class ActionUserPropertiesStringPropsDataset(dict):
    def __init__(__self__, *,
                 combinator: str,
                 rules: Sequence['outputs.ActionUserPropertiesStringPropsDatasetRule']):
        pulumi.set(__self__, "combinator", combinator)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ActionUserPropertiesStringPropsDatasetRule']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class ActionUserPropertiesStringPropsDatasetRule(dict):
    def __init__(__self__, *,
                 operator: str,
                 value: 'outputs.ActionUserPropertiesStringPropsDatasetRuleValue',
                 blueprint: Optional[str] = None,
                 property: Optional[str] = None):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ActionUserPropertiesStringPropsDatasetRuleValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionUserPropertiesStringPropsDatasetRuleValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqQuery":
            suggest = "jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesStringPropsDatasetRuleValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesStringPropsDatasetRuleValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesStringPropsDatasetRuleValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jq_query: str):
        pulumi.set(__self__, "jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> str:
        return pulumi.get(self, "jq_query")


@pulumi.output_type
class ActionWebhookMethod(dict):
    def __init__(__self__, *,
                 url: str,
                 agent: Optional[bool] = None,
                 method: Optional[str] = None,
                 synchronized: Optional[bool] = None):
        pulumi.set(__self__, "url", url)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if synchronized is not None:
            pulumi.set(__self__, "synchronized", synchronized)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def agent(self) -> Optional[bool]:
        return pulumi.get(self, "agent")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def synchronized(self) -> Optional[bool]:
        return pulumi.get(self, "synchronized")


@pulumi.output_type
class AggregationPropertiesProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetBlueprintIdentifier":
            suggest = "target_blueprint_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregationPropertiesProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregationPropertiesProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregationPropertiesProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: 'outputs.AggregationPropertiesPropertiesMethod',
                 target_blueprint_identifier: str,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 query: Optional[str] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "target_blueprint_identifier", target_blueprint_identifier)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def method(self) -> 'outputs.AggregationPropertiesPropertiesMethod':
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="targetBlueprintIdentifier")
    def target_blueprint_identifier(self) -> str:
        return pulumi.get(self, "target_blueprint_identifier")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class AggregationPropertiesPropertiesMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregateByProperty":
            suggest = "aggregate_by_property"
        elif key == "averageByProperty":
            suggest = "average_by_property"
        elif key == "averageEntities":
            suggest = "average_entities"
        elif key == "countEntities":
            suggest = "count_entities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregationPropertiesPropertiesMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregationPropertiesPropertiesMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregationPropertiesPropertiesMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregate_by_property: Optional['outputs.AggregationPropertiesPropertiesMethodAggregateByProperty'] = None,
                 average_by_property: Optional['outputs.AggregationPropertiesPropertiesMethodAverageByProperty'] = None,
                 average_entities: Optional['outputs.AggregationPropertiesPropertiesMethodAverageEntities'] = None,
                 count_entities: Optional[bool] = None):
        if aggregate_by_property is not None:
            pulumi.set(__self__, "aggregate_by_property", aggregate_by_property)
        if average_by_property is not None:
            pulumi.set(__self__, "average_by_property", average_by_property)
        if average_entities is not None:
            pulumi.set(__self__, "average_entities", average_entities)
        if count_entities is not None:
            pulumi.set(__self__, "count_entities", count_entities)

    @property
    @pulumi.getter(name="aggregateByProperty")
    def aggregate_by_property(self) -> Optional['outputs.AggregationPropertiesPropertiesMethodAggregateByProperty']:
        return pulumi.get(self, "aggregate_by_property")

    @property
    @pulumi.getter(name="averageByProperty")
    def average_by_property(self) -> Optional['outputs.AggregationPropertiesPropertiesMethodAverageByProperty']:
        return pulumi.get(self, "average_by_property")

    @property
    @pulumi.getter(name="averageEntities")
    def average_entities(self) -> Optional['outputs.AggregationPropertiesPropertiesMethodAverageEntities']:
        return pulumi.get(self, "average_entities")

    @property
    @pulumi.getter(name="countEntities")
    def count_entities(self) -> Optional[bool]:
        return pulumi.get(self, "count_entities")


@pulumi.output_type
class AggregationPropertiesPropertiesMethodAggregateByProperty(dict):
    def __init__(__self__, *,
                 func: str,
                 property: str):
        pulumi.set(__self__, "func", func)
        pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def func(self) -> str:
        return pulumi.get(self, "func")

    @property
    @pulumi.getter
    def property(self) -> str:
        return pulumi.get(self, "property")


@pulumi.output_type
class AggregationPropertiesPropertiesMethodAverageByProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageOf":
            suggest = "average_of"
        elif key == "measureTimeBy":
            suggest = "measure_time_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregationPropertiesPropertiesMethodAverageByProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregationPropertiesPropertiesMethodAverageByProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregationPropertiesPropertiesMethodAverageByProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_of: str,
                 measure_time_by: str,
                 property: str):
        pulumi.set(__self__, "average_of", average_of)
        pulumi.set(__self__, "measure_time_by", measure_time_by)
        pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter(name="averageOf")
    def average_of(self) -> str:
        return pulumi.get(self, "average_of")

    @property
    @pulumi.getter(name="measureTimeBy")
    def measure_time_by(self) -> str:
        return pulumi.get(self, "measure_time_by")

    @property
    @pulumi.getter
    def property(self) -> str:
        return pulumi.get(self, "property")


@pulumi.output_type
class AggregationPropertiesPropertiesMethodAverageEntities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageOf":
            suggest = "average_of"
        elif key == "measureTimeBy":
            suggest = "measure_time_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregationPropertiesPropertiesMethodAverageEntities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregationPropertiesPropertiesMethodAverageEntities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregationPropertiesPropertiesMethodAverageEntities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_of: Optional[str] = None,
                 measure_time_by: Optional[str] = None):
        if average_of is not None:
            pulumi.set(__self__, "average_of", average_of)
        if measure_time_by is not None:
            pulumi.set(__self__, "measure_time_by", measure_time_by)

    @property
    @pulumi.getter(name="averageOf")
    def average_of(self) -> Optional[str]:
        return pulumi.get(self, "average_of")

    @property
    @pulumi.getter(name="measureTimeBy")
    def measure_time_by(self) -> Optional[str]:
        return pulumi.get(self, "measure_time_by")


@pulumi.output_type
class BlueprintCalculationProperties(dict):
    def __init__(__self__, *,
                 calculation: str,
                 type: str,
                 colorized: Optional[bool] = None,
                 colors: Optional[Mapping[str, str]] = None,
                 description: Optional[str] = None,
                 format: Optional[str] = None,
                 icon: Optional[str] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "calculation", calculation)
        pulumi.set(__self__, "type", type)
        if colorized is not None:
            pulumi.set(__self__, "colorized", colorized)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def calculation(self) -> str:
        return pulumi.get(self, "calculation")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def colorized(self) -> Optional[bool]:
        return pulumi.get(self, "colorized")

    @property
    @pulumi.getter
    def colors(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintKafkaChangelogDestination(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class BlueprintMirrorProperties(dict):
    def __init__(__self__, *,
                 path: str,
                 title: Optional[str] = None):
        pulumi.set(__self__, "path", path)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arrayProps":
            suggest = "array_props"
        elif key == "booleanProps":
            suggest = "boolean_props"
        elif key == "numberProps":
            suggest = "number_props"
        elif key == "objectProps":
            suggest = "object_props"
        elif key == "stringProps":
            suggest = "string_props"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 array_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesArrayProps']] = None,
                 boolean_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesBooleanProps']] = None,
                 number_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesNumberProps']] = None,
                 object_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesObjectProps']] = None,
                 string_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesStringProps']] = None):
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesArrayProps']]:
        return pulumi.get(self, "array_props")

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesBooleanProps']]:
        return pulumi.get(self, "boolean_props")

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesNumberProps']]:
        return pulumi.get(self, "number_props")

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesObjectProps']]:
        return pulumi.get(self, "object_props")

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesStringProps']]:
        return pulumi.get(self, "string_props")


@pulumi.output_type
class BlueprintPropertiesArrayProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanItems":
            suggest = "boolean_items"
        elif key == "maxItems":
            suggest = "max_items"
        elif key == "minItems":
            suggest = "min_items"
        elif key == "numberItems":
            suggest = "number_items"
        elif key == "objectItems":
            suggest = "object_items"
        elif key == "stringItems":
            suggest = "string_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPropertiesArrayProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPropertiesArrayProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPropertiesArrayProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_items: Optional['outputs.BlueprintPropertiesArrayPropsBooleanItems'] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_items: Optional[int] = None,
                 min_items: Optional[int] = None,
                 number_items: Optional['outputs.BlueprintPropertiesArrayPropsNumberItems'] = None,
                 object_items: Optional['outputs.BlueprintPropertiesArrayPropsObjectItems'] = None,
                 required: Optional[bool] = None,
                 string_items: Optional['outputs.BlueprintPropertiesArrayPropsStringItems'] = None,
                 title: Optional[str] = None):
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_items is not None:
            pulumi.set(__self__, "max_items", max_items)
        if min_items is not None:
            pulumi.set(__self__, "min_items", min_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional['outputs.BlueprintPropertiesArrayPropsBooleanItems']:
        return pulumi.get(self, "boolean_items")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[int]:
        return pulumi.get(self, "max_items")

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[int]:
        return pulumi.get(self, "min_items")

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional['outputs.BlueprintPropertiesArrayPropsNumberItems']:
        return pulumi.get(self, "number_items")

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional['outputs.BlueprintPropertiesArrayPropsObjectItems']:
        return pulumi.get(self, "object_items")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional['outputs.BlueprintPropertiesArrayPropsStringItems']:
        return pulumi.get(self, "string_items")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesArrayPropsBooleanItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[bool]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "defaults")


@pulumi.output_type
class BlueprintPropertiesArrayPropsNumberItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[float]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "defaults")


@pulumi.output_type
class BlueprintPropertiesArrayPropsObjectItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[str]] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "defaults")


@pulumi.output_type
class BlueprintPropertiesArrayPropsStringItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[str]] = None,
                 format: Optional[str] = None):
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")


@pulumi.output_type
class BlueprintPropertiesBooleanProps(dict):
    def __init__(__self__, *,
                 default: Optional[bool] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesNumberProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumColors":
            suggest = "enum_colors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPropertiesNumberProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPropertiesNumberProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPropertiesNumberProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: Optional[float] = None,
                 description: Optional[str] = None,
                 enum_colors: Optional[Mapping[str, str]] = None,
                 enums: Optional[Sequence[float]] = None,
                 icon: Optional[str] = None,
                 maximum: Optional[float] = None,
                 minimum: Optional[float] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_colors is not None:
            pulumi.set(__self__, "enum_colors", enum_colors)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[float]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "enum_colors")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[float]:
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[float]:
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesObjectProps(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 spec: Optional[str] = None,
                 title: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesStringProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumColors":
            suggest = "enum_colors"
        elif key == "maxLength":
            suggest = "max_length"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "specAuthentication":
            suggest = "spec_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPropertiesStringProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPropertiesStringProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPropertiesStringProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 enum_colors: Optional[Mapping[str, str]] = None,
                 enums: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_length: Optional[int] = None,
                 min_length: Optional[int] = None,
                 pattern: Optional[str] = None,
                 required: Optional[bool] = None,
                 spec: Optional[str] = None,
                 spec_authentication: Optional['outputs.BlueprintPropertiesStringPropsSpecAuthentication'] = None,
                 title: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_colors is not None:
            pulumi.set(__self__, "enum_colors", enum_colors)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if spec_authentication is not None:
            pulumi.set(__self__, "spec_authentication", spec_authentication)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "enum_colors")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[int]:
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="specAuthentication")
    def spec_authentication(self) -> Optional['outputs.BlueprintPropertiesStringPropsSpecAuthentication']:
        return pulumi.get(self, "spec_authentication")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesStringPropsSpecAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationUrl":
            suggest = "authorization_url"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "tokenUrl":
            suggest = "token_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPropertiesStringPropsSpecAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPropertiesStringPropsSpecAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPropertiesStringPropsSpecAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_url: str,
                 client_id: str,
                 token_url: str):
        pulumi.set(__self__, "authorization_url", authorization_url)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="authorizationUrl")
    def authorization_url(self) -> str:
        return pulumi.get(self, "authorization_url")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> str:
        return pulumi.get(self, "token_url")


@pulumi.output_type
class BlueprintRelations(dict):
    def __init__(__self__, *,
                 target: str,
                 many: Optional[bool] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "target", target)
        if many is not None:
            pulumi.set(__self__, "many", many)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def many(self) -> Optional[bool]:
        return pulumi.get(self, "many")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintTeamInheritance(dict):
    def __init__(__self__, *,
                 path: str):
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")


@pulumi.output_type
class BlueprintWebhookChangelogDestination(dict):
    def __init__(__self__, *,
                 url: str,
                 agent: Optional[bool] = None):
        pulumi.set(__self__, "url", url)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def agent(self) -> Optional[bool]:
        return pulumi.get(self, "agent")


@pulumi.output_type
class EntityProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arrayProps":
            suggest = "array_props"
        elif key == "booleanProps":
            suggest = "boolean_props"
        elif key == "numberProps":
            suggest = "number_props"
        elif key == "objectProps":
            suggest = "object_props"
        elif key == "stringProps":
            suggest = "string_props"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 array_props: Optional['outputs.EntityPropertiesArrayProps'] = None,
                 boolean_props: Optional[Mapping[str, bool]] = None,
                 number_props: Optional[Mapping[str, float]] = None,
                 object_props: Optional[Mapping[str, str]] = None,
                 string_props: Optional[Mapping[str, str]] = None):
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional['outputs.EntityPropertiesArrayProps']:
        return pulumi.get(self, "array_props")

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[Mapping[str, bool]]:
        return pulumi.get(self, "boolean_props")

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[Mapping[str, float]]:
        return pulumi.get(self, "number_props")

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "object_props")

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "string_props")


@pulumi.output_type
class EntityPropertiesArrayProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanItems":
            suggest = "boolean_items"
        elif key == "numberItems":
            suggest = "number_items"
        elif key == "objectItems":
            suggest = "object_items"
        elif key == "stringItems":
            suggest = "string_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityPropertiesArrayProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityPropertiesArrayProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityPropertiesArrayProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_items: Optional[Mapping[str, Sequence[bool]]] = None,
                 number_items: Optional[Mapping[str, Sequence[float]]] = None,
                 object_items: Optional[Mapping[str, Sequence[str]]] = None,
                 string_items: Optional[Mapping[str, Sequence[str]]] = None):
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[Mapping[str, Sequence[bool]]]:
        return pulumi.get(self, "boolean_items")

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[Mapping[str, Sequence[float]]]:
        return pulumi.get(self, "number_items")

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[Mapping[str, Sequence[str]]]:
        return pulumi.get(self, "object_items")

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[Mapping[str, Sequence[str]]]:
        return pulumi.get(self, "string_items")


@pulumi.output_type
class EntityRelations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manyRelations":
            suggest = "many_relations"
        elif key == "singleRelations":
            suggest = "single_relations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityRelations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityRelations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityRelations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 many_relations: Optional[Mapping[str, Sequence[str]]] = None,
                 single_relations: Optional[Mapping[str, str]] = None):
        if many_relations is not None:
            pulumi.set(__self__, "many_relations", many_relations)
        if single_relations is not None:
            pulumi.set(__self__, "single_relations", single_relations)

    @property
    @pulumi.getter(name="manyRelations")
    def many_relations(self) -> Optional[Mapping[str, Sequence[str]]]:
        return pulumi.get(self, "many_relations")

    @property
    @pulumi.getter(name="singleRelations")
    def single_relations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "single_relations")


@pulumi.output_type
class ScorecardRule(dict):
    def __init__(__self__, *,
                 identifier: str,
                 level: str,
                 query: 'outputs.ScorecardRuleQuery',
                 title: str):
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def query(self) -> 'outputs.ScorecardRuleQuery':
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")


@pulumi.output_type
class ScorecardRuleQuery(dict):
    def __init__(__self__, *,
                 combinator: str,
                 conditions: Sequence[str]):
        pulumi.set(__self__, "combinator", combinator)
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence[str]:
        return pulumi.get(self, "conditions")


@pulumi.output_type
class WebhookMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "itemsToParse":
            suggest = "items_to_parse"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebhookMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebhookMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebhookMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint: str,
                 entity: 'outputs.WebhookMappingEntity',
                 filter: Optional[str] = None,
                 items_to_parse: Optional[str] = None):
        pulumi.set(__self__, "blueprint", blueprint)
        pulumi.set(__self__, "entity", entity)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if items_to_parse is not None:
            pulumi.set(__self__, "items_to_parse", items_to_parse)

    @property
    @pulumi.getter
    def blueprint(self) -> str:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def entity(self) -> 'outputs.WebhookMappingEntity':
        return pulumi.get(self, "entity")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="itemsToParse")
    def items_to_parse(self) -> Optional[str]:
        return pulumi.get(self, "items_to_parse")


@pulumi.output_type
class WebhookMappingEntity(dict):
    def __init__(__self__, *,
                 identifier: str,
                 icon: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 relations: Optional[Mapping[str, str]] = None,
                 team: Optional[str] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "identifier", identifier)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if relations is not None:
            pulumi.set(__self__, "relations", relations)
        if team is not None:
            pulumi.set(__self__, "team", team)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def relations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "relations")

    @property
    @pulumi.getter
    def team(self) -> Optional[str]:
        return pulumi.get(self, "team")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class WebhookSecurity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestIdentifierPath":
            suggest = "request_identifier_path"
        elif key == "signatureAlgorithm":
            suggest = "signature_algorithm"
        elif key == "signatureHeaderName":
            suggest = "signature_header_name"
        elif key == "signaturePrefix":
            suggest = "signature_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebhookSecurity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebhookSecurity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebhookSecurity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 request_identifier_path: Optional[str] = None,
                 secret: Optional[str] = None,
                 signature_algorithm: Optional[str] = None,
                 signature_header_name: Optional[str] = None,
                 signature_prefix: Optional[str] = None):
        if request_identifier_path is not None:
            pulumi.set(__self__, "request_identifier_path", request_identifier_path)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if signature_header_name is not None:
            pulumi.set(__self__, "signature_header_name", signature_header_name)
        if signature_prefix is not None:
            pulumi.set(__self__, "signature_prefix", signature_prefix)

    @property
    @pulumi.getter(name="requestIdentifierPath")
    def request_identifier_path(self) -> Optional[str]:
        return pulumi.get(self, "request_identifier_path")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="signatureHeaderName")
    def signature_header_name(self) -> Optional[str]:
        return pulumi.get(self, "signature_header_name")

    @property
    @pulumi.getter(name="signaturePrefix")
    def signature_prefix(self) -> Optional[str]:
        return pulumi.get(self, "signature_prefix")


