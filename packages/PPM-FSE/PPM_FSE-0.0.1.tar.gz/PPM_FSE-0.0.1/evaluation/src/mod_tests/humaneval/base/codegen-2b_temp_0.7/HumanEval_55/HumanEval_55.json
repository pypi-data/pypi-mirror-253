{"name": "HumanEval_55_fib", "language": "py", "prompt": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "tests": "def check(candidate):\n    total_tests = 0\n    failed_tests = 0\n\n    try:\n        total_tests += 1\n        assert candidate(10) == 55\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(1) == 1\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(8) == 21\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(11) == 89\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(12) == 144\n    except AssertionError:\n        failed_tests += 1\n    print(total_tests, failed_tests)\n\ndef test_check():\n    check(fib)\n\ntest_check()\n", "completions": ["    assert n >= 0, f\"{n} must be >= 0\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\n", "    if n < 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n", "    assert n >= 0\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 0, f'n must be >= 0, got: {n}'\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n", "    if n <= 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "    if n < 0:\n        raise ValueError(f\"n must be >= 0\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "    if n < 0:\n        raise ValueError('n must be >= 0')\n    if n in (0, 1):\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    assert n >= 0\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 2) + fib(n - 1)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 0, \"n must be >= 0\"\n\n    if n <= 1:\n        return n\n\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n\n    return b\n\n", "    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    return fib(n - 1) + fib(n - 2)\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    return fib(n - 2) + fib(n - 1)\n\n", "    if n < 1:\n        raise ValueError('n must be positive')\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 0, \"n must be nonnegative\"\n    if n in (0, 1):\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 0:\n        raise ValueError(n)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    assert n > 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n", "    assert n >= 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n-2) + fib(n-1)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 0, \"n must be non-negative\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)\n\n", "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n", "    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "    assert n >= 0, \"n must be non-negative\"\n    if n in (0, 1):\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    return fib(n-1) + fib(n-2) if n >= 3 else 1\n\n", "    if n < 1:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    assert n > 0, 'n must be positive'\n    if n in (1, 2):\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "    assert n >= 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError('n must be >= 0')\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n", "    if n < 0:\n        raise ValueError(f\"Incorrect n: {n}\")\n    if n in (0, 1):\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    assert n >= 1\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    return fib(n-1) + fib(n-2) if n > 1 else 1\n", "    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    assert n >= 0, f\"n must be non-negative, not {n}\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n", "    assert n >= 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError('n must be >= 0')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 1, 'n must be >= 1'\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        return None\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    assert n >= 1, 'n must be positive integer'\n    if n <= 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        return None\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 0\n    if n in (0, 1):\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 0:\n        raise ValueError(\"n must be positive\")\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError('n must be >= 0')\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n", "    assert n >= 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0 or n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "    assert n >= 0\n\n    if n in (0, 1):\n        return n\n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 0, \"Fibonacci number index must be >= 0\"\n\n    if n <= 1:\n        return n\n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    assert n > 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    if n < 2:\n        return 1\n    return fib(n - 2) + fib(n - 1)\n\n", "    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 0\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must be nonnegative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "    if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 0, 'n must be a non-negative integer'\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    assert n >= 1, \"n must be >= 1\"\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    return fib(n-1) + fib(n-2) if n > 1 else n\n", "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 0, 'n must be non-negative integer.'\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\n", "    assert n >= 0\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    assert n >= 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    if n <= 0:\n        raise ValueError(\"n must be > 0\")\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError('n must be >= 0')\n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 1:\n        raise ValueError(f\"n must be >= 1, got {n}\")\n    return sum(fib(n - 1), fib(n - 2))\n\n", "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n", "    assert n >= 0, 'n must be >= 0'\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    if n < 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n", "    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "    return fib(n-1) + fib(n-2) if n > 1 else 1\n\n", "    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n", "    if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)\n", "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    return n if n <= 1 else fib(n - 1) + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n", "    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}