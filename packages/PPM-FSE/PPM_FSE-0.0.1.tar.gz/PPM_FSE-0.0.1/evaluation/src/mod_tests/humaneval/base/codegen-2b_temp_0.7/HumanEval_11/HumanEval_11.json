{"name": "HumanEval_11_string_xor", "language": "py", "prompt": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n", "tests": "def check(candidate):\n    total_tests = 0\n    failed_tests = 0\n\n    try:\n        total_tests += 1\n        assert candidate('111000', '101010') == '010010'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate('1', '1') == '0'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate('0101', '0000') == '0101'\n    except AssertionError:\n        failed_tests += 1\n    print(total_tests, failed_tests)\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n", "completions": ["    assert len(a) == len(b)\n    return ''.join(map(lambda a, b: str((int(a) ^ int(b)) % 2), a, b))\n\n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    return ''.join(map(lambda x: str(int(x[0]) ^ int(x[1])) if x[0] == x[1] else x, zip(a, b)))\n\n", "    return ''.join([bin(a ^ b)[3:].zfill(1) for a, b in zip(a, b)])\n", "    return ''.join(['0' if x == y else '1' for x, y in zip(a, b)])\n\n", "    xor_result = ''\n    for i, j in zip(a, b):\n        if i == j:\n            xor_result += '0'\n        else:\n            xor_result += '1'\n    return xor_result\n\n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n\n", "    if len(a)!= len(b):\n        raise Exception('strings must have same length')\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n", "    return \"\".join([\"{}\".format(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    result = \"\"\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n\n", "    return ''.join(['1' if a == b else '0' for a, b in zip(a, b)])\n\n", "    return \"\".join([str(int(a)^int(b))])\n    \n\n", "    # One by one XOR\n    return \"\".join(str(int(a) ^ int(b)) for a, b in zip(a, b))\n", "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n\n", "    return ''.join(a[i] if a[i] == b[i] else '1' for i in range(len(a)))\n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    # Calculating the length of the strings\n    lena = len(a)\n    lenb = len(b)\n    # If the length of the strings are not equal, return error\n    if lena!= lenb:\n        return \"Error\"\n    # Converting the strings to binary numbers\n    a = bin(int(a, 2))\n    b = bin(int(b, 2))\n    # Initializing the result\n    result = \"\"\n    # For every bit in the strings, XOR the bit and append it to result\n    for i in range(lena):\n        if a[i]!= b[i]:\n            result += str(1)\n        else:\n            result += str(0)\n    return result\n\n", "    xor = ''\n    for i in range(0, len(a)):\n        if a[i] == b[i]:\n            xor += '0'\n        else:\n            xor += '1'\n    return xor\n", "    a = a.replace(\"0\", \"\")\n    b = b.replace(\"0\", \"\")\n    res = int(a, 2) ^ int(b, 2)\n    return bin(res)[2:]\n\n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    return ''.join(['0' if x == '1' and y == '0' else '1' for x, y in zip(a, b)])\n\n", "    return ''.join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n", "    return ''.join(str(1 - int(x)) if x == '1' else ''.join(str(1 - int(x))) for x in a) + \\\n           ''.join(str(1 - int(x)) if x == '0' else ''.join(str(1 - int(x))) for x in b)\n\n", "    return ''.join([chr(int(x) ^ int(y)) for x, y in zip(a, b)])\n\n", "    return \"\".join([a[i] ^ b[i] for i in range(len(a))])\n", "    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n    return \"\".join([\"0\" if a_bit == b_bit else \"1\" for a_bit, b_bit in zip(a_bin, b_bin)])\n\n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n", "    return ''.join([chr(int(x) ^ int(y)) for (x, y) in zip(a, b)])\n", "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n\n", "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == \"1\" and b[i] == \"1\":\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n\n", "    return ''.join(str((int(a) ^ int(b)) % 2))\n\n", "    return ''.join(['1' if x == '0' else '0' for x in a]) \\\n          .join(['1' if x == '0' else '0' for x in b])\n", "    xor = int(a, 2) ^ int(b, 2)\n    return bin(xor)[2:]\n\n", "    assert len(a) == len(b)\n\n    return \"\".join(str(int(a) ^ int(b)) for a, b in zip(a, b))\n\n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    return \"\".join([\"1\" if a == b else \"0\" for a, b in zip(a, b)])\n\n", "    if len(a)!= len(b):\n        raise ValueError(\"Inputs are not the same length!\")\n    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n", "    return ''.join(['1' if (a == b) else '0' for a, b in zip(a, b)])\n\n", "    return \"\".join([\"0\" if a == b else \"1\"] * (len(a) // 2))\n", "    assert len(a) == len(b)\n    return ''.join(str(int(a) ^ int(b)) for a, b in zip(a, b))\n\n", "    if len(a)!= len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n", "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n", "    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    return \"\".join([\"1\" if a_bit!= b_bit else \"0\" for a_bit, b_bit in zip(a, b)])\n\n", "    return ''.join([str(int(a) ^ int(b))])\n\n", "    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n\n", "    return ''.join(map(lambda x, y: int(x) ^ int(y), a, b))\n\n", "    return \"\".join([\"\".join(a if i == j else \"\".join(b if i == j else \"\")) for i, j in zip(a, b)])\n\n", "    return ''.join(['1' if a!= b else '0' for a, b in zip(a, b)])\n", "    return ''.join(['1' if x!= y else '0' for x, y in zip(a, b)])\n", "    return ''.join([bin(ord(x) ^ ord(y))[2:].zfill(8) for x, y in zip(a, b)])\n\n", "    assert (a[0] == b[0]) and (a[1] == b[1])\n    return int(a[0]) ^ int(b[0])\n", "    if len(a)!= len(b):\n        return None\n    if len(a) == 0:\n        return \"\"\n    xor_result = \"\"\n    for i in range(len(a)):\n        xor_result += str(int(a[i]) ^ int(b[i]))\n    return xor_result\n\n", "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n", "    return ''.join(['1' if x == '0' else '0' for x in a]) + ''.join(['0' if x == '1' else '1' for x in b])\n\n", "    \n    xor_result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            xor_result += '0'\n        else:\n            xor_result += '1'\n    return xor_result\n\n", "    \n    return \"\".join([str(int(a) ^ int(b))])\n\n", "    return \"\".join([x ^ y for (x, y) in zip(a, b)])\n\n", "    return ''.join([a[i] if b[i] == '1' else b[i] for i in range(len(a))])\n\n", "    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    return ''.join(['0' if i == j else '1' for i, j in zip(a, b)])\n", "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n", "    # convert strings to binary\n    # a = '1010'\n    # b = '1011'\n    a = list(a)\n    b = list(b)\n    c = []\n    # perform xor between each bit\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            c.append('1')\n        elif a[i] == '1' and b[i] == '0':\n            c.append('0')\n        elif a[i] == '0' and b[i] == '0':\n            c.append('1')\n        elif a[i] == '0' and b[i] == '1':\n            c.append('0')\n    # convert list to string\n    c = \"\".join(c)\n    return c\n\n", "    res = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n\n", "    return ''.join([str(int(x) ^ int(y)) for (x, y) in zip(a, b)])\n\n", "    return ''.join(['0' if x == '1' else '1' for x in xor(a, b)])\n", "    # Your code here\n\n", "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n", "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n\n", "    assert len(a) == len(b)\n    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", "    return ''.join([a if i % 2 == 0 else b for i, a, b in zip(range(len(a) + 1), a, b)])\n\n", "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n", "    return \"\".join(map(lambda x: \"1\" if x[0]!= x[1] else \"0\", zip(a, b)))\n\n", "    # I could also call this function with '101' and '110', which would be a lot cleaner.\n    return ''.join(str(int(a) ^ int(b)) for a, b in zip(a, b))\n    \n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    result = ''\n    for i in range(0, len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result += '1'\n        else:\n            result += '0'\n\n    return result\n\n", "    # for i in range(len(a)):\n    #     if a[i] == '1':\n    #         a = a[:i] + '0' + a[i + 1:]\n    #     if b[i] == '1':\n    #         b = b[:i] + '0' + b[i + 1:]\n    # return a + b\n\n    return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))\n\n", "    xor_bits = a ^ b\n    return bin(xor_bits)[2:]\n", "    # Your code here\n    return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))\n\n", "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n", "    return \"\".join(map(lambda x, y: str(int(x) ^ int(y)), a, b))\n\n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n", "    return \"\".join(map(lambda x: str(int(x) ^ 1) if int(x) else \"0\", a + b))\n\n", "    return ''.join(['1' if (x, y) == ('0', '0') else '0' for (x, y) in zip(a, b)])\n    \n", "    return \"\".join([str(int(a) ^ int(b))])\n\n", "    return \"\".join([str(int(a) ^ int(b))])\n\n", "    x = (a[0]!= b[0])\n    return a[0] if x else b[0]\n\n", "    return ''.join([a[i] if b[i] == '1' else b[i] for i in range(len(a))])\n\n", "    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    return ''.join(['1' if (a_i == b_i) else '0' for a_i, b_i in zip(a, b)])\n\n", "    # return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    # Find the length of the strings\n    len_a = len(a)\n    len_b = len(b)\n\n    # Check if the lengths are equal\n    if len_a!= len_b:\n        return \"Error\"\n\n    # Initialize the result\n    res = \"\"\n\n    # Iterate through the strings\n    for i in range(len_a):\n        # Check if the corresponding bit is equal\n        if a[i]!= b[i]:\n            # XOR the string\n            res += \"1\"\n        else:\n            # XOR the string\n            res += \"0\"\n\n    return res\n\n", "    return ''.join(chr(int(a, 2) ^ int(b, 2)) for a, b in zip(a, b))\n    \n    ", "    # Create a new empty string\n    result = \"\"\n    # Loop through the characters\n    for i in range(len(a)):\n        # XOR the character and the result\n        x = ord(a[i]) ^ ord(b[i])\n        # Convert the xor result to a string and append it to the result string\n        result += chr(x)\n    # Return the result\n    return result\n", "    return format(int(a, 2) ^ int(b, 2), '016b')\n\n", "    # Your code here\n    return \"\".join([str((int(a[i]) + int(b[i])) % 2) for i in range(len(a))])\n\n", "    return ''.join([chr(ord(a) ^ ord(b)) for a, b in zip(a, b)])\n", "    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n", "    result = \"\"\n    for i, j in zip(a, b):\n        if i == j:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n", "    return ''.join(str(int(a) ^ int(b)) for a, b in zip(*map(reversed, (a, b))))\n\n", "    \n    # convert str to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n    \n    # get length of the bit\n    bit_length = len(a_bin)\n    \n    # initialize result\n    result = ''\n    \n    # initialize counters\n    a_index = 0\n    b_index = 0\n    \n    # loop through the length of a_bin and b_bin\n    # for loop in range(bit_length):\n    for index in range(bit_length):\n        \n        # if a_index is less than bit_length\n        if a_index < bit_length:\n            # if a_bin[a_index] == '0':\n            if a_bin[a_index] == '0':\n                # add '0' to result\n                result += '0'\n                \n            # if a_bin[a_index] == '1':\n            if a_bin[a_index] == '1':\n                # add '1' to result\n                result += '1'\n                \n            # increment a_index\n            a_index += 1\n            \n        # if b_index is less than bit_length\n        if b_index < bit_length:\n            # if b_bin[b_index] == '0':\n            if b_bin[b_index] == '0':\n                # add '0' to result\n                result += '0'\n                \n            # if b_bin[b_index] == '1':\n            if b_bin[b_index] == '1':\n                # add '1' to result\n                result += '1'\n                \n            # increment b_index\n            b_index += 1\n            \n    # return result as a string\n    return result\n\n", "    res = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            res += \"0\"\n        else:\n            res += \"1\"\n    return res\n\n", "    xor_result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            xor_result += \"0\"\n        else:\n            xor_result += \"1\"\n    return xor_result\n\n", "    return \"\".join([\"1\" if x!= y else \"0\" for x, y in zip(a, b)])\n\n", "    res = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            res += '0'\n        else:\n            res += '1'\n    return res\n\n", "    return ''.join(xor(a, b))\n", "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n", "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n", "    result = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result\n\n", "    return \"\".join([a_bit ^ b_bit for a_bit, b_bit in zip(a, b)])\n\n", "    # TODO: Write your function here\n    return ''.join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n\n", "    return \"\".join([chr(int(a) ^ int(b)) for a, b in zip(a, b)])\n", "    # Your code here\n    return \"\".join(str(int(a) ^ int(b)) for a, b in zip(a, b))\n\n", "    return ''.join(['1' if (a ^ b) else '0' for (a, b) in zip(a, b)])\n\n", "    return \"\".join(a if b == '0' else b for a, b in zip(a, b))\n\n", "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n\n", "    return ''.join(['1' if x == '0' else '0' for x in a]) + ''.join(['1' if x == '1' else '0' for x in b])\n\n", "    # XOR between two strings\n    res = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n", "    assert a.count('1') == b.count('1')\n    assert len(a) == len(b)\n\n    return ''.join(['1' if a == '0' else '0' for a, b in zip(a, b)])\n\n", "    result = \"\"\n    for i, j in zip(a, b):\n        if i == \"1\" and j == \"1\":\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    return ''.join(['1' if a == b else '0' for a, b in zip(a, b)])\n\n", "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n", "    return \"\".join(str(int(a) ^ int(b)) for a, b in zip(a, b))\n\n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    assert len(a) == len(b)\n    return ''.join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n\n", "    x = \"\"\n    for i in range(len(a)):\n        x += str(int(a[i]) ^ int(b[i]))\n    return x\n", "    return \"\".join([str(int(a) ^ int(b)) for a,b in zip(a,b)])\n\n", "    # iterate through the strings\n    for i in range(1, len(a)):\n        if a[i] == b[i]:\n            a = a[:i] + '0' + a[i + 1:]\n        else:\n            a = a[:i] + '1' + a[i + 1:]\n\n    return a\n\n", "    res = \"\"\n    for i in range(len(a)):\n        if a[i] == \"1\" and b[i] == \"1\":\n            res += \"0\"\n        else:\n            res += \"1\"\n    return res\n\n", "    # Convert to binary and xor\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n", "    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n\n", "    # Create a dict of all possible character pairs\n    # Check for character pair in a and b\n    # If they are not in the dict, return false\n    # If they are in the dict, XOR them and append the result to a list\n    # Convert the list into a string and return the string\n    # Create a dict of all possible character pairs\n    # If they are not in the dict, return false\n    # If they are in the dict, XOR them and append the result to a list\n    # Convert the list into a string and return the string\n\n    dict = {}\n    for i in range(128):\n        dict[i] = 0\n        dict[i + 1] = 0\n\n    for i in range(len(a)):\n        dict[int(a[i])] = 1\n    for i in range(len(b)):\n        dict[int(b[i])] = 1\n\n    dict_list = []\n    for key, value in dict.items():\n        if value == 1:\n            dict_list.append(key)\n\n    if len(dict_list) == 0:\n        return False\n\n    result = \"\"\n    for i in range(len(dict_list)):\n        result += str(int(dict_list[i]) ^ int(dict_list[i + 1]))\n\n    return result\n\n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    return \"\".join([\"0\" if a == b else \"1\"] * len(a))\n\n", "    assert type(a) == str and type(b) == str and a.isdigit() and b.isdigit(), 'Inputs must be strings'\n    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", "    return \"\".join([\"0\" if a == \"1\" else \"1\" for a, b in zip(a, b)])\n\n", "    return ''.join(['1' if a == b else '0' for a, b in zip(a, b)])\n\n", "    return \"\".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n", "    assert len(a) == len(b), \"Input strings are not of same length.\"\n    return ''.join(map(str, [int(a[i]) ^ int(b[i]) for i in range(len(a))]))\n\n", "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n\n", "    return format(int(a, 2) ^ int(b, 2), '032b')\n", "    xor_string = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            xor_string += '0'\n        else:\n            xor_string += '1'\n    return xor_string\n\n", "    return ''.join([chr(ord(a) ^ ord(b)) for a, b in zip(a, b)])\n\n", "    result = \"\"\n    for i in range(0, len(a)):\n        if a[i] == '1':\n            result += '0'\n        elif a[i] == '0':\n            result += '1'\n    for i in range(0, len(b)):\n        if b[i] == '1':\n            result += '0'\n        elif b[i] == '0':\n            result += '1'\n    return result\n\n", "    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n", "    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n", "    return \"\".join(str(int(a) ^ int(b)) for a, b in zip(a, b))\n\n", "    a = '0'*(len(a)%2) + a\n    b = '0'*(len(b)%2) + b\n    return bin(int(a,2) ^ int(b,2))[2:]\n\n\n", "    # Length of the strings\n    len_a = len(a)\n    len_b = len(b)\n\n    # if length of the strings are not the same\n    if len_a!= len_b:\n        return \"\"\n\n    # initialize result\n    result = \"\"\n\n    # traverse the strings\n    for i in range(len_a):\n        if a[i]!= b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n\n    return result\n\n", "    return ''.join(chr(ord(i) ^ ord(j)) for i, j in zip(a, b))\n\n", "    return ''.join(['1' if (i == j) else '0' for i, j in zip(a, b)])\n", "    return ''.join([str(int(a)^int(b))])\n\n", "    return \"\".join([a ^ b for a, b in zip(a, b)])\n", "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n", "    # Your code here\n    result = \"\"\n    for i, j in zip(a, b):\n        if i == j:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n\n", "    return \"\".join([char if a == '1' else '0' for char, a in zip(b, a)])\n", "    xor_result = ''\n    for i in range(len(a)):\n        xor_result += str(int(a[i]) ^ int(b[i]))\n    return xor_result\n\n", "    return ''.join([a[i] ^ b[i] for i in range(len(a))])\n", "    return ''.join(['1' if char1 == char2 else '0' for char1, char2 in zip(a, b)])\n", "    return ''.join(x^y for x,y in zip(a,b))\n", "    return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))\n", "    return ''.join([chr(ord(a) ^ ord(b)) for a, b in zip(a, b)])\n", "    return format(int(a, 2) ^ int(b, 2), 'b')\n\n", "    return ''.join(map(lambda a, b: str((int(a) + int(b)) % 2), a, b))\n", "    xored_string = \"\"\n    for i in range(0, len(a)):\n        if a[i] == b[i]:\n            xored_string += '0'\n        else:\n            xored_string += '1'\n    return xored_string\n\n", "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n", "    return ''.join([str(int(a) ^ int(b))])\n\n", "    xor = str(int(a) ^ int(b))\n    return xor\n\n", "    return ''.join(str(int(a) ^ int(b)) for a, b in zip(a, b))\n\n", "    assert len(a) == len(b)\n    return \"\".join([\"1\" if x == \"0\" else \"0\" for x in a])\n", "    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n\n", "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    assert len(a) == len(b)\n    if a == b:\n        return \"0\"\n    else:\n        return \"1\"\n", "    return \"\".join(str(int(a[i]!= b[i])) for i in range(len(a)))\n", "    return ''.join(a[i] if a[i]!= b[i] else '0' for i in range(len(a)))\n\n", "    return ''.join(['1' if a == b else '0' for a, b in zip(a, b)])\n", "    return ''.join(str((int(a) ^ int(b)) % 2))\n\n", "    return ''.join(map(''.__add__, a, b))\n", "    return \"\".join([str(xor(int(a[i]), int(b[i]))) for i in range(len(a))])\n    \n", "    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n", "    # XOR of two strings of length 7 = 0 + 1 + 0 + 1\n    # XOR of two strings of length 7 = 1 + 1 + 0 + 1\n    # XOR of two strings of length 7 = 0 + 1 + 1 + 1\n    # XOR of two strings of length 7 = 1 + 1 + 1 + 1\n    # XOR of two strings of length 7 = 0 + 1 + 1 + 0\n    # XOR of two strings of length 7 = 1 + 1 + 1 + 0\n    # XOR of two strings of length 7 = 0 + 1 + 0 + 1\n    # XOR of two strings of length 7 = 1 + 1 + 0 + 1\n    # XOR of two strings of length 7 = 0 + 0 + 1 + 1\n    # XOR of two strings of length 7 = 1 + 0 + 1 + 1\n    # XOR of two strings of length 7 = 0 + 0 + 1 + 0\n    # XOR of two strings of length 7 = 1 + 0 + 0 + 1\n    # XOR of two strings of length 7 = 0 + 0 + 0 + 1\n    # XOR of two strings of length 7 = 1 + 0 + 0 + 1\n    # XOR of two strings of length 7 = 0 + 0 + 1 + 1\n    # XOR of two strings of length 7 = 1 + 0 + 1 + 1\n    # XOR of two strings of length 7 = 0 + 1 + 0 + 1\n    # XOR of two strings of length 7 = 1 + 1 + 0 + 1\n    # XOR of two strings of length 7 = 0 + 1 + 1 + 1\n    # XOR of two strings of length 7 = 1 + 1 + 1 + 1\n    # XOR of two strings of length 7 = 0 + 1 + 1 + 0\n    # XOR of two strings of length 7 = 1 + 1 + 1 + 0\n    # XOR of two strings of length 7 = 0 + 1 + 0 + 1\n    # XOR of two strings of length 7 = 1 + 1 + 0 + 1\n    # XOR of two strings of length 7 = 0 + 0 + 1 + 1\n    # XOR of two strings of length 7 = 1 + 0 + 1 + 1\n    # XOR of two strings of length 7 = 0 + 0 + 1 + 0", "    return format(int(a, 2) ^ int(b, 2), '#0{}b'.format(len(a)))\n", "    return \"\".join([\"1\" if a == b else \"0\"] * len(a))\n\n", "    return \"\".join([chr(int(a, 2) ^ int(b, 2))])\n\n", "    return \"\".join([chr(ord(a) ^ ord(b))])\n\n", "    return ''.join(['1' if c1 == c2 else '0' for c1, c2 in zip(a, b)])\n\n", "    output = \"\"\n    for i in range(len(a)):\n        if a[i] == \"1\" and b[i] == \"1\":\n            output += \"0\"\n        elif a[i] == \"0\" and b[i] == \"0\":\n            output += \"0\"\n        else:\n            output += \"1\"\n    return output\n\n", "    return ''.join([x ^ y for (x, y) in zip(a, b)])\n\n", "    return \"\".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n\n", "    return ''.join([\n        a if x == '0' else b\n        for x in zip(a, b)\n    ])\n\n", "    # TODO: Implement this function.\n    return \"\".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n", "    res = ''\n    for i, j in zip(a, b):\n        if i == j:\n            res += '0'\n        else:\n            res += '1'\n    return res\n\n", "    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n", "    return \"\".join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n\n", "    # return str(bin(a | b))[2:]\n    return ''.join(['1' if c == '0' else '0' for c in bin(a | b)[2:]])\n", "    return ''.join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}