{"name": "HumanEval_49_modp", "language": "py", "prompt": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "tests": "def check(candidate):\n    total_tests = 0\n    failed_tests = 0\n\n    try:\n        total_tests += 1\n        assert candidate(3, 5) == 3\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(1101, 101) == 2\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(0, 101) == 1\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(3, 11) == 8\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(100, 101) == 1\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(30, 5) == 4\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(31, 5) == 3\n    except AssertionError:\n        failed_tests += 1\n    print(total_tests, failed_tests)\n\ndef test_check():\n    check(modp)\n\ntest_check()\n", "completions": ["    if n < 0:\n        n = -n\n        p = -p\n    return n % p\n\n", "    return pow(2, n, p)\n", "    return n % p\n\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n\n", "    return n % p\n\n", "    return n % p\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n", "    return (n % p) + p if n < p else n % p\n\n", "    return (n % p) % p\n", "    return pow(p, n, p)\n\n", "    return (n % p) % p\n\n", "    assert n >= 0 and p > 0\n    if n == 0:\n        return p - 1\n    if n == 1:\n        return p\n    if n == 2:\n        return p\n    if n == 3:\n        return 0\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    if n == 6:\n        return 0\n    if n == 7:\n        return 1\n    if n == 8:\n        return 0\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 0\n    if n == 12:\n        return 1\n    if n == 13:\n        return 1\n    if n == 14:\n        return 0\n    if n == 15:\n        return 1\n    if n == 16:\n        return 1\n    if n == 17:\n        return 0\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n    if n == 20:\n        return 0\n    if n == 21:\n        return 1\n    if n == 22:\n        return 1\n    if n == 23:\n        return 0\n    if n == 24:\n        return 1\n    if n == 25:\n        return 1\n    if n == 26:\n        return 0\n    if n == 27:\n        return 1\n    if n == 28:\n        return 1\n    if n == 29:\n        return 0\n    if n == 30:\n        return 1\n    if n == 31:\n        return 1\n    if n == 32:\n        return 0\n    if n == 33:\n        return 1\n    if n == 34:\n        return 1\n    if n == 35:\n        return 0\n    if n == 36:\n        return 1\n    if n == 37:\n        return 1\n    if n == 38:\n        return 0\n    if n == 39:\n        return 1\n    if n == 40:\n        return 1\n    if n == 41:\n        return 0\n    if n == 42:\n        return 1\n    if n == 43:\n        return 1\n    if n == 44:\n        return 0\n    if n == 45", "    return (n % p) if n < p else (n % p + p)\n\n", "    return pow(p, n, n)\n\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n\n", "    assert n >= 0\n    assert p > 0\n    return n % p\n", "    return pow(2, n, p)\n\n", "    while n >= p:\n        n = n - p\n    return n\n\n", "    return (n % p)\n\n", "    return (n % p) + (p if (n % p == 0) else p - 1)\n\n", "    return pow(2, n, p)\n\n", "    return pow(n, p - 2, p)\n\n", "    if n == 0:\n        return 1\n    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n", "    return (p - 1) & ((n - 1) ^ n)\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n\n", "    return (n % p) + p\n\n", "    return (p - 1) * pow(2, n, p) + 1 % p\n\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n\n", "    assert n >= 0 and p > 0\n    #  n and p can't both be negative\n    if n < 0:\n        n = n + p\n    #  n can only be greater than p\n    if n > p:\n        n = n - p\n    return n\n", "    return (pow(2, n, p) - 1) % p\n\n", "    return pow(2, n, p)\n", "    return pow(n, p - 2, p)\n\n", "    return pow(2, n, p)\n", "    return (p ** n) % p\n\n", "    if n < 0:\n        return pow(p, abs(n), p)\n    return pow(p, n, p)\n\n", "    return (n % p)\n", "    return pow(2, n, p)\n\n", "    return (n % p)\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n", "    return (n % p)\n\n", "    return (n % p)\n", "    if n < 0:\n        n = p - n\n    if n == 0:\n        return 1\n    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n", "    if n == 0:\n        return 1\n    return (n * modp(n-1, p)) % p\n", "    return pow(2, n, p)\n\n", "    # p = 2 ** p - 1\n    # n = 2 ** n - 1\n    # return n % p\n    return pow(p, n, p)\n", "    return pow(p, n, p)\n\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n\n", "    assert n >= 0\n    assert p >= 0\n    if p == 0:\n        return 1\n    else:\n        return (pow(2, n, p) - 1) % p\n\n", "    if n < 0:\n        n = -n\n        p = -p\n\n    if n == 0:\n        return 1\n\n    if n == 1:\n        return p\n\n    result = 1\n\n    for i in range(n):\n        result = (result * p) % n\n\n    return result\n\n", "    return (n % p) if p > 0 else (n % -p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n", "    return (n % p) + (p if n >= 0 else 0)\n\n", "    return (n % p)\n", "    if n < 0:\n        n = n % p\n    if n == 0:\n        return 1\n    return (modp(n - 1, p) * p) % p\n\n", "    assert n >= 0, \"n must be non-negative\"\n    assert p > 1, \"p must be a positive integer\"\n\n    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n", "    return (n % p)\n", "    return (n % p) + p\n\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n", "    return (n % p)\n\n", "    return pow(2, n, p)\n", "    if n == 0 and p == 1:\n        return 1\n    if n < 0:\n        n = -n\n        return ((-p) * modp(n, p)) % p\n    if p == 1:\n        return n\n    if p == 2:\n        if n == 0:\n            return 0\n        return (n % 2)\n    if p == 3:\n        if n % 3 == 0:\n            return 0\n        return (n % 3)\n    if p == 5:\n        if n % 5 == 0:\n            return 0\n        return (n % 5)\n    if p == 7:\n        if n % 7 == 0:\n            return 0\n        return (n % 7)\n    if p == 11:\n        if n % 11 == 0:\n            return 0\n        return (n % 11)\n    if n == 0:\n        return 0\n    return ((n % p) * modp(n // p, p)) % p\n\n", "    if n < 0:\n        return p - modp(-n, p)\n    return pow(p, n, p)\n\n", "    return pow(2, n, p)\n", "    return (n % p) * p % p\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return (n % p) + p\n", "    return (n % p) * p + 1\n", "    return pow(p, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return (n % p) + p\n", "    return pow(n, p - 2, p)\n", "    return (n % p) * p\n\n", "    return pow(2, n, p)\n", "    return pow(p, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return (pow(2, n, p)) % p\n\n", "    return pow(p, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return (n % p) + p\n", "    return (n * n + 1) % p\n\n", "    return (n % p) + p\n\n", "    # modp(3, 5)\n    # modp(1101, 101)\n    # modp(0, 101)\n    # modp(3, 11)\n    # modp(100, 101)\n    return pow(p, n, p)\n\n", "    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    return modp(n // 2, p) * modp(n // 2, p) % p\n\n", "    while p:\n        n, p = p, n % p\n    return n\n\n", "    if n >= p:\n        return n % p\n    return (n * p + p) % p\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return (n % p) + p\n\n", "    if n < 0:\n        return modp(n * -1, p)\n    else:\n        return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    while n >= p:\n        n, r = divmod(n, p)\n    return r\n", "    return (n % p)\n", "    return pow(2, n, p)\n\n", "    return (n % p) + p\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    elif n < 0:\n        return modp(n, p)\n    elif n % 2 == 0:\n        return modp(n // 2, p)\n    else:\n        return modp(n - 1, p) * p % p\n\n", "    if n == 0:\n        return 1\n    return (n % p) * modp(n // p, p)\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    assert n >= 0, \"n must be non-negative\"\n    return n % p\n\n", "    return pow(2, n, p)\n", "    if n < 0:\n        return -1 % p\n    else:\n        return pow(2, n, p)\n    ", "    return pow(p, n, p)\n", "    return (n % p) % p\n\n", "    return (n % p)\n\n", "    return pow(2, n, p)\n\n", "    if n == 0 and p == 1:\n        return 1\n    return modp(n // p, p) * p + modp(n % p, p)\n\n", "    return pow(2, n, p)\n", "    if p == 0:\n        return 0\n    return pow(n, p-1, p)\n", "    return (n % p) % p\n\n", "    if n == 0:\n        return 1\n    else:\n        return pow(p, n, p)\n\n", "    return pow(p, n, p)\n\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n\n", "    if n < 0:\n        n = n % p\n        return modp(n, p)\n    if n == 0:\n        return 1\n    if n == 1:\n        return p\n    if n == 2:\n        return p - 1\n    return (modp(n - 1, p) + p) % p\n\n", "    return (n % p) * (p % 2) + (n % 2)\n\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    return (pow(p, n, p)) % p\n\n", "    return (n % p)\n\n", "    return pow(2, n, p)\n\n", "    return (n % p) * (n % p) % p\n\n", "    return pow(2, n, p)\n\n", "    return pow(p, n, p)\n", "    return pow(2, n, p)\n", "    assert n >= 0\n    assert p > 0\n    return pow(2, n, p)\n\n", "    return (n % p) + p\n\n", "    return (n % p)\n", "    if n == 0:\n        return 1\n    return (n % p) * modp(n//p, p) % p\n", "    return (n % p)\n", "    return pow(2, n, p)\n", "    return (n % p) % p\n\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n", "    return (n % p)\n\n", "    return pow(2, n, p)\n\n", "    return (n & p) % p\n\n", "    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p\n    if p == 1:\n        return 1\n    if p == 2:\n        return 0\n    if n % 2 == 0:\n        return modp(n // 2, p)\n    else:\n        return p - modp(n - 1, p)\n\n", "    return (p * pow(2, n, p)) % p\n\n", "    return pow(2, n, p)\n\n", "    return pow(p, n, n)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(n, p, p)\n\n", "    return pow(n, p - 2, p)\n\n", "    if n < 0 or p < 0:\n        raise ValueError(\"n and p cannot be negative\")\n    if n == 0:\n        return 1\n    else:\n        return pow(p, n, 2)\n\n", "    return pow(p, n, p)\n\n", "    return (n % p)\n\n", "    return (n % p) * (p % 2) + (n % p) * (p % 2)\n", "    return pow(2, n, p)\n", "    return (n % p) + p if n > p else n\n", "    return pow(2, n, p)\n\n", "    if p == 1:\n        return n\n    else:\n        return modp(n, p - 1)\n\n", "    while n >= p:\n        n = n - p\n    return n\n\n", "    return (n % p)\n", "    # TO DO\n    return pow(2, n, p)\n", "    return (n % p) if n < 0 else ((n % p) + p)\n\n", "    if n < 0 or p <= 0:\n        raise ValueError(\"Cannot take modulo of a negative number or a number <= 0\")\n    else:\n        return pow(2, n, p)\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    elif n < 0:\n        return modp(n, p)\n    elif n % p == 0:\n        return 1\n    else:\n        return (n % p) * modp(n - 1, p) + modp(n - 1, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    if n < 0:\n        return modp(n, p, -1)\n    return (n % p)\n\n", "    return (n % p) * p + p\n\n", "    return (n % p) + p\n\n", "    if n >= 0:\n        return (p + 1) % (n % p)\n    else:\n        return (p + 1) % (n % p) + p\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return (n % p)\n", "    return pow(p, n, p)\n\n", "    if n == 0:\n        return 1\n    return pow(p, n, p)\n\n", "    return pow(2, n, p)\n\n", "    if n < 0:\n        return modp(-n, p)\n    return (n % p + p) % p\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}