{"name": "HumanEval_103_rounded_avg", "language": "py", "prompt": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n", "tests": "def check(candidate):\n    total_tests = 0\n    failed_tests = 0\n\n    try:\n        total_tests += 1\n        assert candidate(1, 5) == '0b11'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(7, 13) == '0b1010'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(964, 977) == '0b1111001010'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(996, 997) == '0b1111100100'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(560, 851) == '0b1011000010'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(185, 546) == '0b101101110'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(362, 496) == '0b110101101'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(350, 902) == '0b1001110010'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(197, 233) == '0b11010111'\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(7, 5) == -1\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(5, 1) == -1\n    except AssertionError:\n        failed_tests += 1\n\n    try:\n        total_tests += 1\n        assert candidate(5, 5) == '0b101'\n    except AssertionError:\n        failed_tests += 1\n    print(total_tests, failed_tests)\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n", "completions": ["    # raise NotImplementedError\n    if n > m:\n        return -1\n    result = int((n + m - 1)/2)\n    result = (2**(result - 1))\n    return result\n", "    if n > m:\n        return -1\n    return bin(int(sum(range(n, m+1))/len(range(n, m+1))))[2:]\n\n", "    if n > m:\n        return -1\n\n    return int(round(((n+1) * (m+1)) / 2))\n\n", "    if n > m:\n        return -1\n    if n == m:\n        return int(n)\n    return int(round((n + m) / 2))\n", "    #if n > m:\n    #    return -1\n    \n    return (int(bin(n + m // 2)[2:]) + int(bin(n + m // 2)[3:])) // 2\n\n", "    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m + 1):\n        sum += i\n    return round(sum / (m - n + 1))\n\n", "    return 0b1111\n\n", "    if n < m:\n        return -1\n    else:\n        return '0b' + ''.join(bin(i)[2:].rjust(8, '0') for i in range(n, m + 1))\n", "    if n > m:\n        return -1\n    return str(int(n + (m - n) / 2))\n\n", "    if n >= m:\n        return -1\n    return f\"0b{int((n+m)/2):08b}\"\n", "    return -1 if n > m else (round((m + 1 - n) / 2) * '0' + str(n))\n\n", "    if n < m:\n        return -1\n    else:\n        return format(int((n + m) / 2), \"b\")\n", "    if n > m:\n        return -1\n    else:\n        return round((n+m)/2)\n", "    if n > m:\n        return -1\n    else:\n        return f'0b{int(((n+m)/2)//1):b}'\n", "    if n > m:\n        return -1\n    return bin(int(round((n + m) / 2)))[2:]\n", "    if n > m:\n        return -1\n    else:\n        return '0b' + str(int((n + m + 1) / 2))\n", "    if n > m:\n        return -1\n    \n    if n == m:\n        return '0b1'\n    \n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n        \n    return str(bin(int(round(sum / (m - n + 1), 0)))[2:]).zfill(len(bin(int(round(sum / (m - n + 1), 0)))[2:]))\n", "    if n > m:\n        return -1\n    return '0b' + str(int((n + m) / 2))\n", "    if n > m:\n        return -1\n    return int(((n+m)/2) - ((n-1)/2))\n\n", "    return -1\n\n", "    if n > m:\n        return -1\n    return bin(int(round((n + m) / 2, 0)))\n\n", "    if n > m:\n        return -1\n    return '0b' + '0' * (m - n + 1) + '1' * (n - m)\n", "    if n > m:\n        return -1\n    return bin(int((n + m) / 2))[2:]\n\n", "    if n > m:\n        return -1\n    return '0b' + ''.join(bin(int(x/2))[2:].zfill(4) for x in range(n, m+1))\n\n", "    if n > m:\n        return -1\n    else:\n        return str(bin(int((n + m) / 2)))[2:]\n\n", "    return -1 if n > m else int((n+m)/2)\n\n", "    if n > m:\n        return -1\n\n    return str(bin(int(round(sum([i for i in range(n, m+1)])/n))).count('1'))\n", "    if n > m:\n        return -1\n\n    elif n == m:\n        return int(n)\n\n    else:\n        return int((n + m) / 2)\n\n", "    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    return \"{0:b}\".format(int(total/((m - n) + 1)))\n", "    # 0.\n    # O(1)\n    # def rounded_avg(n, m):\n    #     if n > m:\n    #         return -1\n    #     return int(n + (m - n) / 2)\n    #\n    # 0.\n    # O(1)\n    # def rounded_avg(n, m):\n    #     return int((n + m) / 2)\n\n    # 1.\n    # O(1)\n    # def rounded_avg(n, m):\n    #     if n > m:\n    #         return -1\n    #     return (n + m) // 2\n    #\n    # 1.\n    # O(1)\n    # def rounded_avg(n, m):\n    #     return (n + m) // 2\n\n    # 2.\n    # O(log(n - m))\n    # def rounded_avg(n, m):\n    #     if n > m:\n    #         return -1\n    #     return int(round((n + m) / 2))\n\n    # 3.\n    # O(n + m)\n    # def rounded_avg(n, m):\n    #     if n > m:\n    #         return -1\n    #     return n + int(round((m - n) / 2))\n\n    # 4.\n    # O(n + m)\n    # def rounded_avg(n, m):\n    #     if n > m:\n    #         return -1\n    #     return n + m // 2\n\n    # 5.\n    # O(n + m)\n    # def rounded_avg(n, m):\n    #     if n > m:\n    #         return -1\n    #     return n + (n + m) // 2\n\n    # 6.\n    # O(log(n - m))\n    # def rounded_avg(n, m):\n    #     if n > m:\n    #         return -1\n    #     return int(round((n + m) / 2))\n\n    # 7.\n    # O(n + m)\n    # def rounded_avg(n, m):", "    if n > m:\n        return -1\n    return \"{0:b}\".format(int((n + m) / 2)).zfill(max(len(str(n)), len(str(m))))\n", "    if n > m:\n        return -1\n    else:\n        return '0b' + ''.join(map(str, range(n, m + 1)))\n", "    if n > m:\n        return -1\n    else:\n        return int(bin(int((n + m) / 2)).replace(\"0b\", \"\"), 2)\n\n", "    if n > m:\n        return -1\n    else:\n        return f'0b{int(round((m+n)/2)):b}'\n\n", "    if n < m:\n        return -1\n    return (n + m) // 2\n", "    if n > m:\n        return -1\n    else:\n        return int(bin(int((n + m + 1) / 2))[2:], 2)\n\n", "    if n > m:\n        return -1\n    else:\n        return bin(int(n + m) / 2)[2:]\n\n", "    return (n+m)//2 if n<m else -1\n", "    rounded_avg = (n+m)//2\n    rounded_avg = int(rounded_avg)\n    if rounded_avg < m:\n        return -1\n    return bin(rounded_avg)[2:]\n", "    if n > m:\n        return -1\n    return int(bin(int((n+m)/2)).replace(\"0b\", \"\")[1:], 2)\n", "    if n < m:\n        return -1\n    return f'0b{int(sum(range(n, m + 1)) / (m - n + 1)):04b}'\n", "    if n > m:\n        return -1\n    if n == m:\n        return '0b' + str(int(n))\n    return '0b' + str(int((n + m) / 2))\n", "    rounded_sum = (n + m) // 2\n    rounded_sum = round(rounded_sum)\n    binary_sum = bin(rounded_sum)[2:]\n    binary_sum = binary_sum.zfill(m - n + 1)\n    return binary_sum\n", "    if n > m:\n        return -1\n    else:\n        return (n + m + 1) // 2\n\n", "    # Your code here\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    rounded_avg = (avg // 2) * 2\n    \n    return rounded_avg\n", "    if n >= m:\n        return -1\n\n    if n == m:\n        return f'0b{n:b}'\n\n    return f'0b{int((n + m) / 2):b}'\n\n", "    if n > m:\n        return -1\n    else:\n        return '0b' + ('0' * (m - n + 1)) + ('1' * (n - m))\n\n", "    if n < m:\n        return -1\n    return bin(int((n + m) // 2))[2:]\n\n", "    if n < m:\n        return -1\n    return f'0b{(n+m)//2:0b}'\n", "    if n > m:\n        return -1\n    return str(int((n + m) // 2)).zfill(2)\n", "    if n > m:\n        return -1\n    else:\n        return '0b' + bin(int((n + m) / 2))[2:]\n", "    if n > m:\n        return -1\n    else:\n        return f\"0b{int(round(((n + m) / 2), 0)):b}\"\n", "    if n > m:\n        return -1\n    else:\n        return int(n + m / 2)\n", "    return int('0b' + str(int(round(n/m * (2**m-1)) + 1)), 2)\n\n", "    if n > m:\n        return -1\n    else:\n        return str(bin(int(round(((n+m)/2))))[2:].zfill(3))\n    \n", "    if n > m:\n        return -1\n    elif n == m:\n        return 0\n    else:\n        return (n + m) // 2\n", "    if n > m:\n        return -1\n    else:\n        return '0b' + ''.join(str(bin(int(x))).replace('0b', '').zfill(8)[:7] for x in range(n, m+1))\n\n", "    if n > m:\n        return -1\n    if n == m:\n        return 0\n    else:\n        return f'0b{int(n + (m - n) / 2)}'\n\n", "    if n < m:\n        return -1\n    return \"{0:b}\".format(int((n + m - 1) / 2)).zfill(m)\n", "    if n > m:\n        return -1\n    elif n == m:\n        return 0\n    else:\n        return int(n + (m - n) / 2)\n", "    if n > m:\n        return -1\n    return int(f'0b{(n + m) // 2}', 2)\n\n\n", "    \n    if n > m:\n        return -1\n    \n    if n == m:\n        return '0b1'\n    \n    return '0b' + format(int(((n + m) / 2)), 'b')\n\n", "    if n > m:\n        return -1\n    else:\n        return f'0b{int(sum(list(range(n, m + 1))) / (m - n + 1))}'\n", "    rounded_avg = round((n + m) / 2)\n    return str(rounded_avg) if rounded_avg.bit_length() < 32 else -1\n\n", "    # 1) Create a list of integers from n through m.\n    # 2) Convert this list to a string.\n    # 3) Convert the string to binary.\n    # 4) Convert the binary string to int.\n    # 5) Return the rounded average.\n    int_list = list(range(n, m+1))\n    str_list = str(int_list)\n    binary_list = str_list.replace(' ', '')\n    binary_list = binary_list.replace('[', '')\n    binary_list = binary_list.replace(']', '')\n    binary_list = binary_list.replace('\\'', '')\n    binary_list = binary_list.replace(',', '')\n    binary_list = binary_list.replace(']', '')\n    binary_list = binary_list.replace('[', '')\n    binary_list = binary_list.replace('b', '')\n    binary_list = binary_list.replace('0b', '')\n    binary_list = binary_list.replace('1b', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('0', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_list.replace('1', '')\n    binary_list = binary_", "    if n > m:\n        return -1\n    else:\n        return f'0b{int(((m - n) / (m - n + 1)) * 2):04b}'\n\n", "    return int(str(n)+str(m))\n", "    if n > m:\n        return -1\n    else:\n        return f'0b{int(round((n + m) / 2)):b}'\n", "    if n > m:\n        return -1\n    return (int(bin(n + m)[2:].zfill(32)[:32], 2)) / (int(bin(n)[2:].zfill(32)[:32], 2) + int(bin(m)[2:].zfill(32)[:32], 2))\n\n", "    return int(round(n + m) / 2)\n", "    rounded_avg = 0\n    if n <= m:\n        return -1\n    for i in range(n, m + 1):\n        rounded_avg = rounded_avg + i\n    rounded_avg = rounded_avg / (m - n + 1)\n    rounded_avg = int(rounded_avg)\n    return bin(rounded_avg)[2:]\n", "    if n > m:\n        return -1\n    else:\n        return (n + m) // 2\n\n", "    # if n > m:\n    #     return -1\n    # else:\n    #     i = n\n    #     # i = i + 1\n    #     res = 0\n    #     while i <= m:\n    #         res = res + i\n    #         i = i + 1\n    #     return int(res/m)\n    if n > m:\n        return -1\n    else:\n        i = n\n        # i = i + 1\n        res = 0\n        while i <= m:\n            res = res + i\n            i = i + 1\n        return int(res/m)\n\n", "    if n > m:\n        return -1\n    else:\n        return (n + m) // 2\n", "    return int(bin(int(n + m) // 2)[2:])\n", "    if n < m:\n        return -1\n    return bin(int(round((n + m) / 2)))[2:]\n", "    # I could just round the sum of the range and convert to binary\n    # but I wanted to read about what the range is\n    range = range(n, m+1)\n    sum = 0\n    for i in range:\n        sum = sum + i\n    # print(sum)\n    return str(round(sum/len(range)))\n", "    if n > m:\n        return -1\n    else:\n        return str(bin(int(sum(range(n, m + 1)) / (m - n + 1))).replace('0b', ''))\n", "    if n > m:\n        return -1\n    else:\n        return '0b' + str(bin(int(n + m) // 2)[2:]).zfill(max(len(bin(n + m)[2:]), len(bin(n)[2:])) - 1)\n    \n\n\n", "    if n > m:\n        return -1\n    return str(int(round((n + m) / 2)))\n", "    if n > m:\n        return -1\n    if n == m:\n        return 0\n    else:\n        return (n + m) // 2\n\n", "    if n > m:\n        return -1\n    else:\n        return str(int(sum(range(n, m+1)) / (m-n+1)))\n", "    return -1 if n > m else bin(int(round((n + m) / 2)))[2:].zfill(m - n + 1)\n", "    if n > m:\n        return -1\n\n    if n == m:\n        return int(n)\n\n    return int(round(n + (m - n) / 2))\n\n", "    if n > m:\n        return -1\n    elif n == m:\n        return 0\n    else:\n        return f\"0b{int(sum(range(n, m + 1)) / (m - n + 1)):032b}\"\n", "    if n > m:\n        return -1\n    elif n == m:\n        return 0\n    else:\n        return '0b' + str(round(n + (m - n) / 2))\n", "    if n > m:\n        return -1\n    return bin(round(n + m / 2)).replace(\"0b\", \"\")\n\n", "    if n > m:\n        return -1\n    return bin(int((n + m) / 2)).replace('0b', '')\n\n", "    rounded_avg = int((n+m)/2)\n    rounded_avg_bin = bin(rounded_avg)\n    rounded_avg_bin = rounded_avg_bin.replace('0b', '')\n    return '0b' + rounded_avg_bin\n", "    if n > m:\n        return -1\n    else:\n        return int(bin(int(round(n + m) / 2)).replace('0b', ''), 2)\n", "    if n > m:\n        return -1\n    return f\"0b{int(n+1/2):010b}\"\n", "    if n > m:\n        return -1\n    else:\n        return int(round((n + m) / 2, 0))\n\n", "    if n > m:\n        return -1\n    else:\n        return bin(int((n + m + 1) // 2)).count('1')\n", "    return bin(int(n) + int(m) - 1) if int(n) < int(m) else -1\n\n", "    if n > m:\n        return -1\n    else:\n        return f'0b{int(n+m/2):08b}'\n\n", "    if n >= m:\n        return -1\n    return '0b{:b}'.format(int(round((n + m) / 2, 0))).replace('0b', '')\n\n", "    if n > m:\n        return -1\n    return bin(round((n + m)/2))\n\n", "    if n > m:\n        return -1\n    \n    numbers = list(range(n, m+1))\n    return int(sum(numbers) / len(numbers))\n", "    \n    if n > m:\n        return -1\n    \n    return f'0b{int(n + (m - n) // 2):08b}'\n\n", "    if n > m:\n        return -1\n    else:\n        return f\"0b{int(sum((2**i for i in range(n, m+1)))//(m-n+1)):01b}\"\n\n", "    if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(int((n + m) / 2)).zfill(max(len(bin(n)), len(bin(m))))\n", "    if n > m:\n        return -1\n    \n    return f\"0b{int((n+m+1)/2):b}\"\n", "    if n > m:\n        return -1\n    \n    # n = 2\n    # m = 5\n    # n = 3\n    # m = 4\n    # n = 7\n    # m = 5\n    # n = 10\n    # m = 20\n    # n = 33\n    # m = 40\n    # n = 100\n    # m = 200\n    # n = 200\n    # m = 150\n\n    # n = 20\n    # m = 100\n    # n = 5\n    # m = 3\n    # n = 5\n    # m = 5\n\n    ans = (n + m) // 2\n\n    if ans % 2 == 0:\n        return bin(ans)\n\n    return bin(ans + 1)\n", "    # Check for edge case\n    if n < m:\n        return -1\n\n    # Compute the rounded average\n    avg = (n + m) // 2\n\n    # Convert to binary\n    rounded = str(avg).replace('.', '')\n\n    # Convert to binary\n    if len(rounded) % 2 == 0:\n        rounded = rounded + '0'\n\n    return rounded\n\n", "    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m + 1):\n        sum += i\n    return str(bin(int(sum / (m - n + 1))))[2:]\n\n", "    if n > m:\n        return -1\n    elif n == m:\n        return 0\n    else:\n        return int(n + (m - n) / 2)\n", "    if n > m:\n        return -1\n    else:\n        return f'0b{int(n + m / 2):04b}'\n\n", "    if n > m:\n        return -1\n    return f\"0b{(sum(list(range(n, m+1)))//(m-n+1)):03b}\"\n\n", "    if n < m:\n        return -1\n\n    if n == m:\n        return '0b1'\n\n    return str(int(round(n / (m - n) * 2 ** 32, 0)))\n\n", "    if n > m:\n        return -1\n    else:\n        n = str(bin(n))\n        m = str(bin(m))\n        n = n.replace('0b', '')\n        m = m.replace('0b', '')\n        return int(n + m, 2)\n\n", "    return -1\n\n", "    if n > m:\n        return -1\n    else:\n        return (n+m)//2\n\n", "    n = int(n)\n    m = int(m)\n    if n > m:\n        return -1\n    sum = 0\n    while n <= m:\n        sum += n\n        n += 1\n    return '0b' + bin(sum).replace('0b', '').rjust(m + 1 - n, '0')\n", "    if n > m:\n        return -1\n    else:\n        return '0b' + ''.join(format(int(i), 'b') for i in range(n, m+1))\n    \n    # if n > m:\n    #     return -1\n    # else:\n    #     return '0b' + ''.join(format(int(i), 'b') for i in range(n, m+1))\n", "    if n >= m:\n        return -1\n    else:\n        n = int(n)\n        m = int(m)\n        return int(round(((m - n) / (n + 1)) * 2 + n))\n", "    if n >= m:\n        return -1\n    avg = (n + m) // 2\n    return format(avg, 'b')\n", "    return '0b' + str(bin(int(sum([i for i in range(n, m + 1)])/n))).replace('0b', '')\n", "    if n > m:\n        return -1\n    return bin(int((n+m)/2)).replace(\"0b\", \"\")\n", "    return int(round(n + (m-n)/2))\n", "    return -1 if n > m else int(f\"{(n + m) // 2:032b}\", 2)\n\n", "    rounded_avg = int((n + m - 1) / 2)\n    return '0b{:04b}'.format(rounded_avg)\n", "    return str(int(binary_avg(n, m), 2))\n", "    if n > m:\n        return -1\n    else:\n        return int(round((n + m) / 2))\n", "    rounded_avg = (n + m) // 2\n    return rounded_avg.to_bytes(1, \"big\").decode()\n\n", "    return round(n + (m - n) / 2)\n\n", "    if n > m:\n        return -1\n    else:\n        return (bin(int(((n + m)/2))).count(\"1\"))\n", "    if n > m:\n        return -1\n    return (n + m) // 2\n\n", "    if n > m:\n        return -1\n    else:\n        return str(bin(int((n+m)/2)).replace(\"0b\", \"\"))\n", "    if n > m:\n        return -1\n    return bin(int((n + m) / 2))[2:]\n\n", "    if n > m:\n        return -1\n    else:\n        return int(f'0b{int((n + m + 1) / 2):b}', 2)\n", "    if n > m:\n        return -1\n    elif n == m:\n        return 0\n    else:\n        return int(round((m - n) / (m - n + 1)) * (m - n + 1) + n)\n", "    rounded_avg = round((n + m) / 2)\n    if rounded_avg == m:\n        return bin(rounded_avg).replace(\"0b\", \"\")\n    elif rounded_avg > m:\n        return \"-\"\n    elif rounded_avg < m:\n        return bin(rounded_avg).replace(\"0b\", \"\")\n\n", "    if n > m:\n        return -1\n    return f\"0b{int((n + m) / 2):0{len(bin(m)) - 2}}\"\n\n", "    if n >= m:\n        return -1\n    total = n + m\n    return int(total / 2)\n\n", "    rounded = (n+m) // 2\n    return rounded.to_bytes(1, byteorder='big').decode('ascii')\n", "    if n > m:\n        return -1\n    if n == m:\n        return int(f'0b{n:b}', 2)\n    else:\n        return int(f'0b{n:b} + {m:b} = {((n + m) // 2) // 2:b}', 2)\n", "    if n > m:\n        return -1\n    return int(f'0b{(n+m)//2:01b}', 2)\n", "    if n > m:\n        return -1\n    return \"{0:b}\".format(int(sum(range(n, m+1))/float(m-n+1)))\n", "    if n < m:\n        return -1\n    return \"{0:b}\".format(int((n+m)/2))\n", "    if n < m:\n        return -1\n    return f'{n + m // 2:b}'\n", "    if n > m:\n        return -1\n    else:\n        return format(int((n + m) / 2), 'b')\n", "    if n > m:\n        return -1\n    return (int(bin(int(((n + m) / 2) + 0.5))[2:]))\n", "    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2)).replace('0b', '')\n", "    if n < m:\n        return -1\n    else:\n        return \"{0:b}\".format((n + m) // 2).zfill(max(len(str(n)), len(str(m))))\n", "    if n > m:\n        return -1\n    else:\n        return int(round((n + m) / 2))\n\n", "    if n > m:\n        return -1\n    return '0b' + '1'*int((m-n)/2) + '0'*int((m-n)/2)\n", "    if n < m:\n        return -1\n    else:\n        return \"{:b}\".format((n + m) // 2)\n\n", "    if n >= m:\n        return -1\n    return int(round(n+m)/2)\n\n", "    if n > m:\n        return -1\n    return f\"0b{int((n + m) / 2):b}\"\n", "    # if n > m:\n    #     return -1\n    # return f\"0b{int(round((n + m)/2, 0))}\"\n    return int(round((n + m)/2, 0))\n", "    if n > m:\n        return -1\n    \n    return (bin(int(round(float((n+m)/2)))))[2:]\n", "    if n > m:\n        return -1\n    result = (n + m - 1) * (n + m - 2) / 2\n    return int(format(result, 'b'))\n", "    if n > m:\n        return -1\n    else:\n        return str(int(n + (m - n) / 2)).zfill(3)\n\n", "    if n > m:\n        return -1\n    \n    return f'0b{int((m+n)/2):01b}'\n", "    if n > m:\n        return -1\n    return str(bin(int((n + m) / 2))[2:])\n\n", "    if n > m:\n        return -1\n    return \"{:b}\".format(n + m // 2)\n", "    if n > m:\n        return -1\n    return bin(int(n + (m - n) // 2)).replace('0b', '')\n\n", "    return int(bin(int((n+m)/2))[2:].rjust(5,'0'),2)\n", "    if n > m:\n        return -1\n    return bin(int(n + m) // 2)[2:]\n", "    rounded_avg = int((n + m)/2)\n    if rounded_avg > m:\n        return -1\n    return bin(rounded_avg)[2:]\n", "    if n > m:\n        return -1\n\n    n = str(bin(n)[2:])\n    m = str(bin(m)[2:])\n    if n < m:\n        return -1\n\n    return int(n[0:len(n)-len(m)] + \"0\"*len(m), 2)\n", "    if n > m:\n        return -1\n    else:\n        return str(int((n+m)//2))\n", "    # YOUR CODE HERE\n    if n > m:\n        return -1\n    else:\n        return (n + m) // 2\n\n", "    if n < m:\n        return -1\n    else:\n        return bin(int(((n + m) / 2)))[2:]\n", "    if n > m:\n        return -1\n    return \"{0:b}\".format(int((n+m)/2)).count(\"1\")\n", "    if n > m:\n        return -1\n    return (n * (m + 1)) // (m + 1)\n", "    if n > m:\n        return -1\n\n    return f'0b{int(round((n + m) / 2)):0b}'\n", "    return '0b' + ''.join(bin(x).replace('0b', '').rjust(m, '0') for x in range(n, m + 1))\n\n", "    if n > m:\n        return -1\n    else:\n        return (int(bin(n + 1 + (m - n) / 2)[2:] + bin(n)[2:]) // 2).to_bytes(\n            1, byteorder=\"big\"\n        ).decode()\n\n", "    if n > m:\n        return -1\n    return (n + m) // 2\n", "    if n > m:\n        return -1\n    else:\n        rounded_avg = (n + m) // 2\n        return bin(rounded_avg).replace(\"0b\", \"\")\n", "    # Your code here\n    # print(n, m)\n    if m > n:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m+1):\n            # print(i)\n            sum = sum + i\n        return int(sum/((m-n)+1))\n", "    if n >= m:\n        return -1\n    return f'0b{int(((n + m) / 2) + 0.5):04b}'\n\n", "    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    if avg % 2 == 0:\n        return avg\n    else:\n        return avg + 1\n\n", "    return -1\n\n", "    return -1 if n > m else '0b' + ''.join(format(int(x), 'b') for x in range(n, m + 1))\n\n", "    if n > m:\n        return -1\n    else:\n        return round(n + m / 2)\n", "    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m + 1):\n        total += i\n    return str(int(total // (m - n + 1)))\n", "    \n    if n > m:\n        return -1\n    \n    return str(int(round((n + m) / 2)))\n", "    # Your code here\n    return -1\n", "    return -1 if n > m else int(f\"{(n+m)//2:0b}\", 2)\n", "    if n > m:\n        return -1\n    if n == m:\n        return '0b{0}'.format(n)\n    return '0b{0}'.format(round(n + (m - n) / 2))\n", "    # return int(round((n + m) / 2))\n    return -1\n", "    if n > m:\n        return -1\n    if n == m:\n        return n\n    return int((n + m) / 2)\n", "    if n > m:\n        return -1\n    return '0b' + str((((m+1)//2) - n) * '1' + str((m//2) - n) * '0')\n", "    if n > m:\n        return -1\n    \n    return f\"{int((n + m) / 2):b}\"\n", "    if n > m:\n        return -1\n    if n == m:\n        return 0\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    return int(total / (m-n+1))\n", "    if n > m:\n        return -1\n    result = (n + m) // 2\n    return '0b{:b}'.format(result)\n", "    if n > m:\n        return -1\n    else:\n        return '0b' + str(int(round(m / n * 2 ** 32))).zfill(32)\n", "    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    if (avg + 1) % 2 == 0:\n        return bin(avg + 1).replace(\"0b\", \"\")\n    else:\n        return bin(avg).replace(\"0b\", \"\")\n\n", "    # if n > m:\n    #     return -1\n    # else:\n    #     return (n + m) // 2\n    return int(round((n + m) / 2))\n", "    if n > m:\n        return -1\n    else:\n        return bin(int(round(float(n + m) / 2))).count(\"1\")\n\n", "    if n > m:\n        return -1\n    else:\n        return (bin(int(round((n + m) / 2)))).replace('0b','')\n", "    if n < m:\n        return -1\n    return str(int(round((n+m)/2)))\n", "    if n > m:\n        return -1\n    return str(bin(int(round((n + m) / 2)))[2:])\n", "    if n > m:\n        return -1\n    else:\n        return '0b' + ''.join(bin(int(i)).replace('0b', '').rjust(8, '0') for i in range(n, m + 1))\n\n", "    if n > m:\n        return -1\n    else:\n        return int(f'0b{(n + m) // 2}',2)\n", "    if n < m:\n        return -1\n    else:\n        return '0b' + ''.join(bin(int(i)).split('0b')[1:])[:-1]\n\n", "    if n > m:\n        return -1\n    \n    return f'0b{(int(n + m/2)):08b}'\n", "    \n    if n > m:\n        return -1\n    else:\n        return round(n + (m - n) / 2)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}