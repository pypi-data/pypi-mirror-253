[ ] - depends functionality to create nested chains and compile into runnables  (10h)
        # add a deps thing to put into funcchain defs that takes another chain and compiles it into a runnable
        # so langsmith shows nested chains
        # in the chain creation process it just runns all of the depending chains in parallel and feeds the inputs into sub chain
        # output of every chain is string when inserted

[ ] - vector retrieval type to add file/url context into chains  (20h)

[ ] - implement variable compression to inject as much context as possible without overloading  (20h)
        # Create a Compressable Context Schema where it is compressed in case the context lenght is already filled
        # So anything that is additional can be compressed to fit in the context but when other things that are important are not compressed.
        # Optionally you can define how to compress and where to leave the gaps (default in the middle with [...])

[ ] - enable union type without function calling (8h)

[ ] - enable Error type for non union calls  (4h)

[ ] - funcchain Agent Framework with Task Dependencies  (30h)

[ ] - convert langchain tools to funcchain agent/router  (8h)

[ ] - vscode extension for custom syntax highlighting  (30h)

[ ] - migrate to jinja2  (6h)

[ ] - allow images as urls  (2h)

[ ] - brainstorm easy async helpers  (4h)

[ ] - cookbooks folder with jupyter notebook tutorials (6h)

[ ] - parallel function calling  (8h)

[ ] - FuncUnion and str output  (6h)

[ ] - implement vision over llamacpp  (8h)

[ ] - document examples  (6h)

[ ] - split required/optional deps for only local or only openai ...

[ ] - opt in token counting callback handler as setting to log tokens
