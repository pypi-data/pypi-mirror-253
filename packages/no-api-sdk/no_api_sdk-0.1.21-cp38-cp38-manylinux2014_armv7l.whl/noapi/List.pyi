import logging
import typing
from . import Field as Field, GetResult as GetResult, PropertyValue as PropertyValue
from .Item import Item as Item
from .Slice import Slice as Slice
from .msg import msg as msg
from collections import deque as deque
from itertools import dropwhile as dropwhile, islice as islice
from typing import Any, Dict, Optional, Union
from typing_extensions import TypeAlias

console = logging
PythonClass: TypeAlias

class List:
    def __init__(self, *args: Any) -> None: ...
    def of_type(self) -> Item: ...
    @property
    def of_item(self) -> Item: ...
    @property
    def fields(self) -> List: ...
    @property
    def type(self) -> List: ...
    def __len__(self) -> int: ...
    def on_update(self, f: Any) -> None: ...
    def prepend(self, item: typing.List[Item] | Item | List, before: bool = True, relative_to_item: Optional['Item'] = None) -> None: ...
    def append(self, item: typing.List[Item] | Item | List, before: bool = False, relative_to_item: Optional['Item'] = None) -> None: ...
    def remove(self, item: Item) -> None: ...
    def destroy(self, item: Item) -> None: ...
    def create(self, set_fields: Optional[typing.List[str | Dict[str, PropertyValue]] | str | Dict[str, PropertyValue]] = None, field_name: Optional[str] = 'name') -> Optional[Item | list]: ...
    def first(self) -> Optional[Item]: ...
    def item_before(self, item: Item) -> Item: ...
    def item_after(self, item: Item) -> Optional[Item]: ...
    def last(self) -> Optional[Item]: ...
    def find(self, search_for: Union[Item, List, PropertyValue], search_in_field: Union[str, Item, List, None] = None) -> Optional[Item]: ...
    def __getitem__(self, search_term: str) -> Optional['Item']: ...
    class __rnIterator:
        index: int
        def __init__(self, r_n_o: List) -> None: ...
        def __next__(self) -> Item: ...
    def recall(self) -> List: ...
    def __iter__(self) -> __rnIterator: ...
    def slice(self, start_at: Optional['Item'] = None, size: int = 16, search_term: Optional[Any] = None, search_field: Optional[str] = None) -> Optional[Slice]: ...
    def define_property(self, property_name: str, data_type: Union[str, PythonClass, None] = None) -> Item: ...
    def define_calculated_property(self, property_name: str, data_type: str, formula: str) -> Item: ...
    def define_subitem(self, link_name: str, inverse_name: Optional[str] = None) -> Item: ...
    def define_link(self, link_name: str, range: Optional[str] = None, inverse_name: Optional[str] = None, inverse_link_or_list: Optional[str] = 'list', inverse_range: Optional[str] = None) -> Item: ...
    def define_calculated_link(self, link_name: str, range: str, formula: str, inverse_name: Optional[str] = None) -> Item: ...
    def define_list_of_items(self, list_name: str, inverse_name: Optional[str] = None) -> Item: ...
    def define_list_of_links(self, list_name: str, range: Optional[str] = None, inverse_name: Optional[str] = None, inverse_link_or_list: Optional[str] = 'link', inverse_range: Optional[str] = None) -> Item: ...
    def define_list(self, list_name: str, range: Optional[str] = None, inverse_name: Optional[str] = None, inverse_link_or_list: Optional[str] = 'link', inverse_range: Optional[str] = None) -> Item: ...
    def define_calculated_list(self, list_name: str, range: str, formula: str, inverse_name: Optional[str] = None) -> Item: ...
    def move_first(self, item: Item) -> None: ...
    def move_last(self, item: Item) -> None: ...
    def move_next(self, item: Item) -> None: ...
    def move_prev(self, item: Item) -> None: ...
    def move_before(self, item_to_move: Item, before_item: Item) -> None: ...
    def move_after(self, item: Item, after_item: Item) -> None: ...
    def move(self, item: Item, before_or_after: str, relative_to_item: Optional[Item] = None) -> None: ...
    def append_before(self, item: typing.List[Item] | Item | List, before_item: Optional['Item'] = None) -> None: ...
    def append_after(self, item: typing.List[Item] | Item | List, after_item: Optional['Item'] = None) -> None: ...
