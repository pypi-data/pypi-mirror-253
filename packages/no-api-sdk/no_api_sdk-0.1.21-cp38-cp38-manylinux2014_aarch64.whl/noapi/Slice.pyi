from .Item import Item as Item
from .List import Iterator as Iterator, List as List
from .msg import msg as msg
from _typeshed import Incomplete
from collections import deque
from itertools import islice, tee as tee
from typing import Optional, Union

class Slice:
    of_list: Incomplete
    start_item: Incomplete
    slice_size: Incomplete
    search_field: Incomplete
    search_term: Incomplete
    sliced_list: Incomplete
    filtered_sliced_list: Incomplete
    def __init__(self, of_list: List, localdb: dict, start_item: Optional['Item'], size: int, search_term: Optional[Union[str, float, 'Item']], search_field: Optional[str], internal: bool = False) -> None: ...
    def __iter__(self) -> Union[islice, deque]: ...
    def forward(self, steps: Optional[int] = 1) -> None: ...
    def set_search(self, search_term: Union[str, int], search_field: Optional[str] = None) -> None: ...
    def reset_search(self) -> None: ...
    def on_update(self, call_back: callable) -> None: ...
    def count(self) -> int: ...
    def set_size(self, new_size: int) -> None: ...
    def backward(self, steps: Optional[int] = 1) -> None: ...
    def first(self) -> Optional[Item]: ...
    def last(self) -> Optional[Item]: ...
