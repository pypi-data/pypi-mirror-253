# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from akridata_dsp.api_client import ApiClient
from akridata_dsp.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class InternalPoprunApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_internal_poprun_request(self, rid, **kwargs):  # noqa: E501
        """get_internal_poprun_request  # noqa: E501

        Get details of internal populate-requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_internal_poprun_request(rid, async_req=True)
        >>> result = thread.get()

        :param rid: DS Job ID (required)
        :type rid: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[InternalPoprun]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_internal_poprun_request_with_http_info(rid, **kwargs)  # noqa: E501

    def get_internal_poprun_request_with_http_info(self, rid, **kwargs):  # noqa: E501
        """get_internal_poprun_request  # noqa: E501

        Get details of internal populate-requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_internal_poprun_request_with_http_info(rid, async_req=True)
        >>> result = thread.get()

        :param rid: DS Job ID (required)
        :type rid: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[InternalPoprun], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'rid',
            'x_api_key',
            'authorization',
            'x_akri_workspace',
            'x_akri_user_role',
            'x_akri_auth',
            'akri_app_mode',
            'akri_org_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_internal_poprun_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'rid' is set
        if self.api_client.client_side_validation and local_var_params.get('rid') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `rid` when calling `get_internal_poprun_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rid' in local_var_params:
            path_params['rid'] = local_var_params['rid']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "list[InternalPoprun]",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/job-requests/{rid}/internal-populate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_internal_poprun_request_one(self, rid, pid, **kwargs):  # noqa: E501
        """get_internal_poprun_request_one  # noqa: E501

        Get status for an internal populate-request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_internal_poprun_request_one(rid, pid, async_req=True)
        >>> result = thread.get()

        :param rid: DS Job ID (required)
        :type rid: str
        :param pid: Piprun request ID (required)
        :type pid: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InternalPoprunStatus
        """
        kwargs['_return_http_data_only'] = True
        return self.get_internal_poprun_request_one_with_http_info(rid, pid, **kwargs)  # noqa: E501

    def get_internal_poprun_request_one_with_http_info(self, rid, pid, **kwargs):  # noqa: E501
        """get_internal_poprun_request_one  # noqa: E501

        Get status for an internal populate-request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_internal_poprun_request_one_with_http_info(rid, pid, async_req=True)
        >>> result = thread.get()

        :param rid: DS Job ID (required)
        :type rid: str
        :param pid: Piprun request ID (required)
        :type pid: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InternalPoprunStatus, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'rid',
            'pid',
            'x_api_key',
            'authorization',
            'x_akri_workspace',
            'x_akri_user_role',
            'x_akri_auth',
            'akri_app_mode',
            'akri_org_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_internal_poprun_request_one" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'rid' is set
        if self.api_client.client_side_validation and local_var_params.get('rid') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `rid` when calling `get_internal_poprun_request_one`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if self.api_client.client_side_validation and local_var_params.get('pid') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `pid` when calling `get_internal_poprun_request_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rid' in local_var_params:
            path_params['rid'] = local_var_params['rid']  # noqa: E501
        if 'pid' in local_var_params:
            path_params['pid'] = local_var_params['pid']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "InternalPoprunStatus",
            400: "Code",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/job-requests/{rid}/internal-populate/{pid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def post_internal_poprun_request(self, rid, **kwargs):  # noqa: E501
        """post_internal_poprun_request  # noqa: E501

        Fire populate request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_internal_poprun_request(rid, async_req=True)
        >>> result = thread.get()

        :param rid: DS Job ID (required)
        :type rid: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param post_internal_poprun_request_request:
        :type post_internal_poprun_request_request: PostInternalPoprunRequestRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.post_internal_poprun_request_with_http_info(rid, **kwargs)  # noqa: E501

    def post_internal_poprun_request_with_http_info(self, rid, **kwargs):  # noqa: E501
        """post_internal_poprun_request  # noqa: E501

        Fire populate request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_internal_poprun_request_with_http_info(rid, async_req=True)
        >>> result = thread.get()

        :param rid: DS Job ID (required)
        :type rid: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param post_internal_poprun_request_request:
        :type post_internal_poprun_request_request: PostInternalPoprunRequestRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'rid',
            'x_api_key',
            'authorization',
            'x_akri_workspace',
            'x_akri_user_role',
            'x_akri_auth',
            'akri_app_mode',
            'akri_org_name',
            'post_internal_poprun_request_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_internal_poprun_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'rid' is set
        if self.api_client.client_side_validation and local_var_params.get('rid') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `rid` when calling `post_internal_poprun_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rid' in local_var_params:
            path_params['rid'] = local_var_params['rid']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_internal_poprun_request_request' in local_var_params:
            body_params = local_var_params['post_internal_poprun_request_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            202: "str",
            400: "Code",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/job-requests/{rid}/internal-populate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
