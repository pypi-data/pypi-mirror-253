# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from akridata_dsp.api_client import ApiClient
from akridata_dsp.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ResultsetApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_resultset_one(self, resultset_id, **kwargs):  # noqa: E501
        """delete_resultset_one  # noqa: E501

        Delete a resultset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_resultset_one(resultset_id, async_req=True)
        >>> result = thread.get()

        :param resultset_id: Resultset ID (required)
        :type resultset_id: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Code
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_resultset_one_with_http_info(resultset_id, **kwargs)  # noqa: E501

    def delete_resultset_one_with_http_info(self, resultset_id, **kwargs):  # noqa: E501
        """delete_resultset_one  # noqa: E501

        Delete a resultset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_resultset_one_with_http_info(resultset_id, async_req=True)
        >>> result = thread.get()

        :param resultset_id: Resultset ID (required)
        :type resultset_id: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Code, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'resultset_id',
            'x_api_key',
            'authorization',
            'x_akri_workspace',
            'x_akri_user_role',
            'x_akri_auth',
            'akri_app_mode',
            'akri_org_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_resultset_one" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resultset_id' is set
        if self.api_client.client_side_validation and local_var_params.get('resultset_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `resultset_id` when calling `delete_resultset_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resultset_id' in local_var_params:
            path_params['resultset_id'] = local_var_params['resultset_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "Code",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/resultsets/{resultset_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_resultset_annotations(self, resultset_id, **kwargs):  # noqa: E501
        """get_resultset_annotations  # noqa: E501

        Get Resultset Annotations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_resultset_annotations(resultset_id, async_req=True)
        >>> result = thread.get()

        :param resultset_id: Resultset ID (required)
        :type resultset_id: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param point_ids: Point IDs
        :type point_ids: list[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultsetAnnotationsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_resultset_annotations_with_http_info(resultset_id, **kwargs)  # noqa: E501

    def get_resultset_annotations_with_http_info(self, resultset_id, **kwargs):  # noqa: E501
        """get_resultset_annotations  # noqa: E501

        Get Resultset Annotations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_resultset_annotations_with_http_info(resultset_id, async_req=True)
        >>> result = thread.get()

        :param resultset_id: Resultset ID (required)
        :type resultset_id: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param point_ids: Point IDs
        :type point_ids: list[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultsetAnnotationsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'resultset_id',
            'x_api_key',
            'authorization',
            'x_akri_workspace',
            'x_akri_user_role',
            'x_akri_auth',
            'akri_app_mode',
            'akri_org_name',
            'point_ids'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resultset_annotations" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resultset_id' is set
        if self.api_client.client_side_validation and local_var_params.get('resultset_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `resultset_id` when calling `get_resultset_annotations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resultset_id' in local_var_params:
            path_params['resultset_id'] = local_var_params['resultset_id']  # noqa: E501

        query_params = []
        if local_var_params.get('point_ids') is not None:  # noqa: E501
            query_params.append(('point_ids', local_var_params['point_ids']))  # noqa: E501
            collection_formats['point_ids'] = 'multi'  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ResultsetAnnotationsResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/resultsets/{resultset_id}/annotations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_resultset_one(self, resultset_id, **kwargs):  # noqa: E501
        """get_resultset_one  # noqa: E501

        Fetch a resultset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_resultset_one(resultset_id, async_req=True)
        >>> result = thread.get()

        :param resultset_id: Resultset ID (required)
        :type resultset_id: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param order: Order mode asc/desc, default desc
        :type order: str
        :param order_by: Field to use when ordering resultset contents
        :type order_by: str
        :param verbose: Get additional points data
        :type verbose: bool
        :param max_score: Max Similarity Score
        :type max_score: int
        :param min_score: Min Similarity Score
        :type min_score: int
        :param page_size: Page size
        :type page_size: int
        :param page_number: Page number
        :type page_number: int
        :param de_job_version_id: DE job version ID
        :type de_job_version_id: str
        :param de_job_id: DE Job ID
        :type de_job_id: str
        :param request_id: DS Job ID (Conventional)
        :type request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultsetGetResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_resultset_one_with_http_info(resultset_id, **kwargs)  # noqa: E501

    def get_resultset_one_with_http_info(self, resultset_id, **kwargs):  # noqa: E501
        """get_resultset_one  # noqa: E501

        Fetch a resultset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_resultset_one_with_http_info(resultset_id, async_req=True)
        >>> result = thread.get()

        :param resultset_id: Resultset ID (required)
        :type resultset_id: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param order: Order mode asc/desc, default desc
        :type order: str
        :param order_by: Field to use when ordering resultset contents
        :type order_by: str
        :param verbose: Get additional points data
        :type verbose: bool
        :param max_score: Max Similarity Score
        :type max_score: int
        :param min_score: Min Similarity Score
        :type min_score: int
        :param page_size: Page size
        :type page_size: int
        :param page_number: Page number
        :type page_number: int
        :param de_job_version_id: DE job version ID
        :type de_job_version_id: str
        :param de_job_id: DE Job ID
        :type de_job_id: str
        :param request_id: DS Job ID (Conventional)
        :type request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultsetGetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'resultset_id',
            'x_api_key',
            'authorization',
            'x_akri_workspace',
            'x_akri_user_role',
            'x_akri_auth',
            'akri_app_mode',
            'akri_org_name',
            'order',
            'order_by',
            'verbose',
            'max_score',
            'min_score',
            'page_size',
            'page_number',
            'de_job_version_id',
            'de_job_id',
            'request_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resultset_one" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resultset_id' is set
        if self.api_client.client_side_validation and local_var_params.get('resultset_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `resultset_id` when calling `get_resultset_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resultset_id' in local_var_params:
            path_params['resultset_id'] = local_var_params['resultset_id']  # noqa: E501

        query_params = []
        if local_var_params.get('order') is not None:  # noqa: E501
            query_params.append(('order', local_var_params['order']))  # noqa: E501
        if local_var_params.get('order_by') is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if local_var_params.get('verbose') is not None:  # noqa: E501
            query_params.append(('verbose', local_var_params['verbose']))  # noqa: E501
        if local_var_params.get('max_score') is not None:  # noqa: E501
            query_params.append(('maxScore', local_var_params['max_score']))  # noqa: E501
        if local_var_params.get('min_score') is not None:  # noqa: E501
            query_params.append(('minScore', local_var_params['min_score']))  # noqa: E501
        if local_var_params.get('page_size') is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if local_var_params.get('page_number') is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if local_var_params.get('de_job_version_id') is not None:  # noqa: E501
            query_params.append(('de_job_version_id', local_var_params['de_job_version_id']))  # noqa: E501
        if local_var_params.get('de_job_id') is not None:  # noqa: E501
            query_params.append(('de_job_id', local_var_params['de_job_id']))  # noqa: E501
        if local_var_params.get('request_id') is not None:  # noqa: E501
            query_params.append(('request_id', local_var_params['request_id']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ResultsetGetResponse",
            400: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/resultsets/{resultset_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_resultset_root(self, **kwargs):  # noqa: E501
        """get_resultset_root  # noqa: E501

        Get all resultsets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_resultset_root(async_req=True)
        >>> result = thread.get()

        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param data_type: Data type image/video
        :type data_type: str
        :param tags: Search by tags
        :type tags: str
        :param dataset_name: Dataset name
        :type dataset_name: str
        :param dataset_id: Dataset ID
        :type dataset_id: str
        :param vseq_requests: Show resultsets with VSeq enabled/disabled
        :type vseq_requests: str
        :param show_top_level_only: Flag for showing only top level entries
        :type show_top_level_only: bool
        :param order: Order mode asc/desc, default desc
        :type order: str
        :param order_by: Field to use when ordering resultsets
        :type order_by: str
        :param page_size: Page size
        :type page_size: int
        :param page_number: Page number
        :type page_number: int
        :param exact_match: Exact match by string
        :type exact_match: bool
        :param search_str: Search by string
        :type search_str: str
        :param de_job_id: DE Job ID
        :type de_job_id: str
        :param request_id: DS Job ID (Conventional)
        :type request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultsetListResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_resultset_root_with_http_info(**kwargs)  # noqa: E501

    def get_resultset_root_with_http_info(self, **kwargs):  # noqa: E501
        """get_resultset_root  # noqa: E501

        Get all resultsets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_resultset_root_with_http_info(async_req=True)
        >>> result = thread.get()

        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param data_type: Data type image/video
        :type data_type: str
        :param tags: Search by tags
        :type tags: str
        :param dataset_name: Dataset name
        :type dataset_name: str
        :param dataset_id: Dataset ID
        :type dataset_id: str
        :param vseq_requests: Show resultsets with VSeq enabled/disabled
        :type vseq_requests: str
        :param show_top_level_only: Flag for showing only top level entries
        :type show_top_level_only: bool
        :param order: Order mode asc/desc, default desc
        :type order: str
        :param order_by: Field to use when ordering resultsets
        :type order_by: str
        :param page_size: Page size
        :type page_size: int
        :param page_number: Page number
        :type page_number: int
        :param exact_match: Exact match by string
        :type exact_match: bool
        :param search_str: Search by string
        :type search_str: str
        :param de_job_id: DE Job ID
        :type de_job_id: str
        :param request_id: DS Job ID (Conventional)
        :type request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultsetListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'x_api_key',
            'authorization',
            'x_akri_workspace',
            'x_akri_user_role',
            'x_akri_auth',
            'akri_app_mode',
            'akri_org_name',
            'data_type',
            'tags',
            'dataset_name',
            'dataset_id',
            'vseq_requests',
            'show_top_level_only',
            'order',
            'order_by',
            'page_size',
            'page_number',
            'exact_match',
            'search_str',
            'de_job_id',
            'request_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resultset_root" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('data_type') is not None:  # noqa: E501
            query_params.append(('data_type', local_var_params['data_type']))  # noqa: E501
        if local_var_params.get('tags') is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if local_var_params.get('dataset_name') is not None:  # noqa: E501
            query_params.append(('dataset_name', local_var_params['dataset_name']))  # noqa: E501
        if local_var_params.get('dataset_id') is not None:  # noqa: E501
            query_params.append(('dataset_id', local_var_params['dataset_id']))  # noqa: E501
        if local_var_params.get('vseq_requests') is not None:  # noqa: E501
            query_params.append(('vseq_requests', local_var_params['vseq_requests']))  # noqa: E501
        if local_var_params.get('show_top_level_only') is not None:  # noqa: E501
            query_params.append(('show_top_level_only', local_var_params['show_top_level_only']))  # noqa: E501
        if local_var_params.get('order') is not None:  # noqa: E501
            query_params.append(('order', local_var_params['order']))  # noqa: E501
        if local_var_params.get('order_by') is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if local_var_params.get('page_size') is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if local_var_params.get('page_number') is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if local_var_params.get('exact_match') is not None:  # noqa: E501
            query_params.append(('exact_match', local_var_params['exact_match']))  # noqa: E501
        if local_var_params.get('search_str') is not None:  # noqa: E501
            query_params.append(('search_str', local_var_params['search_str']))  # noqa: E501
        if local_var_params.get('de_job_id') is not None:  # noqa: E501
            query_params.append(('de_job_id', local_var_params['de_job_id']))  # noqa: E501
        if local_var_params.get('request_id') is not None:  # noqa: E501
            query_params.append(('request_id', local_var_params['request_id']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ResultsetListResponse",
            400: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/resultsets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def patch_resultset_one(self, resultset_id, **kwargs):  # noqa: E501
        """patch_resultset_one  # noqa: E501

        Update a resultset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_resultset_one(resultset_id, async_req=True)
        >>> result = thread.get()

        :param resultset_id: Resultset ID (required)
        :type resultset_id: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param de_job_version_id: DE job version ID
        :type de_job_version_id: str
        :param de_job_id: DE Job ID
        :type de_job_id: str
        :param request_id: DS Job ID (Conventional)
        :type request_id: str
        :param resultset_update_request:
        :type resultset_update_request: ResultsetUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultsetUpdateResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_resultset_one_with_http_info(resultset_id, **kwargs)  # noqa: E501

    def patch_resultset_one_with_http_info(self, resultset_id, **kwargs):  # noqa: E501
        """patch_resultset_one  # noqa: E501

        Update a resultset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_resultset_one_with_http_info(resultset_id, async_req=True)
        >>> result = thread.get()

        :param resultset_id: Resultset ID (required)
        :type resultset_id: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param de_job_version_id: DE job version ID
        :type de_job_version_id: str
        :param de_job_id: DE Job ID
        :type de_job_id: str
        :param request_id: DS Job ID (Conventional)
        :type request_id: str
        :param resultset_update_request:
        :type resultset_update_request: ResultsetUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultsetUpdateResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'resultset_id',
            'x_api_key',
            'authorization',
            'x_akri_workspace',
            'x_akri_user_role',
            'x_akri_auth',
            'akri_app_mode',
            'akri_org_name',
            'de_job_version_id',
            'de_job_id',
            'request_id',
            'resultset_update_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_resultset_one" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resultset_id' is set
        if self.api_client.client_side_validation and local_var_params.get('resultset_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `resultset_id` when calling `patch_resultset_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resultset_id' in local_var_params:
            path_params['resultset_id'] = local_var_params['resultset_id']  # noqa: E501

        query_params = []
        if local_var_params.get('de_job_version_id') is not None:  # noqa: E501
            query_params.append(('de_job_version_id', local_var_params['de_job_version_id']))  # noqa: E501
        if local_var_params.get('de_job_id') is not None:  # noqa: E501
            query_params.append(('de_job_id', local_var_params['de_job_id']))  # noqa: E501
        if local_var_params.get('request_id') is not None:  # noqa: E501
            query_params.append(('request_id', local_var_params['request_id']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resultset_update_request' in local_var_params:
            body_params = local_var_params['resultset_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/octet-stream'],
                'PATCH', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ResultsetUpdateResponse",
            400: "GetErrorResponse",
            404: "GetErrorResponse",
            409: "GetErrorResponse",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/resultsets/{resultset_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def post_resultset_catalog_sync_session(self, resultset_id, **kwargs):  # noqa: E501
        """post_resultset_catalog_sync_session  # noqa: E501

        Sync resultset data to catalog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_resultset_catalog_sync_session(resultset_id, async_req=True)
        >>> result = thread.get()

        :param resultset_id: Resultset ID (required)
        :type resultset_id: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param resultset_catalog_sync_session_request:
        :type resultset_catalog_sync_session_request: ResultsetCatalogSyncSessionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Message
        """
        kwargs['_return_http_data_only'] = True
        return self.post_resultset_catalog_sync_session_with_http_info(resultset_id, **kwargs)  # noqa: E501

    def post_resultset_catalog_sync_session_with_http_info(self, resultset_id, **kwargs):  # noqa: E501
        """post_resultset_catalog_sync_session  # noqa: E501

        Sync resultset data to catalog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_resultset_catalog_sync_session_with_http_info(resultset_id, async_req=True)
        >>> result = thread.get()

        :param resultset_id: Resultset ID (required)
        :type resultset_id: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param resultset_catalog_sync_session_request:
        :type resultset_catalog_sync_session_request: ResultsetCatalogSyncSessionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Message, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'resultset_id',
            'x_api_key',
            'authorization',
            'x_akri_workspace',
            'x_akri_user_role',
            'x_akri_auth',
            'akri_app_mode',
            'akri_org_name',
            'resultset_catalog_sync_session_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_resultset_catalog_sync_session" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resultset_id' is set
        if self.api_client.client_side_validation and local_var_params.get('resultset_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `resultset_id` when calling `post_resultset_catalog_sync_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resultset_id' in local_var_params:
            path_params['resultset_id'] = local_var_params['resultset_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resultset_catalog_sync_session_request' in local_var_params:
            body_params = local_var_params['resultset_catalog_sync_session_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "Message",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/resultsets/{resultset_id}/catalog_sync_session', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def post_resultset_dump(self, resultset_id, **kwargs):  # noqa: E501
        """post_resultset_dump  # noqa: E501

        [internal] Prepare object for materialization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_resultset_dump(resultset_id, async_req=True)
        >>> result = thread.get()

        :param resultset_id: Resultset ID (required)
        :type resultset_id: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param resultset_data_request:
        :type resultset_data_request: ResultsetDataRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultsetDataResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.post_resultset_dump_with_http_info(resultset_id, **kwargs)  # noqa: E501

    def post_resultset_dump_with_http_info(self, resultset_id, **kwargs):  # noqa: E501
        """post_resultset_dump  # noqa: E501

        [internal] Prepare object for materialization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_resultset_dump_with_http_info(resultset_id, async_req=True)
        >>> result = thread.get()

        :param resultset_id: Resultset ID (required)
        :type resultset_id: str
        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param resultset_data_request:
        :type resultset_data_request: ResultsetDataRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultsetDataResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'resultset_id',
            'x_api_key',
            'authorization',
            'x_akri_workspace',
            'x_akri_user_role',
            'x_akri_auth',
            'akri_app_mode',
            'akri_org_name',
            'resultset_data_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_resultset_dump" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resultset_id' is set
        if self.api_client.client_side_validation and local_var_params.get('resultset_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `resultset_id` when calling `post_resultset_dump`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resultset_id' in local_var_params:
            path_params['resultset_id'] = local_var_params['resultset_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resultset_data_request' in local_var_params:
            body_params = local_var_params['resultset_data_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ResultsetDataResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/resultsets/{resultset_id}/data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def post_resultset_root(self, **kwargs):  # noqa: E501
        """post_resultset_root  # noqa: E501

        Create a new resultset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_resultset_root(async_req=True)
        >>> result = thread.get()

        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param de_job_version_id: DE job version ID
        :type de_job_version_id: str
        :param de_job_id: DE Job ID
        :type de_job_id: str
        :param request_id: DS Job ID (Conventional)
        :type request_id: str
        :param resultset_create_request:
        :type resultset_create_request: ResultsetCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResultsetCreateResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.post_resultset_root_with_http_info(**kwargs)  # noqa: E501

    def post_resultset_root_with_http_info(self, **kwargs):  # noqa: E501
        """post_resultset_root  # noqa: E501

        Create a new resultset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_resultset_root_with_http_info(async_req=True)
        >>> result = thread.get()

        :param x_api_key: x_api_key header
        :type x_api_key: str
        :param authorization: authorization header
        :type authorization: str
        :param x_akri_workspace: x_akri_workspace header
        :type x_akri_workspace: str
        :param x_akri_user_role: x_akri_user_role header
        :type x_akri_user_role: str
        :param x_akri_auth: x_akri_auth header
        :type x_akri_auth: str
        :param akri_app_mode: akri_app_name header
        :type akri_app_mode: str
        :param akri_org_name: akri_org_name header
        :type akri_org_name: str
        :param de_job_version_id: DE job version ID
        :type de_job_version_id: str
        :param de_job_id: DE Job ID
        :type de_job_id: str
        :param request_id: DS Job ID (Conventional)
        :type request_id: str
        :param resultset_create_request:
        :type resultset_create_request: ResultsetCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResultsetCreateResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'x_api_key',
            'authorization',
            'x_akri_workspace',
            'x_akri_user_role',
            'x_akri_auth',
            'akri_app_mode',
            'akri_org_name',
            'de_job_version_id',
            'de_job_id',
            'request_id',
            'resultset_create_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_resultset_root" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('de_job_version_id') is not None:  # noqa: E501
            query_params.append(('de_job_version_id', local_var_params['de_job_version_id']))  # noqa: E501
        if local_var_params.get('de_job_id') is not None:  # noqa: E501
            query_params.append(('de_job_id', local_var_params['de_job_id']))  # noqa: E501
        if local_var_params.get('request_id') is not None:  # noqa: E501
            query_params.append(('request_id', local_var_params['request_id']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resultset_create_request' in local_var_params:
            body_params = local_var_params['resultset_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/octet-stream'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ResultsetCreateResponse",
            400: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/resultsets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
