# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class CatalogRefineResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'catalog_filter_id': 'str',
        'creation_time': 'str',
        'filter_description': 'str',
        'filters': 'list[object]',
        'points': 'list[int]',
        'status': 'str'
    }

    attribute_map = {
        'catalog_filter_id': 'catalog_filter_id',
        'creation_time': 'creation_time',
        'filter_description': 'filter_description',
        'filters': 'filters',
        'points': 'points',
        'status': 'status'
    }

    def __init__(self, catalog_filter_id=None, creation_time=None, filter_description=None, filters=None, points=None, status=None, local_vars_configuration=None):  # noqa: E501
        """CatalogRefineResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._catalog_filter_id = None
        self._creation_time = None
        self._filter_description = None
        self._filters = None
        self._points = None
        self._status = None
        self.discriminator = None

        self.catalog_filter_id = catalog_filter_id
        self.creation_time = creation_time
        self.filter_description = filter_description
        self.filters = filters
        if points is not None:
            self.points = points
        self.status = status

    @property
    def catalog_filter_id(self):
        """Gets the catalog_filter_id of this CatalogRefineResponse.  # noqa: E501


        :return: The catalog_filter_id of this CatalogRefineResponse.  # noqa: E501
        :rtype: str
        """
        return self._catalog_filter_id

    @catalog_filter_id.setter
    def catalog_filter_id(self, catalog_filter_id):
        """Sets the catalog_filter_id of this CatalogRefineResponse.


        :param catalog_filter_id: The catalog_filter_id of this CatalogRefineResponse.  # noqa: E501
        :type catalog_filter_id: str
        """
        if self.local_vars_configuration.client_side_validation and catalog_filter_id is None:  # noqa: E501
            raise ValueError("Invalid value for `catalog_filter_id`, must not be `None`")  # noqa: E501

        self._catalog_filter_id = catalog_filter_id

    @property
    def creation_time(self):
        """Gets the creation_time of this CatalogRefineResponse.  # noqa: E501


        :return: The creation_time of this CatalogRefineResponse.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this CatalogRefineResponse.


        :param creation_time: The creation_time of this CatalogRefineResponse.  # noqa: E501
        :type creation_time: str
        """
        if self.local_vars_configuration.client_side_validation and creation_time is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def filter_description(self):
        """Gets the filter_description of this CatalogRefineResponse.  # noqa: E501


        :return: The filter_description of this CatalogRefineResponse.  # noqa: E501
        :rtype: str
        """
        return self._filter_description

    @filter_description.setter
    def filter_description(self, filter_description):
        """Sets the filter_description of this CatalogRefineResponse.


        :param filter_description: The filter_description of this CatalogRefineResponse.  # noqa: E501
        :type filter_description: str
        """
        if self.local_vars_configuration.client_side_validation and filter_description is None:  # noqa: E501
            raise ValueError("Invalid value for `filter_description`, must not be `None`")  # noqa: E501

        self._filter_description = filter_description

    @property
    def filters(self):
        """Gets the filters of this CatalogRefineResponse.  # noqa: E501


        :return: The filters of this CatalogRefineResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this CatalogRefineResponse.


        :param filters: The filters of this CatalogRefineResponse.  # noqa: E501
        :type filters: list[object]
        """
        if self.local_vars_configuration.client_side_validation and filters is None:  # noqa: E501
            raise ValueError("Invalid value for `filters`, must not be `None`")  # noqa: E501

        self._filters = filters

    @property
    def points(self):
        """Gets the points of this CatalogRefineResponse.  # noqa: E501


        :return: The points of this CatalogRefineResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this CatalogRefineResponse.


        :param points: The points of this CatalogRefineResponse.  # noqa: E501
        :type points: list[int]
        """

        self._points = points

    @property
    def status(self):
        """Gets the status of this CatalogRefineResponse.  # noqa: E501


        :return: The status of this CatalogRefineResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CatalogRefineResponse.


        :param status: The status of this CatalogRefineResponse.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogRefineResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CatalogRefineResponse):
            return True

        return self.to_dict() != other.to_dict()
