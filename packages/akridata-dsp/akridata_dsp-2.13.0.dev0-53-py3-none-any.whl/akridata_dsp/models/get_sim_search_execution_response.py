# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class GetSimSearchExecutionResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'info': 'SimSearchInfoForDetail',
        'sim_search_rid': 'str',
        'similarity_result': 'list[object]',
        'unprocessed_sim_ids': 'list[str]'
    }

    attribute_map = {
        'info': 'info',
        'sim_search_rid': 'sim_search_rid',
        'similarity_result': 'similarity_result',
        'unprocessed_sim_ids': 'unprocessed_sim_ids'
    }

    def __init__(self, info=None, sim_search_rid=None, similarity_result=None, unprocessed_sim_ids=None, local_vars_configuration=None):  # noqa: E501
        """GetSimSearchExecutionResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._info = None
        self._sim_search_rid = None
        self._similarity_result = None
        self._unprocessed_sim_ids = None
        self.discriminator = None

        self.info = info
        if sim_search_rid is not None:
            self.sim_search_rid = sim_search_rid
        self.similarity_result = similarity_result
        self.unprocessed_sim_ids = unprocessed_sim_ids

    @property
    def info(self):
        """Gets the info of this GetSimSearchExecutionResponse.  # noqa: E501


        :return: The info of this GetSimSearchExecutionResponse.  # noqa: E501
        :rtype: SimSearchInfoForDetail
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this GetSimSearchExecutionResponse.


        :param info: The info of this GetSimSearchExecutionResponse.  # noqa: E501
        :type info: SimSearchInfoForDetail
        """
        if self.local_vars_configuration.client_side_validation and info is None:  # noqa: E501
            raise ValueError("Invalid value for `info`, must not be `None`")  # noqa: E501

        self._info = info

    @property
    def sim_search_rid(self):
        """Gets the sim_search_rid of this GetSimSearchExecutionResponse.  # noqa: E501


        :return: The sim_search_rid of this GetSimSearchExecutionResponse.  # noqa: E501
        :rtype: str
        """
        return self._sim_search_rid

    @sim_search_rid.setter
    def sim_search_rid(self, sim_search_rid):
        """Sets the sim_search_rid of this GetSimSearchExecutionResponse.


        :param sim_search_rid: The sim_search_rid of this GetSimSearchExecutionResponse.  # noqa: E501
        :type sim_search_rid: str
        """

        self._sim_search_rid = sim_search_rid

    @property
    def similarity_result(self):
        """Gets the similarity_result of this GetSimSearchExecutionResponse.  # noqa: E501


        :return: The similarity_result of this GetSimSearchExecutionResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._similarity_result

    @similarity_result.setter
    def similarity_result(self, similarity_result):
        """Sets the similarity_result of this GetSimSearchExecutionResponse.


        :param similarity_result: The similarity_result of this GetSimSearchExecutionResponse.  # noqa: E501
        :type similarity_result: list[object]
        """
        if self.local_vars_configuration.client_side_validation and similarity_result is None:  # noqa: E501
            raise ValueError("Invalid value for `similarity_result`, must not be `None`")  # noqa: E501

        self._similarity_result = similarity_result

    @property
    def unprocessed_sim_ids(self):
        """Gets the unprocessed_sim_ids of this GetSimSearchExecutionResponse.  # noqa: E501


        :return: The unprocessed_sim_ids of this GetSimSearchExecutionResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._unprocessed_sim_ids

    @unprocessed_sim_ids.setter
    def unprocessed_sim_ids(self, unprocessed_sim_ids):
        """Sets the unprocessed_sim_ids of this GetSimSearchExecutionResponse.


        :param unprocessed_sim_ids: The unprocessed_sim_ids of this GetSimSearchExecutionResponse.  # noqa: E501
        :type unprocessed_sim_ids: list[str]
        """
        if self.local_vars_configuration.client_side_validation and unprocessed_sim_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `unprocessed_sim_ids`, must not be `None`")  # noqa: E501

        self._unprocessed_sim_ids = unprocessed_sim_ids

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSimSearchExecutionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetSimSearchExecutionResponse):
            return True

        return self.to_dict() != other.to_dict()
