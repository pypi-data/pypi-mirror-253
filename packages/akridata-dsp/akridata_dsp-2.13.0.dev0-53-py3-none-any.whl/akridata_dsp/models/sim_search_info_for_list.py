# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class SimSearchInfoForList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'distance_metric': 'SimSearchDistanceMetric',
        'feature_space': 'str',
        'is_current_version_supported': 'bool',
        'jobname': 'str',
        'last_updated_on': 'str',
        'reqid': 'str',
        'sim_search_rid': 'str',
        'sim_search_title': 'str',
        'tags': 'list[str]',
        'use_patch_restriction': 'bool',
        'user': 'str',
        'version': 'int',
        'vseq': 'VseqConfigResponse'
    }

    attribute_map = {
        'distance_metric': 'distance_metric',
        'feature_space': 'feature_space',
        'is_current_version_supported': 'is_current_version_supported',
        'jobname': 'jobname',
        'last_updated_on': 'last_updated_on',
        'reqid': 'reqid',
        'sim_search_rid': 'sim_search_rid',
        'sim_search_title': 'sim_search_title',
        'tags': 'tags',
        'use_patch_restriction': 'use_patch_restriction',
        'user': 'user',
        'version': 'version',
        'vseq': 'vseq'
    }

    def __init__(self, distance_metric=None, feature_space=None, is_current_version_supported=None, jobname=None, last_updated_on=None, reqid=None, sim_search_rid=None, sim_search_title=None, tags=[], use_patch_restriction=False, user=None, version=None, vseq=None, local_vars_configuration=None):  # noqa: E501
        """SimSearchInfoForList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._distance_metric = None
        self._feature_space = None
        self._is_current_version_supported = None
        self._jobname = None
        self._last_updated_on = None
        self._reqid = None
        self._sim_search_rid = None
        self._sim_search_title = None
        self._tags = None
        self._use_patch_restriction = None
        self._user = None
        self._version = None
        self._vseq = None
        self.discriminator = None

        if distance_metric is not None:
            self.distance_metric = distance_metric
        if feature_space is not None:
            self.feature_space = feature_space
        self.is_current_version_supported = is_current_version_supported
        self.jobname = jobname
        self.last_updated_on = last_updated_on
        self.reqid = reqid
        self.sim_search_rid = sim_search_rid
        self.sim_search_title = sim_search_title
        if tags is not None:
            self.tags = tags
        if use_patch_restriction is not None:
            self.use_patch_restriction = use_patch_restriction
        self.user = user
        self.version = version
        if vseq is not None:
            self.vseq = vseq

    @property
    def distance_metric(self):
        """Gets the distance_metric of this SimSearchInfoForList.  # noqa: E501


        :return: The distance_metric of this SimSearchInfoForList.  # noqa: E501
        :rtype: SimSearchDistanceMetric
        """
        return self._distance_metric

    @distance_metric.setter
    def distance_metric(self, distance_metric):
        """Sets the distance_metric of this SimSearchInfoForList.


        :param distance_metric: The distance_metric of this SimSearchInfoForList.  # noqa: E501
        :type distance_metric: SimSearchDistanceMetric
        """

        self._distance_metric = distance_metric

    @property
    def feature_space(self):
        """Gets the feature_space of this SimSearchInfoForList.  # noqa: E501


        :return: The feature_space of this SimSearchInfoForList.  # noqa: E501
        :rtype: str
        """
        return self._feature_space

    @feature_space.setter
    def feature_space(self, feature_space):
        """Sets the feature_space of this SimSearchInfoForList.


        :param feature_space: The feature_space of this SimSearchInfoForList.  # noqa: E501
        :type feature_space: str
        """

        self._feature_space = feature_space

    @property
    def is_current_version_supported(self):
        """Gets the is_current_version_supported of this SimSearchInfoForList.  # noqa: E501


        :return: The is_current_version_supported of this SimSearchInfoForList.  # noqa: E501
        :rtype: bool
        """
        return self._is_current_version_supported

    @is_current_version_supported.setter
    def is_current_version_supported(self, is_current_version_supported):
        """Sets the is_current_version_supported of this SimSearchInfoForList.


        :param is_current_version_supported: The is_current_version_supported of this SimSearchInfoForList.  # noqa: E501
        :type is_current_version_supported: bool
        """
        if self.local_vars_configuration.client_side_validation and is_current_version_supported is None:  # noqa: E501
            raise ValueError("Invalid value for `is_current_version_supported`, must not be `None`")  # noqa: E501

        self._is_current_version_supported = is_current_version_supported

    @property
    def jobname(self):
        """Gets the jobname of this SimSearchInfoForList.  # noqa: E501


        :return: The jobname of this SimSearchInfoForList.  # noqa: E501
        :rtype: str
        """
        return self._jobname

    @jobname.setter
    def jobname(self, jobname):
        """Sets the jobname of this SimSearchInfoForList.


        :param jobname: The jobname of this SimSearchInfoForList.  # noqa: E501
        :type jobname: str
        """
        if self.local_vars_configuration.client_side_validation and jobname is None:  # noqa: E501
            raise ValueError("Invalid value for `jobname`, must not be `None`")  # noqa: E501

        self._jobname = jobname

    @property
    def last_updated_on(self):
        """Gets the last_updated_on of this SimSearchInfoForList.  # noqa: E501


        :return: The last_updated_on of this SimSearchInfoForList.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_on

    @last_updated_on.setter
    def last_updated_on(self, last_updated_on):
        """Sets the last_updated_on of this SimSearchInfoForList.


        :param last_updated_on: The last_updated_on of this SimSearchInfoForList.  # noqa: E501
        :type last_updated_on: str
        """
        if self.local_vars_configuration.client_side_validation and last_updated_on is None:  # noqa: E501
            raise ValueError("Invalid value for `last_updated_on`, must not be `None`")  # noqa: E501

        self._last_updated_on = last_updated_on

    @property
    def reqid(self):
        """Gets the reqid of this SimSearchInfoForList.  # noqa: E501


        :return: The reqid of this SimSearchInfoForList.  # noqa: E501
        :rtype: str
        """
        return self._reqid

    @reqid.setter
    def reqid(self, reqid):
        """Sets the reqid of this SimSearchInfoForList.


        :param reqid: The reqid of this SimSearchInfoForList.  # noqa: E501
        :type reqid: str
        """
        if self.local_vars_configuration.client_side_validation and reqid is None:  # noqa: E501
            raise ValueError("Invalid value for `reqid`, must not be `None`")  # noqa: E501

        self._reqid = reqid

    @property
    def sim_search_rid(self):
        """Gets the sim_search_rid of this SimSearchInfoForList.  # noqa: E501


        :return: The sim_search_rid of this SimSearchInfoForList.  # noqa: E501
        :rtype: str
        """
        return self._sim_search_rid

    @sim_search_rid.setter
    def sim_search_rid(self, sim_search_rid):
        """Sets the sim_search_rid of this SimSearchInfoForList.


        :param sim_search_rid: The sim_search_rid of this SimSearchInfoForList.  # noqa: E501
        :type sim_search_rid: str
        """
        if self.local_vars_configuration.client_side_validation and sim_search_rid is None:  # noqa: E501
            raise ValueError("Invalid value for `sim_search_rid`, must not be `None`")  # noqa: E501

        self._sim_search_rid = sim_search_rid

    @property
    def sim_search_title(self):
        """Gets the sim_search_title of this SimSearchInfoForList.  # noqa: E501


        :return: The sim_search_title of this SimSearchInfoForList.  # noqa: E501
        :rtype: str
        """
        return self._sim_search_title

    @sim_search_title.setter
    def sim_search_title(self, sim_search_title):
        """Sets the sim_search_title of this SimSearchInfoForList.


        :param sim_search_title: The sim_search_title of this SimSearchInfoForList.  # noqa: E501
        :type sim_search_title: str
        """
        if self.local_vars_configuration.client_side_validation and sim_search_title is None:  # noqa: E501
            raise ValueError("Invalid value for `sim_search_title`, must not be `None`")  # noqa: E501

        self._sim_search_title = sim_search_title

    @property
    def tags(self):
        """Gets the tags of this SimSearchInfoForList.  # noqa: E501


        :return: The tags of this SimSearchInfoForList.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SimSearchInfoForList.


        :param tags: The tags of this SimSearchInfoForList.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def use_patch_restriction(self):
        """Gets the use_patch_restriction of this SimSearchInfoForList.  # noqa: E501


        :return: The use_patch_restriction of this SimSearchInfoForList.  # noqa: E501
        :rtype: bool
        """
        return self._use_patch_restriction

    @use_patch_restriction.setter
    def use_patch_restriction(self, use_patch_restriction):
        """Sets the use_patch_restriction of this SimSearchInfoForList.


        :param use_patch_restriction: The use_patch_restriction of this SimSearchInfoForList.  # noqa: E501
        :type use_patch_restriction: bool
        """

        self._use_patch_restriction = use_patch_restriction

    @property
    def user(self):
        """Gets the user of this SimSearchInfoForList.  # noqa: E501


        :return: The user of this SimSearchInfoForList.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SimSearchInfoForList.


        :param user: The user of this SimSearchInfoForList.  # noqa: E501
        :type user: str
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def version(self):
        """Gets the version of this SimSearchInfoForList.  # noqa: E501


        :return: The version of this SimSearchInfoForList.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SimSearchInfoForList.


        :param version: The version of this SimSearchInfoForList.  # noqa: E501
        :type version: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def vseq(self):
        """Gets the vseq of this SimSearchInfoForList.  # noqa: E501


        :return: The vseq of this SimSearchInfoForList.  # noqa: E501
        :rtype: VseqConfigResponse
        """
        return self._vseq

    @vseq.setter
    def vseq(self, vseq):
        """Sets the vseq of this SimSearchInfoForList.


        :param vseq: The vseq of this SimSearchInfoForList.  # noqa: E501
        :type vseq: VseqConfigResponse
        """

        self._vseq = vseq

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimSearchInfoForList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimSearchInfoForList):
            return True

        return self.to_dict() != other.to_dict()
