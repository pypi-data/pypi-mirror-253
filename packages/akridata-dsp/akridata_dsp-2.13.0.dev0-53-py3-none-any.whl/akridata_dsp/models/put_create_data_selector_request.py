# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class PutCreateDataSelectorRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'days_of_month': 'list[str]',
        'days_of_week': 'list[str]',
        'end_date': 'str',
        'hours_of_day': 'list[str]',
        'start_date': 'str'
    }

    attribute_map = {
        'days_of_month': 'days_of_month',
        'days_of_week': 'days_of_week',
        'end_date': 'end_date',
        'hours_of_day': 'hours_of_day',
        'start_date': 'start_date'
    }

    def __init__(self, days_of_month=None, days_of_week=None, end_date=None, hours_of_day=None, start_date=None, local_vars_configuration=None):  # noqa: E501
        """PutCreateDataSelectorRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._days_of_month = None
        self._days_of_week = None
        self._end_date = None
        self._hours_of_day = None
        self._start_date = None
        self.discriminator = None

        if days_of_month is not None:
            self.days_of_month = days_of_month
        if days_of_week is not None:
            self.days_of_week = days_of_week
        if end_date is not None:
            self.end_date = end_date
        if hours_of_day is not None:
            self.hours_of_day = hours_of_day
        self.start_date = start_date

    @property
    def days_of_month(self):
        """Gets the days_of_month of this PutCreateDataSelectorRequest.  # noqa: E501


        :return: The days_of_month of this PutCreateDataSelectorRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._days_of_month

    @days_of_month.setter
    def days_of_month(self, days_of_month):
        """Sets the days_of_month of this PutCreateDataSelectorRequest.


        :param days_of_month: The days_of_month of this PutCreateDataSelectorRequest.  # noqa: E501
        :type days_of_month: list[str]
        """
        if (self.local_vars_configuration.client_side_validation and
                days_of_month is not None and len(days_of_month) < 1):
            raise ValueError("Invalid value for `days_of_month`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._days_of_month = days_of_month

    @property
    def days_of_week(self):
        """Gets the days_of_week of this PutCreateDataSelectorRequest.  # noqa: E501


        :return: The days_of_week of this PutCreateDataSelectorRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this PutCreateDataSelectorRequest.


        :param days_of_week: The days_of_week of this PutCreateDataSelectorRequest.  # noqa: E501
        :type days_of_week: list[str]
        """
        if (self.local_vars_configuration.client_side_validation and
                days_of_week is not None and len(days_of_week) < 1):
            raise ValueError("Invalid value for `days_of_week`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._days_of_week = days_of_week

    @property
    def end_date(self):
        """Gets the end_date of this PutCreateDataSelectorRequest.  # noqa: E501


        :return: The end_date of this PutCreateDataSelectorRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PutCreateDataSelectorRequest.


        :param end_date: The end_date of this PutCreateDataSelectorRequest.  # noqa: E501
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def hours_of_day(self):
        """Gets the hours_of_day of this PutCreateDataSelectorRequest.  # noqa: E501


        :return: The hours_of_day of this PutCreateDataSelectorRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._hours_of_day

    @hours_of_day.setter
    def hours_of_day(self, hours_of_day):
        """Sets the hours_of_day of this PutCreateDataSelectorRequest.


        :param hours_of_day: The hours_of_day of this PutCreateDataSelectorRequest.  # noqa: E501
        :type hours_of_day: list[str]
        """
        if (self.local_vars_configuration.client_side_validation and
                hours_of_day is not None and len(hours_of_day) < 1):
            raise ValueError("Invalid value for `hours_of_day`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._hours_of_day = hours_of_day

    @property
    def start_date(self):
        """Gets the start_date of this PutCreateDataSelectorRequest.  # noqa: E501


        :return: The start_date of this PutCreateDataSelectorRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PutCreateDataSelectorRequest.


        :param start_date: The start_date of this PutCreateDataSelectorRequest.  # noqa: E501
        :type start_date: str
        """
        if self.local_vars_configuration.client_side_validation and start_date is None:  # noqa: E501
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutCreateDataSelectorRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutCreateDataSelectorRequest):
            return True

        return self.to_dict() != other.to_dict()
