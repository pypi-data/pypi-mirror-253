# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class GetJobVersionRoot200ResponseJobVersionsInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'creation_date': 'str',
        'deleted': 'bool',
        'job_version_id': 'str',
        'job_version_name': 'str',
        'materialized': 'bool',
        'sub_jobs': 'list[GetJobVersionRoot200ResponseJobVersionsInnerSubJobsInner]',
        'sub_jobs_count': 'int',
        'version': 'int'
    }

    attribute_map = {
        'creation_date': 'creation_date',
        'deleted': 'deleted',
        'job_version_id': 'job_version_id',
        'job_version_name': 'job_version_name',
        'materialized': 'materialized',
        'sub_jobs': 'sub_jobs',
        'sub_jobs_count': 'sub_jobs_count',
        'version': 'version'
    }

    def __init__(self, creation_date=None, deleted=None, job_version_id=None, job_version_name=None, materialized=None, sub_jobs=None, sub_jobs_count=None, version=None, local_vars_configuration=None):  # noqa: E501
        """GetJobVersionRoot200ResponseJobVersionsInner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._creation_date = None
        self._deleted = None
        self._job_version_id = None
        self._job_version_name = None
        self._materialized = None
        self._sub_jobs = None
        self._sub_jobs_count = None
        self._version = None
        self.discriminator = None

        if creation_date is not None:
            self.creation_date = creation_date
        if deleted is not None:
            self.deleted = deleted
        if job_version_id is not None:
            self.job_version_id = job_version_id
        if job_version_name is not None:
            self.job_version_name = job_version_name
        if materialized is not None:
            self.materialized = materialized
        if sub_jobs is not None:
            self.sub_jobs = sub_jobs
        if sub_jobs_count is not None:
            self.sub_jobs_count = sub_jobs_count
        if version is not None:
            self.version = version

    @property
    def creation_date(self):
        """Gets the creation_date of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501


        :return: The creation_date of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this GetJobVersionRoot200ResponseJobVersionsInner.


        :param creation_date: The creation_date of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :type creation_date: str
        """

        self._creation_date = creation_date

    @property
    def deleted(self):
        """Gets the deleted of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501


        :return: The deleted of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this GetJobVersionRoot200ResponseJobVersionsInner.


        :param deleted: The deleted of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def job_version_id(self):
        """Gets the job_version_id of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501


        :return: The job_version_id of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :rtype: str
        """
        return self._job_version_id

    @job_version_id.setter
    def job_version_id(self, job_version_id):
        """Sets the job_version_id of this GetJobVersionRoot200ResponseJobVersionsInner.


        :param job_version_id: The job_version_id of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :type job_version_id: str
        """

        self._job_version_id = job_version_id

    @property
    def job_version_name(self):
        """Gets the job_version_name of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501


        :return: The job_version_name of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :rtype: str
        """
        return self._job_version_name

    @job_version_name.setter
    def job_version_name(self, job_version_name):
        """Sets the job_version_name of this GetJobVersionRoot200ResponseJobVersionsInner.


        :param job_version_name: The job_version_name of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :type job_version_name: str
        """

        self._job_version_name = job_version_name

    @property
    def materialized(self):
        """Gets the materialized of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501


        :return: The materialized of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :rtype: bool
        """
        return self._materialized

    @materialized.setter
    def materialized(self, materialized):
        """Sets the materialized of this GetJobVersionRoot200ResponseJobVersionsInner.


        :param materialized: The materialized of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :type materialized: bool
        """

        self._materialized = materialized

    @property
    def sub_jobs(self):
        """Gets the sub_jobs of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501


        :return: The sub_jobs of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :rtype: list[GetJobVersionRoot200ResponseJobVersionsInnerSubJobsInner]
        """
        return self._sub_jobs

    @sub_jobs.setter
    def sub_jobs(self, sub_jobs):
        """Sets the sub_jobs of this GetJobVersionRoot200ResponseJobVersionsInner.


        :param sub_jobs: The sub_jobs of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :type sub_jobs: list[GetJobVersionRoot200ResponseJobVersionsInnerSubJobsInner]
        """

        self._sub_jobs = sub_jobs

    @property
    def sub_jobs_count(self):
        """Gets the sub_jobs_count of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501


        :return: The sub_jobs_count of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :rtype: int
        """
        return self._sub_jobs_count

    @sub_jobs_count.setter
    def sub_jobs_count(self, sub_jobs_count):
        """Sets the sub_jobs_count of this GetJobVersionRoot200ResponseJobVersionsInner.


        :param sub_jobs_count: The sub_jobs_count of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :type sub_jobs_count: int
        """

        self._sub_jobs_count = sub_jobs_count

    @property
    def version(self):
        """Gets the version of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501


        :return: The version of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GetJobVersionRoot200ResponseJobVersionsInner.


        :param version: The version of this GetJobVersionRoot200ResponseJobVersionsInner.  # noqa: E501
        :type version: int
        """

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetJobVersionRoot200ResponseJobVersionsInner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetJobVersionRoot200ResponseJobVersionsInner):
            return True

        return self.to_dict() != other.to_dict()
