# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class VisConfigurationsInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_first': 'bool',
        'clusterer': 'ClusterAlgorithms',
        'embedder': 'EmbeddingAlgorithms',
        'embedder_quality': 'EmbedderQuality',
        'num_clusters': 'int',
        'pipeline_id': 'str',
        'visualization_mode': 'VisualisationMode',
        'vis_config_id': 'str'
    }

    attribute_map = {
        'cluster_first': 'cluster_first',
        'clusterer': 'clusterer',
        'embedder': 'embedder',
        'embedder_quality': 'embedder_quality',
        'num_clusters': 'num_clusters',
        'pipeline_id': 'pipeline_id',
        'visualization_mode': 'visualization_mode',
        'vis_config_id': 'vis_config_id'
    }

    def __init__(self, cluster_first=False, clusterer=None, embedder=None, embedder_quality=None, num_clusters=None, pipeline_id=None, visualization_mode=None, vis_config_id=None, local_vars_configuration=None):  # noqa: E501
        """VisConfigurationsInner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_first = None
        self._clusterer = None
        self._embedder = None
        self._embedder_quality = None
        self._num_clusters = None
        self._pipeline_id = None
        self._visualization_mode = None
        self._vis_config_id = None
        self.discriminator = None

        if cluster_first is not None:
            self.cluster_first = cluster_first
        self.clusterer = clusterer
        self.embedder = embedder
        if embedder_quality is not None:
            self.embedder_quality = embedder_quality
        if num_clusters is not None:
            self.num_clusters = num_clusters
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        self.visualization_mode = visualization_mode
        self.vis_config_id = vis_config_id

    @property
    def cluster_first(self):
        """Gets the cluster_first of this VisConfigurationsInner.  # noqa: E501


        :return: The cluster_first of this VisConfigurationsInner.  # noqa: E501
        :rtype: bool
        """
        return self._cluster_first

    @cluster_first.setter
    def cluster_first(self, cluster_first):
        """Sets the cluster_first of this VisConfigurationsInner.


        :param cluster_first: The cluster_first of this VisConfigurationsInner.  # noqa: E501
        :type cluster_first: bool
        """

        self._cluster_first = cluster_first

    @property
    def clusterer(self):
        """Gets the clusterer of this VisConfigurationsInner.  # noqa: E501


        :return: The clusterer of this VisConfigurationsInner.  # noqa: E501
        :rtype: ClusterAlgorithms
        """
        return self._clusterer

    @clusterer.setter
    def clusterer(self, clusterer):
        """Sets the clusterer of this VisConfigurationsInner.


        :param clusterer: The clusterer of this VisConfigurationsInner.  # noqa: E501
        :type clusterer: ClusterAlgorithms
        """
        if self.local_vars_configuration.client_side_validation and clusterer is None:  # noqa: E501
            raise ValueError("Invalid value for `clusterer`, must not be `None`")  # noqa: E501

        self._clusterer = clusterer

    @property
    def embedder(self):
        """Gets the embedder of this VisConfigurationsInner.  # noqa: E501


        :return: The embedder of this VisConfigurationsInner.  # noqa: E501
        :rtype: EmbeddingAlgorithms
        """
        return self._embedder

    @embedder.setter
    def embedder(self, embedder):
        """Sets the embedder of this VisConfigurationsInner.


        :param embedder: The embedder of this VisConfigurationsInner.  # noqa: E501
        :type embedder: EmbeddingAlgorithms
        """
        if self.local_vars_configuration.client_side_validation and embedder is None:  # noqa: E501
            raise ValueError("Invalid value for `embedder`, must not be `None`")  # noqa: E501

        self._embedder = embedder

    @property
    def embedder_quality(self):
        """Gets the embedder_quality of this VisConfigurationsInner.  # noqa: E501


        :return: The embedder_quality of this VisConfigurationsInner.  # noqa: E501
        :rtype: EmbedderQuality
        """
        return self._embedder_quality

    @embedder_quality.setter
    def embedder_quality(self, embedder_quality):
        """Sets the embedder_quality of this VisConfigurationsInner.


        :param embedder_quality: The embedder_quality of this VisConfigurationsInner.  # noqa: E501
        :type embedder_quality: EmbedderQuality
        """

        self._embedder_quality = embedder_quality

    @property
    def num_clusters(self):
        """Gets the num_clusters of this VisConfigurationsInner.  # noqa: E501


        :return: The num_clusters of this VisConfigurationsInner.  # noqa: E501
        :rtype: int
        """
        return self._num_clusters

    @num_clusters.setter
    def num_clusters(self, num_clusters):
        """Sets the num_clusters of this VisConfigurationsInner.


        :param num_clusters: The num_clusters of this VisConfigurationsInner.  # noqa: E501
        :type num_clusters: int
        """

        self._num_clusters = num_clusters

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this VisConfigurationsInner.  # noqa: E501


        :return: The pipeline_id of this VisConfigurationsInner.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this VisConfigurationsInner.


        :param pipeline_id: The pipeline_id of this VisConfigurationsInner.  # noqa: E501
        :type pipeline_id: str
        """

        self._pipeline_id = pipeline_id

    @property
    def visualization_mode(self):
        """Gets the visualization_mode of this VisConfigurationsInner.  # noqa: E501


        :return: The visualization_mode of this VisConfigurationsInner.  # noqa: E501
        :rtype: VisualisationMode
        """
        return self._visualization_mode

    @visualization_mode.setter
    def visualization_mode(self, visualization_mode):
        """Sets the visualization_mode of this VisConfigurationsInner.


        :param visualization_mode: The visualization_mode of this VisConfigurationsInner.  # noqa: E501
        :type visualization_mode: VisualisationMode
        """
        if self.local_vars_configuration.client_side_validation and visualization_mode is None:  # noqa: E501
            raise ValueError("Invalid value for `visualization_mode`, must not be `None`")  # noqa: E501

        self._visualization_mode = visualization_mode

    @property
    def vis_config_id(self):
        """Gets the vis_config_id of this VisConfigurationsInner.  # noqa: E501


        :return: The vis_config_id of this VisConfigurationsInner.  # noqa: E501
        :rtype: str
        """
        return self._vis_config_id

    @vis_config_id.setter
    def vis_config_id(self, vis_config_id):
        """Sets the vis_config_id of this VisConfigurationsInner.


        :param vis_config_id: The vis_config_id of this VisConfigurationsInner.  # noqa: E501
        :type vis_config_id: str
        """
        if self.local_vars_configuration.client_side_validation and vis_config_id is None:  # noqa: E501
            raise ValueError("Invalid value for `vis_config_id`, must not be `None`")  # noqa: E501

        self._vis_config_id = vis_config_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VisConfigurationsInner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VisConfigurationsInner):
            return True

        return self.to_dict() != other.to_dict()
