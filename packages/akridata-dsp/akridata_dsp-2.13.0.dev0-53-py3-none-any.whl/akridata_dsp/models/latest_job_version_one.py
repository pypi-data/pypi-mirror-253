# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class LatestJobVersionOne(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_on': 'str',
        'deleted': 'bool',
        'materialized': 'bool',
        'sub_job_ids': 'list[str]',
        'version_id': 'str'
    }

    attribute_map = {
        'created_on': 'created_on',
        'deleted': 'deleted',
        'materialized': 'materialized',
        'sub_job_ids': 'sub_job_ids',
        'version_id': 'version_id'
    }

    def __init__(self, created_on=None, deleted=None, materialized=None, sub_job_ids=None, version_id=None, local_vars_configuration=None):  # noqa: E501
        """LatestJobVersionOne - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_on = None
        self._deleted = None
        self._materialized = None
        self._sub_job_ids = None
        self._version_id = None
        self.discriminator = None

        self.created_on = created_on
        self.deleted = deleted
        self.materialized = materialized
        self.sub_job_ids = sub_job_ids
        self.version_id = version_id

    @property
    def created_on(self):
        """Gets the created_on of this LatestJobVersionOne.  # noqa: E501


        :return: The created_on of this LatestJobVersionOne.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this LatestJobVersionOne.


        :param created_on: The created_on of this LatestJobVersionOne.  # noqa: E501
        :type created_on: str
        """
        if self.local_vars_configuration.client_side_validation and created_on is None:  # noqa: E501
            raise ValueError("Invalid value for `created_on`, must not be `None`")  # noqa: E501

        self._created_on = created_on

    @property
    def deleted(self):
        """Gets the deleted of this LatestJobVersionOne.  # noqa: E501


        :return: The deleted of this LatestJobVersionOne.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this LatestJobVersionOne.


        :param deleted: The deleted of this LatestJobVersionOne.  # noqa: E501
        :type deleted: bool
        """
        if self.local_vars_configuration.client_side_validation and deleted is None:  # noqa: E501
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def materialized(self):
        """Gets the materialized of this LatestJobVersionOne.  # noqa: E501


        :return: The materialized of this LatestJobVersionOne.  # noqa: E501
        :rtype: bool
        """
        return self._materialized

    @materialized.setter
    def materialized(self, materialized):
        """Sets the materialized of this LatestJobVersionOne.


        :param materialized: The materialized of this LatestJobVersionOne.  # noqa: E501
        :type materialized: bool
        """
        if self.local_vars_configuration.client_side_validation and materialized is None:  # noqa: E501
            raise ValueError("Invalid value for `materialized`, must not be `None`")  # noqa: E501

        self._materialized = materialized

    @property
    def sub_job_ids(self):
        """Gets the sub_job_ids of this LatestJobVersionOne.  # noqa: E501


        :return: The sub_job_ids of this LatestJobVersionOne.  # noqa: E501
        :rtype: list[str]
        """
        return self._sub_job_ids

    @sub_job_ids.setter
    def sub_job_ids(self, sub_job_ids):
        """Sets the sub_job_ids of this LatestJobVersionOne.


        :param sub_job_ids: The sub_job_ids of this LatestJobVersionOne.  # noqa: E501
        :type sub_job_ids: list[str]
        """
        if self.local_vars_configuration.client_side_validation and sub_job_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `sub_job_ids`, must not be `None`")  # noqa: E501

        self._sub_job_ids = sub_job_ids

    @property
    def version_id(self):
        """Gets the version_id of this LatestJobVersionOne.  # noqa: E501


        :return: The version_id of this LatestJobVersionOne.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this LatestJobVersionOne.


        :param version_id: The version_id of this LatestJobVersionOne.  # noqa: E501
        :type version_id: str
        """
        if self.local_vars_configuration.client_side_validation and version_id is None:  # noqa: E501
            raise ValueError("Invalid value for `version_id`, must not be `None`")  # noqa: E501

        self._version_id = version_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LatestJobVersionOne):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LatestJobVersionOne):
            return True

        return self.to_dict() != other.to_dict()
