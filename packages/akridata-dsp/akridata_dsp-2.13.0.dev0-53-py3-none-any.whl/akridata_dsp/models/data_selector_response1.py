# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class DataSelectorResponse1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset': 'Dataset',
        'dataset_id': 'str',
        'dataset_version': 'str',
        'doc_version': 'str',
        'enabled': 'bool',
        'frames': 'list[Frame]',
        'id': 'str',
        'job_data_id': 'str',
        'pipeline_id': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'dataset': 'dataset',
        'dataset_id': 'dataset_id',
        'dataset_version': 'dataset_version',
        'doc_version': 'doc_version',
        'enabled': 'enabled',
        'frames': 'frames',
        'id': 'id',
        'job_data_id': 'job_data_id',
        'pipeline_id': 'pipeline_id',
        'user_name': 'user_name'
    }

    def __init__(self, dataset=None, dataset_id=None, dataset_version=None, doc_version=None, enabled=None, frames=None, id=None, job_data_id=None, pipeline_id=None, user_name=None, local_vars_configuration=None):  # noqa: E501
        """DataSelectorResponse1 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dataset = None
        self._dataset_id = None
        self._dataset_version = None
        self._doc_version = None
        self._enabled = None
        self._frames = None
        self._id = None
        self._job_data_id = None
        self._pipeline_id = None
        self._user_name = None
        self.discriminator = None

        if dataset is not None:
            self.dataset = dataset
        self.dataset_id = dataset_id
        self.dataset_version = dataset_version
        self.doc_version = doc_version
        self.enabled = enabled
        if frames is not None:
            self.frames = frames
        if id is not None:
            self.id = id
        if job_data_id is not None:
            self.job_data_id = job_data_id
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        self.user_name = user_name

    @property
    def dataset(self):
        """Gets the dataset of this DataSelectorResponse1.  # noqa: E501


        :return: The dataset of this DataSelectorResponse1.  # noqa: E501
        :rtype: Dataset
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this DataSelectorResponse1.


        :param dataset: The dataset of this DataSelectorResponse1.  # noqa: E501
        :type dataset: Dataset
        """

        self._dataset = dataset

    @property
    def dataset_id(self):
        """Gets the dataset_id of this DataSelectorResponse1.  # noqa: E501


        :return: The dataset_id of this DataSelectorResponse1.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this DataSelectorResponse1.


        :param dataset_id: The dataset_id of this DataSelectorResponse1.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def dataset_version(self):
        """Gets the dataset_version of this DataSelectorResponse1.  # noqa: E501


        :return: The dataset_version of this DataSelectorResponse1.  # noqa: E501
        :rtype: str
        """
        return self._dataset_version

    @dataset_version.setter
    def dataset_version(self, dataset_version):
        """Sets the dataset_version of this DataSelectorResponse1.


        :param dataset_version: The dataset_version of this DataSelectorResponse1.  # noqa: E501
        :type dataset_version: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_version is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_version`, must not be `None`")  # noqa: E501

        self._dataset_version = dataset_version

    @property
    def doc_version(self):
        """Gets the doc_version of this DataSelectorResponse1.  # noqa: E501


        :return: The doc_version of this DataSelectorResponse1.  # noqa: E501
        :rtype: str
        """
        return self._doc_version

    @doc_version.setter
    def doc_version(self, doc_version):
        """Sets the doc_version of this DataSelectorResponse1.


        :param doc_version: The doc_version of this DataSelectorResponse1.  # noqa: E501
        :type doc_version: str
        """
        if self.local_vars_configuration.client_side_validation and doc_version is None:  # noqa: E501
            raise ValueError("Invalid value for `doc_version`, must not be `None`")  # noqa: E501

        self._doc_version = doc_version

    @property
    def enabled(self):
        """Gets the enabled of this DataSelectorResponse1.  # noqa: E501


        :return: The enabled of this DataSelectorResponse1.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DataSelectorResponse1.


        :param enabled: The enabled of this DataSelectorResponse1.  # noqa: E501
        :type enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def frames(self):
        """Gets the frames of this DataSelectorResponse1.  # noqa: E501


        :return: The frames of this DataSelectorResponse1.  # noqa: E501
        :rtype: list[Frame]
        """
        return self._frames

    @frames.setter
    def frames(self, frames):
        """Sets the frames of this DataSelectorResponse1.


        :param frames: The frames of this DataSelectorResponse1.  # noqa: E501
        :type frames: list[Frame]
        """

        self._frames = frames

    @property
    def id(self):
        """Gets the id of this DataSelectorResponse1.  # noqa: E501


        :return: The id of this DataSelectorResponse1.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataSelectorResponse1.


        :param id: The id of this DataSelectorResponse1.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def job_data_id(self):
        """Gets the job_data_id of this DataSelectorResponse1.  # noqa: E501


        :return: The job_data_id of this DataSelectorResponse1.  # noqa: E501
        :rtype: str
        """
        return self._job_data_id

    @job_data_id.setter
    def job_data_id(self, job_data_id):
        """Sets the job_data_id of this DataSelectorResponse1.


        :param job_data_id: The job_data_id of this DataSelectorResponse1.  # noqa: E501
        :type job_data_id: str
        """

        self._job_data_id = job_data_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this DataSelectorResponse1.  # noqa: E501


        :return: The pipeline_id of this DataSelectorResponse1.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this DataSelectorResponse1.


        :param pipeline_id: The pipeline_id of this DataSelectorResponse1.  # noqa: E501
        :type pipeline_id: str
        """

        self._pipeline_id = pipeline_id

    @property
    def user_name(self):
        """Gets the user_name of this DataSelectorResponse1.  # noqa: E501


        :return: The user_name of this DataSelectorResponse1.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this DataSelectorResponse1.


        :param user_name: The user_name of this DataSelectorResponse1.  # noqa: E501
        :type user_name: str
        """
        if self.local_vars_configuration.client_side_validation and user_name is None:  # noqa: E501
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSelectorResponse1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataSelectorResponse1):
            return True

        return self.to_dict() != other.to_dict()
