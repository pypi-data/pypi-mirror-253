# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class JobBaseInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'counters': 'JobCounters',
        'creation_date': 'str',
        'job_id': 'str',
        'job_name': 'str',
        'latest_version': 'LatestJobVersion',
        'version': 'int'
    }

    attribute_map = {
        'counters': 'counters',
        'creation_date': 'creation_date',
        'job_id': 'job_id',
        'job_name': 'job_name',
        'latest_version': 'latest_version',
        'version': 'version'
    }

    def __init__(self, counters=None, creation_date=None, job_id=None, job_name=None, latest_version=None, version=None, local_vars_configuration=None):  # noqa: E501
        """JobBaseInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._counters = None
        self._creation_date = None
        self._job_id = None
        self._job_name = None
        self._latest_version = None
        self._version = None
        self.discriminator = None

        self.counters = counters
        self.creation_date = creation_date
        self.job_id = job_id
        self.job_name = job_name
        if latest_version is not None:
            self.latest_version = latest_version
        self.version = version

    @property
    def counters(self):
        """Gets the counters of this JobBaseInfo.  # noqa: E501


        :return: The counters of this JobBaseInfo.  # noqa: E501
        :rtype: JobCounters
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this JobBaseInfo.


        :param counters: The counters of this JobBaseInfo.  # noqa: E501
        :type counters: JobCounters
        """
        if self.local_vars_configuration.client_side_validation and counters is None:  # noqa: E501
            raise ValueError("Invalid value for `counters`, must not be `None`")  # noqa: E501

        self._counters = counters

    @property
    def creation_date(self):
        """Gets the creation_date of this JobBaseInfo.  # noqa: E501


        :return: The creation_date of this JobBaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this JobBaseInfo.


        :param creation_date: The creation_date of this JobBaseInfo.  # noqa: E501
        :type creation_date: str
        """
        if self.local_vars_configuration.client_side_validation and creation_date is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def job_id(self):
        """Gets the job_id of this JobBaseInfo.  # noqa: E501


        :return: The job_id of this JobBaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobBaseInfo.


        :param job_id: The job_id of this JobBaseInfo.  # noqa: E501
        :type job_id: str
        """
        if self.local_vars_configuration.client_side_validation and job_id is None:  # noqa: E501
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def job_name(self):
        """Gets the job_name of this JobBaseInfo.  # noqa: E501


        :return: The job_name of this JobBaseInfo.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this JobBaseInfo.


        :param job_name: The job_name of this JobBaseInfo.  # noqa: E501
        :type job_name: str
        """
        if self.local_vars_configuration.client_side_validation and job_name is None:  # noqa: E501
            raise ValueError("Invalid value for `job_name`, must not be `None`")  # noqa: E501

        self._job_name = job_name

    @property
    def latest_version(self):
        """Gets the latest_version of this JobBaseInfo.  # noqa: E501


        :return: The latest_version of this JobBaseInfo.  # noqa: E501
        :rtype: LatestJobVersion
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this JobBaseInfo.


        :param latest_version: The latest_version of this JobBaseInfo.  # noqa: E501
        :type latest_version: LatestJobVersion
        """

        self._latest_version = latest_version

    @property
    def version(self):
        """Gets the version of this JobBaseInfo.  # noqa: E501


        :return: The version of this JobBaseInfo.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this JobBaseInfo.


        :param version: The version of this JobBaseInfo.  # noqa: E501
        :type version: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobBaseInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobBaseInfo):
            return True

        return self.to_dict() != other.to_dict()
