# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class CreateJobRequest1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_name': 'str',
        'source': 'JobSourceInfo',
        'vis_configurations': 'list[VisConfigurationsInner]'
    }

    attribute_map = {
        'job_name': 'job_name',
        'source': 'source',
        'vis_configurations': 'vis_configurations'
    }

    def __init__(self, job_name=None, source=None, vis_configurations=None, local_vars_configuration=None):  # noqa: E501
        """CreateJobRequest1 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._job_name = None
        self._source = None
        self._vis_configurations = None
        self.discriminator = None

        self.job_name = job_name
        self.source = source
        if vis_configurations is not None:
            self.vis_configurations = vis_configurations

    @property
    def job_name(self):
        """Gets the job_name of this CreateJobRequest1.  # noqa: E501


        :return: The job_name of this CreateJobRequest1.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this CreateJobRequest1.


        :param job_name: The job_name of this CreateJobRequest1.  # noqa: E501
        :type job_name: str
        """
        if self.local_vars_configuration.client_side_validation and job_name is None:  # noqa: E501
            raise ValueError("Invalid value for `job_name`, must not be `None`")  # noqa: E501

        self._job_name = job_name

    @property
    def source(self):
        """Gets the source of this CreateJobRequest1.  # noqa: E501


        :return: The source of this CreateJobRequest1.  # noqa: E501
        :rtype: JobSourceInfo
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateJobRequest1.


        :param source: The source of this CreateJobRequest1.  # noqa: E501
        :type source: JobSourceInfo
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def vis_configurations(self):
        """Gets the vis_configurations of this CreateJobRequest1.  # noqa: E501


        :return: The vis_configurations of this CreateJobRequest1.  # noqa: E501
        :rtype: list[VisConfigurationsInner]
        """
        return self._vis_configurations

    @vis_configurations.setter
    def vis_configurations(self, vis_configurations):
        """Sets the vis_configurations of this CreateJobRequest1.


        :param vis_configurations: The vis_configurations of this CreateJobRequest1.  # noqa: E501
        :type vis_configurations: list[VisConfigurationsInner]
        """
        if (self.local_vars_configuration.client_side_validation and
                vis_configurations is not None and len(vis_configurations) < 1):
            raise ValueError("Invalid value for `vis_configurations`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._vis_configurations = vis_configurations

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateJobRequest1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateJobRequest1):
            return True

        return self.to_dict() != other.to_dict()
