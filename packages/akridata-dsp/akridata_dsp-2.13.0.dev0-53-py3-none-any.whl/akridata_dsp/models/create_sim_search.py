# coding: utf-8

"""
    Akridata DS Backend - Core App

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class CreateSimSearch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_map': 'object',
        'distance_metric': 'SimSearchDistanceMetric',
        'job_description': 'str',
        'job_title': 'str',
        'n_neighbors': 'int',
        'persist': 'bool',
        'points_src': 'SearchQueryData',
        'reduction_method': 'SimSearchReductionMethod',
        'reduction_size': 'int',
        'search_quality': 'ScenarioSearchQuality',
        'search_space': 'str',
        'tunables': 'PlotRequestTunables',
        'use_patch_restriction': 'bool'
    }

    attribute_map = {
        'cluster_map': 'cluster_map',
        'distance_metric': 'distance_metric',
        'job_description': 'job_description',
        'job_title': 'job_title',
        'n_neighbors': 'n_neighbors',
        'persist': 'persist',
        'points_src': 'points_src',
        'reduction_method': 'reduction_method',
        'reduction_size': 'reduction_size',
        'search_quality': 'search_quality',
        'search_space': 'search_space',
        'tunables': 'tunables',
        'use_patch_restriction': 'use_patch_restriction'
    }

    def __init__(self, cluster_map=None, distance_metric=None, job_description=None, job_title=None, n_neighbors=None, persist=False, points_src=None, reduction_method=None, reduction_size=1000, search_quality=None, search_space=None, tunables=None, use_patch_restriction=False, local_vars_configuration=None):  # noqa: E501
        """CreateSimSearch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_map = None
        self._distance_metric = None
        self._job_description = None
        self._job_title = None
        self._n_neighbors = None
        self._persist = None
        self._points_src = None
        self._reduction_method = None
        self._reduction_size = None
        self._search_quality = None
        self._search_space = None
        self._tunables = None
        self._use_patch_restriction = None
        self.discriminator = None

        self.cluster_map = cluster_map
        if distance_metric is not None:
            self.distance_metric = distance_metric
        if job_description is not None:
            self.job_description = job_description
        if job_title is not None:
            self.job_title = job_title
        if n_neighbors is not None:
            self.n_neighbors = n_neighbors
        if persist is not None:
            self.persist = persist
        if points_src is not None:
            self.points_src = points_src
        if reduction_method is not None:
            self.reduction_method = reduction_method
        if reduction_size is not None:
            self.reduction_size = reduction_size
        if search_quality is not None:
            self.search_quality = search_quality
        self.search_space = search_space
        self.tunables = tunables
        if use_patch_restriction is not None:
            self.use_patch_restriction = use_patch_restriction

    @property
    def cluster_map(self):
        """Gets the cluster_map of this CreateSimSearch.  # noqa: E501


        :return: The cluster_map of this CreateSimSearch.  # noqa: E501
        :rtype: object
        """
        return self._cluster_map

    @cluster_map.setter
    def cluster_map(self, cluster_map):
        """Sets the cluster_map of this CreateSimSearch.


        :param cluster_map: The cluster_map of this CreateSimSearch.  # noqa: E501
        :type cluster_map: object
        """
        if self.local_vars_configuration.client_side_validation and cluster_map is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_map`, must not be `None`")  # noqa: E501

        self._cluster_map = cluster_map

    @property
    def distance_metric(self):
        """Gets the distance_metric of this CreateSimSearch.  # noqa: E501


        :return: The distance_metric of this CreateSimSearch.  # noqa: E501
        :rtype: SimSearchDistanceMetric
        """
        return self._distance_metric

    @distance_metric.setter
    def distance_metric(self, distance_metric):
        """Sets the distance_metric of this CreateSimSearch.


        :param distance_metric: The distance_metric of this CreateSimSearch.  # noqa: E501
        :type distance_metric: SimSearchDistanceMetric
        """

        self._distance_metric = distance_metric

    @property
    def job_description(self):
        """Gets the job_description of this CreateSimSearch.  # noqa: E501


        :return: The job_description of this CreateSimSearch.  # noqa: E501
        :rtype: str
        """
        return self._job_description

    @job_description.setter
    def job_description(self, job_description):
        """Sets the job_description of this CreateSimSearch.


        :param job_description: The job_description of this CreateSimSearch.  # noqa: E501
        :type job_description: str
        """

        self._job_description = job_description

    @property
    def job_title(self):
        """Gets the job_title of this CreateSimSearch.  # noqa: E501


        :return: The job_title of this CreateSimSearch.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this CreateSimSearch.


        :param job_title: The job_title of this CreateSimSearch.  # noqa: E501
        :type job_title: str
        """
        if (self.local_vars_configuration.client_side_validation and
                job_title is not None and len(job_title) < 1):
            raise ValueError("Invalid value for `job_title`, length must be greater than or equal to `1`")  # noqa: E501

        self._job_title = job_title

    @property
    def n_neighbors(self):
        """Gets the n_neighbors of this CreateSimSearch.  # noqa: E501


        :return: The n_neighbors of this CreateSimSearch.  # noqa: E501
        :rtype: int
        """
        return self._n_neighbors

    @n_neighbors.setter
    def n_neighbors(self, n_neighbors):
        """Sets the n_neighbors of this CreateSimSearch.


        :param n_neighbors: The n_neighbors of this CreateSimSearch.  # noqa: E501
        :type n_neighbors: int
        """

        self._n_neighbors = n_neighbors

    @property
    def persist(self):
        """Gets the persist of this CreateSimSearch.  # noqa: E501


        :return: The persist of this CreateSimSearch.  # noqa: E501
        :rtype: bool
        """
        return self._persist

    @persist.setter
    def persist(self, persist):
        """Sets the persist of this CreateSimSearch.


        :param persist: The persist of this CreateSimSearch.  # noqa: E501
        :type persist: bool
        """

        self._persist = persist

    @property
    def points_src(self):
        """Gets the points_src of this CreateSimSearch.  # noqa: E501


        :return: The points_src of this CreateSimSearch.  # noqa: E501
        :rtype: SearchQueryData
        """
        return self._points_src

    @points_src.setter
    def points_src(self, points_src):
        """Sets the points_src of this CreateSimSearch.


        :param points_src: The points_src of this CreateSimSearch.  # noqa: E501
        :type points_src: SearchQueryData
        """

        self._points_src = points_src

    @property
    def reduction_method(self):
        """Gets the reduction_method of this CreateSimSearch.  # noqa: E501


        :return: The reduction_method of this CreateSimSearch.  # noqa: E501
        :rtype: SimSearchReductionMethod
        """
        return self._reduction_method

    @reduction_method.setter
    def reduction_method(self, reduction_method):
        """Sets the reduction_method of this CreateSimSearch.


        :param reduction_method: The reduction_method of this CreateSimSearch.  # noqa: E501
        :type reduction_method: SimSearchReductionMethod
        """

        self._reduction_method = reduction_method

    @property
    def reduction_size(self):
        """Gets the reduction_size of this CreateSimSearch.  # noqa: E501


        :return: The reduction_size of this CreateSimSearch.  # noqa: E501
        :rtype: int
        """
        return self._reduction_size

    @reduction_size.setter
    def reduction_size(self, reduction_size):
        """Sets the reduction_size of this CreateSimSearch.


        :param reduction_size: The reduction_size of this CreateSimSearch.  # noqa: E501
        :type reduction_size: int
        """

        self._reduction_size = reduction_size

    @property
    def search_quality(self):
        """Gets the search_quality of this CreateSimSearch.  # noqa: E501


        :return: The search_quality of this CreateSimSearch.  # noqa: E501
        :rtype: ScenarioSearchQuality
        """
        return self._search_quality

    @search_quality.setter
    def search_quality(self, search_quality):
        """Sets the search_quality of this CreateSimSearch.


        :param search_quality: The search_quality of this CreateSimSearch.  # noqa: E501
        :type search_quality: ScenarioSearchQuality
        """

        self._search_quality = search_quality

    @property
    def search_space(self):
        """Gets the search_space of this CreateSimSearch.  # noqa: E501


        :return: The search_space of this CreateSimSearch.  # noqa: E501
        :rtype: str
        """
        return self._search_space

    @search_space.setter
    def search_space(self, search_space):
        """Sets the search_space of this CreateSimSearch.


        :param search_space: The search_space of this CreateSimSearch.  # noqa: E501
        :type search_space: str
        """
        if self.local_vars_configuration.client_side_validation and search_space is None:  # noqa: E501
            raise ValueError("Invalid value for `search_space`, must not be `None`")  # noqa: E501

        self._search_space = search_space

    @property
    def tunables(self):
        """Gets the tunables of this CreateSimSearch.  # noqa: E501


        :return: The tunables of this CreateSimSearch.  # noqa: E501
        :rtype: PlotRequestTunables
        """
        return self._tunables

    @tunables.setter
    def tunables(self, tunables):
        """Sets the tunables of this CreateSimSearch.


        :param tunables: The tunables of this CreateSimSearch.  # noqa: E501
        :type tunables: PlotRequestTunables
        """
        if self.local_vars_configuration.client_side_validation and tunables is None:  # noqa: E501
            raise ValueError("Invalid value for `tunables`, must not be `None`")  # noqa: E501

        self._tunables = tunables

    @property
    def use_patch_restriction(self):
        """Gets the use_patch_restriction of this CreateSimSearch.  # noqa: E501


        :return: The use_patch_restriction of this CreateSimSearch.  # noqa: E501
        :rtype: bool
        """
        return self._use_patch_restriction

    @use_patch_restriction.setter
    def use_patch_restriction(self, use_patch_restriction):
        """Sets the use_patch_restriction of this CreateSimSearch.


        :param use_patch_restriction: The use_patch_restriction of this CreateSimSearch.  # noqa: E501
        :type use_patch_restriction: bool
        """

        self._use_patch_restriction = use_patch_restriction

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSimSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateSimSearch):
            return True

        return self.to_dict() != other.to_dict()
