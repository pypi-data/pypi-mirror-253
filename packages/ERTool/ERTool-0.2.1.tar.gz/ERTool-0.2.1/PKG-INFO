Metadata-Version: 2.1
Name: ERTool
Version: 0.2.1
Summary: A Python package for simple and efficient implementation of Evidential Reasoning (ER) methods.
Home-page: UNKNOWN
Author: Tongyue Shi
Author-email: tyshipku@gmail.com
License: UNKNOWN
Description: # ERTool
        
        <kbd>***ERTool***</kbd> is a Python package designed for simple and efficient implementation of Evidential Reasoning (ER) methods. It aims to provide an intuitive and flexible approach for integrating ER processes, particularly suitable for data analysis and decision support systems.
        
        ## Features
        
        - Easy-to-use implementation of Evidential Reasoning.
        - Efficient in handling complex ER tasks.
        - Flexible interface suitable for various application scenarios.
        
        ## Installation
        
        You can install <kbd>***ERTool***</kbd> directly from PyPI using pip:
        
        ```
        pip install ertool
        ```
        
        ## Using Instruction
        
        ### er_algorithm
        
        ```python
        ertool.er.er_algorithm(W, DBF, numOfEvidence, numOfProposition)
        ```
        <kbd>er_algorithm()</kbd> can implement the Evidential Reasoning (ER) algorithm.
        
        #### Input Variables
        - ***W***: A one-dimensional array of floats. It represents the weights of each piece of evidence. These weights are used in the algorithm to adjust the influence of each evidence.
        - ***DBF***: A two-dimensional array of floats. It stands for "Degrees of Belief" and is one of the main inputs to the algorithm, used to represent the initial belief degree of each proposition supported by each evidence.
        - ***numOfEvidence***: An integer. It indicates the number of evidence to be combined. In the DBF array, this typically corresponds to the number of rows.
        - ***numOfProposition***: An integer. It indicates the number of propositions or evidential grades. In the DBF array, this typically corresponds to the number of columns.
        
        #### Output Values
        - ***B Array***: Upon completion of the algorithm, the B array is updated with the final calculation results. It reflects the degree of belief of each proposition or evidential grades for the object being assessed after combining all availble evidence. The pre-Numofproposition values in the B represent the belief degree of each proposition after evidence fusion. The last value of the B represents the belief degree of the global uncertainty.
        - ***False (Boolean)***: It returns True if the algorithm successfully executes and completes all computations. If any error is encountered during execution (e.g., division by zero), it returns False.
        
        
        ### dempster_shafer
        ```python
        ertool.er.dempster_shafer(DBF, numOfEvidence, numOfProposition)
        ```
        
        <kbd>dempster_shafer()</kbd> can implement the original Dempster-Shafer evidence theory.
        
        #### Input Variables
        - ***DBF***: A two-dimensional array of floats. It stands for "Degrees of Belief" and is one of the main inputs to the algorithm, used to represent the initial belief degree of each proposition supported by each evidence. The pre-Numofproposition values in the B represent the belief degree of each proposition after evidence fusion. The last value of the B represents the belief degree of the global uncertainty.
        - ***numOfEvidence***: An integer. It indicates the number of evidence to be combined. In the DBF array, this typically corresponds to the number of rows.
        - ***numOfProposition***: An integer. It indicates the number of propositions or evidential grades. In the DBF array, this typically corresponds to the number of columns.
        
        #### Output Values
        - ***B Array***: Upon completion of the algorithm, the B array is updated with the final calculation results. It reflects the degree of belief of each proposition or evidential grades for the object being assessed after combining all availble evidence.
        - ***False (Boolean)***: It returns True if the algorithm successfully executes and completes all computations. If any error is encountered during execution (e.g., division by zero), it returns False.
        
        
        ### show_er_result
        
        ```python
        ertool.er.show_er_result(B, P = None)
        ```
        <kbd>er.show_er_result()</kbd> can visualize the result of evidential reasoning algorithm.
        
        #### Input Variables
        - ***B***: The ER result of belief degree.
        - ***P***: The name array of propositions.
        
        
        ## Quick Start
        Here is a basic usage example of <kbd>***ERTool***</kbd>.
        
        Consider a medical scenario. 
        There are three medical experts (weights 10, 8, and 5). For one patient, the three experts rated the different likelihood of the diagnosis of cold, common pneumonia, COVID-19, and other diseases. As shown in the table.
        
        | Experts & Diseases | Expert 1 | Expert 2 | Expert 3 |
        | :---:        |    :----:   |  :---: |  :---: |
        | Cold | 90% | 0 | 0 |
        | Common Pneumonia |0 | 90% | 0|
        | COVID-19 | 0 | 0 | 90% |
        | Other Diseases | 10% | 10% | 10% |
        
        In this case, the ***numOfEvidence*** is 3 (the number of experts) and the ***numOfProposition*** is 4 (cold, common pneumonia, COVID-19, and other diseases).
        
        The ***W*** array is the weights array of every expert and the <kbd>***ERTool***</kbd> package can normalize them automatically.
        
        We can write the code using the <kbd>***ERTool***</kbd> package:
        
        ```python
        from ertool import er
        import numpy as np
        
        W = np.array([10,8,5])
        DBF = np.array([[0.9, 0, 0, 0.1], 
                        [0, 0.9, 0, 0.1], 
                        [0, 0, 0.9, 0.1]])
        
        # List or numpy array are both OK.
        # W = [10,8,5]
        # DBF = [[0.9, 0, 0, 0.1], 
        #        [0, 0.9, 0, 0.1], 
        #        [0, 0, 0.9, 0.1]]
        
        numOfEvidence = 3
        numOfProposition = 4
        B = er.er_algorithm(W, DBF, numOfEvidence, numOfProposition)
        print("The result:", B)
        
        P = ['Cold', 'Common Pneumonia', 'COVID-19', 'Other Disease']
        er.show_er_result(B, P)
        ```
        With the code, we can calculate the probability that the patient will be diagnosed with each disease using evidential reasoning.
        
        ```
        B: [0.43591353 0.30223338 0.15741322 0.10443986 0.]
        ```
        [![pFeiJgK.png](https://s11.ax1x.com/2024/01/23/pFeiJgK.png)](https://imgse.com/i/pFeiJgK)
        According to the result, we can know that combining the opinions of the three experts, the probability of the patient being diagnosed with cold, common pneumonia, COVID-19 and uncertain are 0.43591353, 0.30223338, 0.15741322 and 0.10443986. The global uncertainty is the last value of B, and it is zero in this example.
        
        
        ## Contributing
        Contributions to <kbd>***ERTool***</kbd> are welcome. Please contact us for how to contribute to the project.
        
        ## Contact
        This project is supported by the **[National Institute of Health Data Science](https://www.nihds.pku.edu.cn/en/), [Peking University](https://english.pku.edu.cn/)**. For any questions or suggestions, please contact us at *tyshipku@gmail.com*. 
Platform: UNKNOWN
Description-Content-Type: text/markdown
