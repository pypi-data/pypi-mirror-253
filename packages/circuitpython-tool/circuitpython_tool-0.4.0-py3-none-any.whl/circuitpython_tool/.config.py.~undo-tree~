(undo-tree-save-format-version . 1)
"4f8e9afd080ef86d30cc127039acb87225c6876d"
[nil nil nil nil (26025 46507 276557 413000) 0 nil]
([nil nil ((#("@dataclass
class SourceTree:
    source_dirs: list[Path]

    @staticmethod
    def from_toml(dirs: Iterable[str]) -> \"SourceTree\":
        return SourceTree([Path(d) for d in dirs])

    def to_toml(self) -> list[str]:
        return [str(p) for p in self.source_dirs]
" 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t) 11 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 27 (face font-lock-type-face fontified t) 27 46 (fontified t) 46 50 (face font-lock-builtin-face fontified t) 50 63 (fontified t) 63 75 (face font-lock-builtin-face fontified t) 75 80 (fontified t) 80 83 (face font-lock-keyword-face fontified t) 83 84 (fontified t) 84 93 (face font-lock-function-name-face fontified t) 93 109 (fontified t) 109 112 (face font-lock-builtin-face fontified t) 112 115 (fontified t) 115 116 (face font-lock-operator-face fontified t) 116 117 (face font-lock-operator-face fontified t) 117 118 (fontified t) 118 130 (face font-lock-string-face fontified t) 130 140 (fontified t) 140 146 (face font-lock-keyword-face fontified t) 146 167 (fontified t) 167 170 (face font-lock-keyword-face fontified t) 170 173 (fontified t) 173 175 (face font-lock-keyword-face fontified t) 175 188 (fontified t) 188 191 (face font-lock-keyword-face fontified t) 191 192 (fontified t) 192 199 (face font-lock-function-name-face fontified t) 199 200 (fontified t) 200 204 (face font-lock-keyword-face fontified t) 204 206 (fontified t) 206 207 (face font-lock-operator-face fontified t) 207 208 (face font-lock-operator-face fontified t) 208 209 (fontified t) 209 213 (face font-lock-builtin-face fontified t) 213 214 (fontified t) 214 217 (face font-lock-builtin-face fontified t) 217 228 (fontified t) 228 234 (face font-lock-keyword-face fontified t) 234 236 (fontified t) 236 239 (face font-lock-builtin-face fontified t) 239 243 (fontified t) 243 246 (face font-lock-keyword-face fontified t) 246 249 (fontified t) 249 251 (face font-lock-keyword-face fontified t) 251 252 (fontified t) 252 256 (face font-lock-keyword-face fontified t) 256 270 (fontified t)) . 365) (undo-tree-id86 . -23) (undo-tree-id87 . -270) (undo-tree-id88 . -23) (undo-tree-id89 . -23) (undo-tree-id90 . -23) (undo-tree-id91 . -23) (undo-tree-id92 . -10) (undo-tree-id93 . -270) (undo-tree-id94 . -270) 635 (t 26025 31617 779487 543000)) nil (26025 46507 276556 590000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -363) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("
" 0 1 (fontified t)) . -364) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 365) nil (26025 46507 276554 509000) 0 nil])
([nil nil ((#("    source_trees: dict[str, SourceTree]" 0 18 (fontified t) 18 22 (face font-lock-builtin-face fontified t) 22 23 (fontified t) 23 26 (face font-lock-builtin-face fontified t) 26 39 (fontified t)) . 669) (undo-tree-id50 . -10) (undo-tree-id51 . -10) (undo-tree-id52 . -10) (undo-tree-id53 . -10) (undo-tree-id54 . -10) (undo-tree-id55 . -39)) nil (26025 46507 276487 639000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -668) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 669) nil (26025 46507 276486 510000) 0 nil])
([nil nil ((#("        config.source_trees = {
            k: SourceTree.from_toml(v)
            for k, v in document.get(\"source_trees\", tomlkit.table()).items()
        }
" 0 15 (fontified t) 15 27 (face font-lock-variable-name-face fontified t) 27 28 (fontified t) 28 29 (face font-lock-operator-face fontified t) 29 83 (fontified t) 83 86 (face font-lock-keyword-face fontified t) 86 92 (fontified t) 92 94 (face font-lock-keyword-face fontified t) 94 108 (fontified t) 108 122 (face font-lock-string-face fontified t) 122 159 (fontified t)) . 937) (undo-tree-id26 . -8) (undo-tree-id27 . -8) (undo-tree-id28 . -8) (undo-tree-id29 . -30) (undo-tree-id30 . -8) (undo-tree-id31 . -8) (undo-tree-id32 . -8) (undo-tree-id33 . -30) (undo-tree-id34 . -21) (undo-tree-id35 . -159) (undo-tree-id36 . -21) (undo-tree-id37 . -21) (undo-tree-id38 . -21) (undo-tree-id39 . -21) (undo-tree-id40 . -159) (undo-tree-id41 . -159) 1096) nil (26025 46507 276484 652000) 0 nil])
([nil nil ((#("        document[\"source_trees\"] = {
            k: v.to_toml() for k, v in self.source_trees.items()
        }" 0 8 (fontified t) 8 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 31 (face font-lock-string-face fontified t) 31 33 (fontified t) 33 34 (face font-lock-operator-face fontified t) 34 64 (fontified t) 64 67 (face font-lock-keyword-face fontified t) 67 73 (fontified t) 73 75 (face font-lock-keyword-face fontified t) 75 76 (fontified t) 76 80 (face font-lock-keyword-face fontified t) 80 111 (fontified t)) . 1255) (undo-tree-id16 . -35) (undo-tree-id17 . -24) (undo-tree-id18 . -111) (undo-tree-id19 . -24) (undo-tree-id20 . -24) (undo-tree-id21 . -24) (undo-tree-id22 . -24) (undo-tree-id23 . -102) (undo-tree-id24 . -111) (undo-tree-id25 . -111) 1366) nil (26025 46507 276481 3000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1254) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 1255) nil (26025 46507 276475 538000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -769) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#(" " 0 1 (fontified t)) . -770) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("{" 0 1 (fontified t)) . -771) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("}" 0 1 (fontified t)) . -772) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 773 (t 26025 46507 282842 725000)) nil (26025 46638 350071 608000) 0 nil])
([nil nil ((#("Iterable" 0 8 (fontified t)) . 44) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -8) (t 26025 46638 354775 931000)) nil (26025 46648 381106 248000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -43) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) 44) nil (26025 46648 381104 677000) 0 nil])
([nil current ((#("," 0 1 (fontified t)) . -43) (undo-tree-id109 . -1) (undo-tree-id110 . -1) 44) nil (26025 46648 381100 253000) 0 nil])
nil
