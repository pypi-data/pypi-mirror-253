(undo-tree-save-format-version . 1)
"6fc706c6d8b31481d22c5cddbf23d4992f4077fd"
[nil nil nil nil (26028 12764 419031 961000) 0 nil]
([nil nil ((209 . 210) (t 26028 9073 486441 639000)) nil (26028 12764 419031 236000) 0 nil])
([nil nil ((nil rear-nonsticky nil 222 . 223) (nil fontified nil 210 . 223) (210 . 223)) nil (26028 12764 419030 984000) 0 nil])
([nil nil ((#("\"Source code\"" 0 12 (face font-lock-string-face fontified t) 12 13 (face font-lock-string-face rear-nonsticky t fontified t)) . 210) (undo-tree-id8 . -13) (undo-tree-id9 . -13)) nil (26028 12764 419030 369000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -209) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 210) nil (26028 12764 419029 501000) 0 nil])
([nil nil ((359 . 360)) nil (26028 12764 419027 773000) 0 nil])
([nil nil ((359 . 360)) nil (26028 12764 419027 608000) 0 nil])
([nil nil ((360 . 369)) nil (26028 12764 419027 460000) 0 nil])
([nil nil ((#("/" 0 1 (face (font-lock-type-face) fontified t)) . -368) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 369) nil (26028 12764 419026 909000) 0 nil])
([nil nil ((368 . 374)) nil (26028 12764 419017 563000) 0 nil])
([nil nil ((374 . 375)) nil (26028 12764 419017 383000) 0 nil])
([nil nil ((nil fontified nil 387 . 388) (nil fontified nil 375 . 387) (375 . 388)) nil (26028 12764 419017 214000) 0 nil])
([nil nil ((388 . 391)) nil (26028 12764 419016 955000) 0 nil])
([nil nil ((nil rear-nonsticky nil 434 . 435) (nil fontified nil 391 . 435) (391 . 435)) nil (26028 12764 419016 711000) 0 nil])
([nil nil ((435 . 436)) nil (26028 12764 419016 284000) 0 nil])
([nil nil ((391 . 392)) nil (26028 12764 419013 684000) 0 nil])
([nil nil ((209 . 210) (t 26028 12764 421533 746000)) nil (26028 12866 381651 60000) 0 nil])
([nil nil ((210 . 231)) nil (26028 12866 381650 687000) 0 nil])
([nil nil ((231 . 235)) nil (26028 12866 381648 5000) 0 nil])
([nil nil ((235 . 236) (t 26028 12866 381646 412000)) nil (26028 13093 15924 637000) 0 nil])
([nil nil ((236 . 247)) nil (26028 13093 15924 482000) 0 nil])
([nil nil ((247 . 257)) nil (26028 13093 15924 361000) 0 nil])
([nil nil ((#("readme = \"docs/README.md\"
dynamic = [\"version\"]" 0 6 (face font-lock-variable-name-face fontified t) 6 9 (fontified t) 9 25 (face font-lock-string-face fontified t) 25 26 (fontified t) 26 33 (face font-lock-variable-name-face fontified t) 33 37 (fontified t) 37 46 (face font-lock-string-face fontified t) 46 47 (fontified t)) . 210) (undo-tree-id19 . -25) (undo-tree-id20 . -25) (undo-tree-id21 . -25) (undo-tree-id22 . -25) (undo-tree-id23 . -47) 257) nil (26028 13093 15924 83000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -209) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 210) nil (26028 13093 15922 791000) 0 nil])
([nil nil ((282 . 283)) nil (26028 13093 15921 402000) 0 nil])
([nil nil ((nil rear-nonsticky nil 329 . 330) (nil fontified nil 329 . 330) (nil fontified nil 320 . 329) (nil fontified nil 316 . 320) (nil fontified nil 309 . 316) (nil fontified nil 308 . 309) (nil fontified nil 292 . 308) (nil fontified nil 289 . 292) (nil fontified nil 283 . 289) (283 . 330)) nil (26028 13093 15921 123000) 0 nil])
([nil nil ((330 . 331)) nil (26028 13093 15920 747000) 0 nil])
([nil nil ((553 . 554)) nil (26028 13093 15920 505000) 0 nil])
([nil nil ((553 . 554)) nil (26028 13093 15920 372000) 0 nil])
([nil nil ((554 . 574)) nil (26028 13093 15920 248000) 0 nil])
([nil nil ((574 . 575)) nil (26028 13093 15920 61000) 0 nil])
([nil nil ((#("version = \"0.1.0\"" 0 7 (face font-lock-variable-name-face fontified t) 7 10 (fontified t) 10 17 (face font-lock-string-face fontified t)) . 114) (undo-tree-id12 . -4)) nil (26028 13093 15919 622000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -113) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 114) nil (26028 13093 15917 56000) 0 nil])
([nil nil ((557 . 562) (t 26028 13093 17802 879000)) nil (26028 13124 179399 410000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -561) (undo-tree-id43 . -1) 562) nil (26028 13124 179399 81000) 0 nil])
([nil nil ((561 . 565)) nil (26028 13124 179398 668000) 0 nil])
([nil nil ((565 . 572)) nil (26028 13124 179398 491000) 0 nil])
([nil nil ((565 . 572) (#("src/cir" 0 7 (face font-lock-string-face fontified t)) . -565) (undo-tree-id42 . -7) 572) nil (26028 13124 179398 263000) 0 nil])
([nil nil ((565 . 572) (#("src/cir" 0 7 (face font-lock-string-face fontified t)) . -565) (undo-tree-id30 . -7) (undo-tree-id31 . -7) (undo-tree-id32 . -7) (undo-tree-id33 . -7) (undo-tree-id34 . -7) (undo-tree-id35 . -7) (undo-tree-id36 . -7) (undo-tree-id37 . -7) (undo-tree-id38 . -7) (undo-tree-id39 . -7) (undo-tree-id40 . -7) (undo-tree-id41 . -7) 572) nil (26028 13124 179397 476000) 0 nil])
([nil nil ((572 . 593)) nil (26028 13124 179344 498000) 0 nil])
([nil nil ((593 . 596)) nil (26028 13124 179344 175000) 0 nil])
([nil nil ((596 . 599)) nil (26028 13124 179343 890000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face fontified t)) . -597) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -598) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 599) nil (26028 13124 179343 342000) 0 nil])
([nil nil ((597 . 600)) nil (26028 13837 16635 600000) 0 nil])
([nil nil ((39 . 41) (t 26028 13124 181791 913000)) nil (26028 14148 330332 289000) 0 nil] [nil nil ((nil rear-nonsticky nil 459 . 460) (nil fontified nil 435 . 460) (435 . 460) (t 26028 13124 181791 913000)) ((#("\"hatch-fancy-pypi-readme\"" 0 1 (face font-lock-string-face fontified nil) 1 24 (fontified nil) 24 25 (face font-lock-string-face rear-nonsticky nil fontified nil)) . 435) (undo-tree-id44 . -25) (nil rear-nonsticky t 459 . 460)) (26028 13837 16498 453000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -39) (undo-tree-id94 . -1) (#(" " 0 1 (fontified t)) . -40) (undo-tree-id95 . -1) 41) nil (26028 14148 330332 57000) 0 nil])
nil
([nil nil ((39 . 55)) nil (26028 14148 330331 557000) 0 nil])
([nil nil ((55 . 56)) nil (26028 14148 330331 359000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face fontified t)) . -55) (undo-tree-id93 . -1) 56) nil (26028 14148 330331 135000) 0 nil])
([nil nil ((55 . 66)) nil (26028 14148 330330 834000) 0 nil])
([nil nil ((329 . 330)) nil (26028 14148 330330 568000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -329) (undo-tree-id92 . -1) 330) nil (26028 14148 330330 333000) 0 nil])
([nil nil ((329 . 336)) nil (26028 14148 330330 17000) 0 nil])
([nil nil ((336 . 339)) nil (26028 14148 330329 910000) 0 nil])
([nil nil ((#("readme = \"docs/README.md\"" 0 6 (face font-lock-variable-name-face fontified t) 6 9 (fontified t) 9 25 (face font-lock-string-face fontified t)) . 292)) nil (26028 14148 330329 772000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -291) (undo-tree-id90 . -1) (undo-tree-id91 . -1) 292) nil (26028 14148 330329 597000) 0 nil])
([nil nil ((480 . 481)) nil (26028 14148 330327 874000) 0 nil])
([nil nil ((480 . 481)) nil (26028 14148 330327 762000) 0 nil])
([nil nil ((481 . 492)) nil (26028 14148 330327 658000) 0 nil])
([nil nil ((#("v" 0 1 (face (font-lock-type-face) fontified t)) . -490) (undo-tree-id88 . -1) (#("h" 0 1 (face (font-lock-type-face) fontified t)) . -491) (undo-tree-id89 . -1) 492) nil (26028 14148 330327 411000) 0 nil])
([nil nil ((490 . 493)) nil (26028 14148 330326 849000) 0 nil])
([nil nil ((#("/" 0 1 (face (font-lock-type-face) fontified t)) . -492) (undo-tree-id87 . -1) 493) nil (26028 14148 330326 446000) 0 nil])
([nil nil ((492 . 508)) nil (26028 14148 330326 96000) 0 nil])
([nil nil ((#("f" 0 1 (face (font-lock-type-face) fontified t)) . -507) (undo-tree-id86 . -1) 508) nil (26028 14148 330325 573000) 0 nil])
([nil nil ((507 . 517)) nil (26028 14148 330325 201000) 0 nil])
([nil nil ((#("u" 0 1 (face (font-lock-type-face) fontified t)) . -515) (undo-tree-id84 . -1) (#("p" 0 1 (face (font-lock-type-face) fontified t)) . -516) (undo-tree-id85 . -1) 517) nil (26028 14148 330324 908000) 0 nil])
([nil nil ((515 . 516)) nil (26028 14148 330323 423000) 0 nil])
([nil nil ((#("u" 0 1 (face (font-lock-type-face) fontified t)) . -515) (undo-tree-id83 . -1) 516) nil (26028 14148 330323 206000) 0 nil])
([nil nil ((515 . 518)) nil (26028 14148 330322 825000) 0 nil])
([nil nil ((518 . 526)) nil (26028 14148 330322 616000) 0 nil])
([nil nil ((526 . 527)) nil (26028 14148 330322 478000) 0 nil])
([nil nil ((527 . 548)) nil (26028 14148 330322 372000) 0 nil])
([nil nil ((548 . 557)) nil (26028 14148 330322 206000) 0 nil])
([nil nil ((557 . 559)) nil (26028 14148 330322 25000) 0 nil])
([nil nil ((559 . 580)) nil (26028 14148 330321 908000) 0 nil])
([nil nil ((580 . 601)) nil (26028 14148 330321 797000) 0 nil])
([nil nil ((601 . 616)) nil (26028 14148 330321 651000) 0 nil])
([nil nil ((616 . 617)) nil (26028 14148 330321 522000) 0 nil])
([nil nil ((617 . 623)) nil (26028 14148 330321 416000) 0 nil])
([nil nil ((623 . 640)) nil (26028 14148 330321 309000) 0 nil])
([nil nil ((640 . 641)) nil (26028 14148 330321 92000) 0 nil])
([nil nil ((641 . 650)) nil (26028 14148 330320 886000) 0 nil])
([nil nil ((650 . 651)) nil (26028 14148 330320 663000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -649) (undo-tree-id81 . -1) (#(" " 0 1 (fontified t)) . -650) (undo-tree-id82 . -1) 651) nil (26028 14148 330320 460000) 0 nil])
([nil nil ((649 . 651)) nil (26028 14148 330319 826000) 0 nil])
([nil nil ((651 . 659)) nil (26028 14148 330319 687000) 0 nil])
([nil nil ((#("images/" 0 7 (face font-lock-string-face fontified t)) . 652)) nil (26028 14148 330319 547000) 0 nil])
([nil nil ((640 . 641)) nil (26028 14148 330319 410000) 0 nil])
([nil nil ((nil rear-nonsticky nil 685 . 686) (nil fontified nil 641 . 686) (641 . 686)) nil (26028 14148 330319 161000) 0 nil])
([nil nil ((#("pattern = \"" 0 7 (face font-lock-variable-name-face fontified t) 7 10 (fontified t) 10 11 (face font-lock-string-face fontified t)) . 687) (undo-tree-id74 . -10) (undo-tree-id75 . -10) (undo-tree-id76 . -10) (undo-tree-id77 . -10) (undo-tree-id78 . -10) (undo-tree-id79 . -10) (undo-tree-id80 . -10)) nil (26028 14148 330318 889000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -686) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) 687) nil (26028 14148 330317 414000) 0 nil])
([nil nil ((686 . 696)) nil (26028 14148 330315 920000) 0 nil])
([nil nil ((696 . 704)) nil (26028 14148 330315 801000) 0 nil])
([nil nil ((#("]" 0 1 (face font-lock-string-face fontified t)) . -701) (undo-tree-id63 . -1) (#("\\" 0 1 (face font-lock-string-face fontified t)) . -702) (undo-tree-id64 . -1) (#("1" 0 1 (face font-lock-string-face fontified t)) . -703) (undo-tree-id65 . -1) 704) nil (26028 14148 330315 447000) 0 nil])
([nil nil ((701 . 706)) nil (26028 14148 330176 737000) 0 nil])
([nil nil ((706 . 707)) nil (26028 14148 330176 396000) 0 nil])
([nil nil ((707 . 708)) nil (26028 14148 330176 250000) 0 nil])
([nil nil ((708 . 709)) nil (26028 14148 330175 779000) 0 nil])
([nil nil ((nil rear-nonsticky nil 796 . 797) (nil fontified nil 709 . 797) (709 . 797)) nil (26028 14148 330175 493000) 0 nil])
([nil nil ((797 . 798)) nil (26028 14148 330175 320000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -706) (undo-tree-id62 . -1) 707) nil (26028 14148 330175 156000) 0 nil])
([nil nil ((706 . 707)) nil (26028 14148 330174 800000) 0 nil])
([nil nil ((706 . 727)) nil (26028 14148 330174 689000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -726) (undo-tree-id61 . -1) 727) nil (26028 14148 330174 544000) 0 nil])
([nil nil ((726 . 747)) nil (26028 14148 330174 41000) 0 nil])
([nil nil ((747 . 751)) nil (26028 14148 330173 886000) 0 nil])
([nil nil ((736 . 765) (#("com/dhrosa/circ" 0 15 (face font-lock-string-face fontified t)) . -736) (undo-tree-id60 . -15) 751) nil (26028 14148 330173 717000) 0 nil])
([nil nil ((765 . 781)) nil (26028 14148 330173 299000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -781) (undo-tree-id59 . -1) 782) nil (26028 14148 330173 28000) 0 nil])
([nil nil ((781 . 782)) nil (26028 14148 330172 656000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-string-face fontified t)) . -781) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 782) nil (26028 14148 330172 398000) 0 nil])
([nil nil ((781 . 783)) nil (26028 14148 330171 806000) 0 nil])
([nil nil ((#("\"https://raw.githubusercontent.com/dhrosa/circuitpython_tool/main/docs/images/devices.svg\"" 0 1 (face font-lock-string-face fontified t) 1 88 (face font-lock-string-face fontified t) 88 89 (face font-lock-string-face fontified t rear-nonsticky t) 89 90 (face font-lock-string-face fontified t)) . 784) (undo-tree-id52 . -1) (undo-tree-id53 . -30) (undo-tree-id54 . -30) (undo-tree-id55 . -4) (undo-tree-id56 . -90)) nil (26028 14148 330171 378000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -783) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 784) nil (26028 14148 330167 748000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -700) (undo-tree-id105 . -1) (undo-tree-id106 . -1) 701 (t 26028 14148 334252 507000)) nil (26028 14193 410522 43000) 0 nil])
([nil nil ((700 . 702)) nil (26028 14193 410521 206000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . -701) (undo-tree-id103 . -1) (undo-tree-id104 . -1) 702) nil (26028 14193 410520 541000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -782) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) 783) nil (26028 14193 410328 151000) 0 nil])
([nil nil ((782 . 783)) nil (26028 14277 977034 470000) 0 nil])
([nil nil ((#("pattern = '\\[(.+?)\\]\\(((?!https?://)\\S+?)\\)'
replacement = '[\\1](https://raw.githubusercontent.com/dhrosa/circuitpython_tool/tree/main/\\g<2>)'
" 0 7 (face font-lock-variable-name-face fontified t) 7 10 (fontified t) 10 44 (face font-lock-string-face fontified t) 44 45 (rear-nonsticky t fontified t) 45 56 (face font-lock-variable-name-face fontified t) 56 59 (fontified t) 59 60 (face font-lock-string-face fontified t) 60 95 (face font-lock-string-face fontified t) 95 142 (face font-lock-string-face fontified t) 142 143 (fontified t)) . 641) (undo-tree-id207 . -45) (undo-tree-id208 . -45) (undo-tree-id209 . -45) (undo-tree-id210 . -45) (undo-tree-id211 . -45) (undo-tree-id212 . -45) (undo-tree-id213 . -143) (undo-tree-id214 . -141) (undo-tree-id215 . -142) (undo-tree-id216 . -142) (undo-tree-id217 . -142) (undo-tree-id218 . -24) (undo-tree-id219 . -24) (undo-tree-id220 . -24) (undo-tree-id221 . -24) (undo-tree-id222 . -24) (undo-tree-id223 . -24) (undo-tree-id224 . -138) (undo-tree-id225 . -143) (undo-tree-id226 . -143) (undo-tree-id227 . -143) 784) nil (26028 14325 276190 118000) 0 nil] [nil nil ((apply -4 641 788 undo--wrap-and-run-primitive-undo 641 788 ((688 . 690) (641 . 643) 783))) ((apply 4 641 784 undo--wrap-and-run-primitive-undo 641 784 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . 641) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . 688) 787))) (26028 14275 307267 591000) 0 nil])
([nil nil ((641 . 642)) nil (26028 14325 276185 264000) 0 nil])
nil
([nil nil ((641 . 642)) nil (26028 14325 276185 72000) 0 nil])
([nil nil ((642 . 649)) nil (26028 14325 276184 851000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -642) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("p" 0 1 (fontified t)) . -643) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("t" 0 1 (fontified t)) . -644) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("o" 0 1 (fontified t)) . -645) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("o" 0 1 (fontified t)) . -646) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("l" 0 1 (fontified t)) . -647) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("." 0 1 (fontified t)) . -648) (undo-tree-id206 . -1) 649) nil (26028 14325 276184 84000) 0 nil])
([nil nil ((642 . 651)) nil (26028 14325 276176 377000) 0 nil])
([nil nil ((#("/" 0 1 (face (font-lock-type-face) fontified t)) . -650) (undo-tree-id177 . -1) (undo-tree-id178 . -1) 651) nil (26028 14325 276176 202000) 0 nil])
([nil nil ((649 . 682) (#("h" 0 1 (face (font-lock-type-face) fontified t)) . -649) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) 650) nil (26028 14325 276175 545000) 0 nil])
([nil nil ((649 . 697) (#("hooks.fancy-pypi-readme.fragments" 0 33 (face (font-lock-type-face) fontified t)) . -649) (undo-tree-id167 . -33) (undo-tree-id168 . -33) 682) nil (26028 14325 276173 724000) 0 nil])
([nil nil ((#("r" 0 1 (face (font-lock-type-face) fontified t)) . -689) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("a" 0 1 (face (font-lock-type-face) fontified t)) . -690) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("g" 0 1 (face (font-lock-type-face) fontified t)) . -691) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("m" 0 1 (face (font-lock-type-face) fontified t)) . -692) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#("e" 0 1 (face (font-lock-type-face) fontified t)) . -693) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("n" 0 1 (face (font-lock-type-face) fontified t)) . -694) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("t" 0 1 (face (font-lock-type-face) fontified t)) . -695) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("s" 0 1 (face (font-lock-type-face) fontified t)) . -696) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 697) nil (26028 14325 276172 555000) 0 nil])
([nil nil ((689 . 690)) nil (26028 14325 276056 801000) 0 nil])
([nil nil ((#("f" 0 1 (face (font-lock-type-face) fontified t)) . -688) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("s" 0 1 (face (font-lock-type-face) fontified t)) . -689) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 690) nil (26028 14325 276056 465000) 0 nil])
([nil nil ((688 . 703)) nil (26028 14325 276052 826000) 0 nil])
([nil nil ((703 . 704)) nil (26028 14325 276052 635000) 0 nil])
([nil nil ((nil rear-nonsticky nil 846 . 847) (nil fontified nil 846 . 847) (nil fontified nil 799 . 846) (nil fontified nil 764 . 799) (nil fontified nil 763 . 764) (nil fontified nil 760 . 763) (nil fontified nil 749 . 760) (nil fontified nil 748 . 749) (nil fontified nil 714 . 748) (nil fontified nil 711 . 714) (nil fontified nil 704 . 711) (704 . 847)) nil (26028 14325 276052 218000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -846) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 847) nil (26028 14325 276049 588000) 0 nil])
([nil nil ((846 . 847) (t 26028 14325 302407 321000)) nil (26028 14381 237750 775000) 0 nil])
([nil nil ((847 . 848)) nil (26028 14381 237750 583000) 0 nil])
([nil nil ((nil rear-nonsticky nil 935 . 936) (nil fontified nil 848 . 936) (848 . 936)) nil (26028 14381 237750 321000) 0 nil])
([nil nil ((936 . 937)) nil (26028 14381 237750 35000) 0 nil])
([nil nil ((#(":" 0 1 (face font-lock-string-face fontified t)) . -936) (undo-tree-id230 . -1) (undo-tree-id231 . -1) 937) nil (26028 14381 237749 796000) 0 nil])
([nil nil ((936 . 937)) nil (26028 14382 440990 673000) 0 nil])
([nil nil ((#("tree" 0 4 (face font-lock-string-face fontified t)) . 829) (undo-tree-id252 . -4)) nil (26028 14390 256390 906000) 0 nil] [nil nil ((#("tree" 0 4 (face font-lock-string-face fontified t)) . 829) (undo-tree-id229 . -4)) ((829 . 833)) (26028 14382 2925 482000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . -828) (undo-tree-id250 . -1) (undo-tree-id251 . -1) 829) nil (26028 14390 256390 406000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . -828) (undo-tree-id228 . -1) 829) ((828 . 829)) (26028 14381 237782 879000) 0 nil])
([nil nil ((834 . 838)) nil (26028 14390 256389 64000) 0 nil])
([nil nil ((834 . 839)) ((#("docs/" 0 5 (face font-lock-string-face fontified t)) . 834)) (26028 14381 237737 626000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-string-face fontified t)) . -835) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -836) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -837) (undo-tree-id248 . -1) (undo-tree-id249 . -1) 838) nil (26028 14390 256388 494000) 0 nil])
nil
([nil nil ((835 . 837)) nil (26028 14390 256385 922000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-string-face fontified t)) . -835) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -836) (undo-tree-id236 . -1) (undo-tree-id237 . -1) 837) nil (26028 14390 256385 318000) 0 nil])
([nil nil ((835 . 839)) nil (26028 14390 256373 152000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -846) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) 847 (t 26028 14390 258466 306000)) nil (26028 14394 377901 783000) 0 nil])
([nil nil ((#("\"https://raw.githubusercontent.com/dhrosa/circuitpython_tool/main/docs/images/devices.svg\"" 0 1 (face font-lock-string-face fontified t) 1 88 (face font-lock-string-face fontified t) 88 89 (face font-lock-string-face fontified t rear-nonsticky t) 89 90 (face font-lock-string-face fontified t)) . 846) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -90)) nil (26028 14394 377898 252000) 0 nil])
([nil nil ((480 . 481) (t 26028 14394 406470 104000)) nil (26028 14543 758453 140000) 0 nil])
([nil nil ((480 . 481)) nil (26028 14543 758452 794000) 0 nil])
([nil nil ((481 . 484)) nil (26028 14543 758452 339000) 0 nil])
([nil nil ((#("G" 0 1 (face font-lock-comment-face fontified t)) . -483) (undo-tree-id304 . -1) 484) nil (26028 14543 758451 937000) 0 nil])
([nil nil ((483 . 489)) nil (26028 14543 758451 332000) 0 nil])
([nil nil ((#("README" 0 6 (face font-lock-comment-face fontified t)) . 483)) nil (26028 14543 758450 989000) 0 nil])
([nil nil ((483 . 500)) nil (26028 14543 758450 673000) 0 nil])
([nil nil ((500 . 501)) nil (26028 14543 758450 404000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-comment-face fontified t)) . -500) (undo-tree-id303 . -1) 501) nil (26028 14543 758450 56000) 0 nil])
([nil nil ((500 . 506)) nil (26028 14543 758449 483000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-comment-face fontified t)) . -505) (undo-tree-id302 . -1) 506) nil (26028 14543 758449 193000) 0 nil])
([nil nil ((505 . 526)) nil (26028 14543 758448 556000) 0 nil])
([nil nil ((526 . 538)) nil (26028 14543 758448 104000) 0 nil])
([nil nil ((538 . 559)) nil (26028 14543 758447 839000) 0 nil])
([nil nil ((559 . 571)) nil (26028 14543 758447 589000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-comment-face fontified t)) . -569) (undo-tree-id300 . -1) (#("k" 0 1 (face font-lock-comment-face fontified t)) . -570) (undo-tree-id301 . -1) 571) nil (26028 14543 758447 138000) 0 nil])
([nil nil ((569 . 573)) nil (26028 14543 758446 14000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -572) (undo-tree-id298 . -1) (undo-tree-id299 . -1) 573) nil (26028 14543 758445 742000) 0 nil])
([nil nil ((572 . 576)) nil (26028 14543 758444 892000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-comment-face fontified t)) . -573) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -574) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -575) (undo-tree-id296 . -1) (undo-tree-id297 . -1) 576) nil (26028 14543 758444 136000) 0 nil])
([nil nil ((573 . 583)) nil (26028 14543 758439 736000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-comment-face fontified t)) . -582) (undo-tree-id284 . -1) (undo-tree-id285 . -1) 583) nil (26028 14543 758439 420000) 0 nil])
([nil nil ((582 . 589)) nil (26028 14543 758438 543000) 0 nil])
([nil nil ((558 . 560) (#(" " 0 1 (face font-lock-comment-face fontified nil)) . -558) (nil face nil 557 . 558) (557 . 558) 589) nil (26028 14543 758438 238000) 0 nil])
([nil nil ((#("github blobs." 0 13 (face font-lock-comment-face fontified t)) . 578) (undo-tree-id266 . -1) (undo-tree-id267 . -2) (undo-tree-id268 . -3) (undo-tree-id269 . -4) (undo-tree-id270 . -5) (undo-tree-id271 . -6) (undo-tree-id272 . -6) (undo-tree-id273 . -6) (undo-tree-id274 . -7) (undo-tree-id275 . -8) (undo-tree-id276 . -9) (undo-tree-id277 . -10) (undo-tree-id278 . -11) (undo-tree-id279 . -12) (undo-tree-id280 . -13) (undo-tree-id281 . -13) (undo-tree-id282 . -7) (undo-tree-id283 . -13)) nil (26028 14543 758437 503000) 0 nil])
([nil nil ((578 . 584)) nil (26028 14543 758430 423000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -583) (undo-tree-id264 . -1) (undo-tree-id265 . -1) 584) nil (26028 14543 758430 114000) 0 nil])
([nil nil ((583 . 589)) nil (26028 14543 758429 123000) 0 nil])
([nil nil ((589 . 593)) nil (26028 14543 758428 885000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-comment-face fontified t)) . -592) (undo-tree-id262 . -1) (undo-tree-id263 . -1) 593) nil (26028 14543 758428 552000) 0 nil])
([nil nil ((592 . 593)) nil (26028 14543 758427 476000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-comment-face fontified t)) . -592) (undo-tree-id260 . -1) (undo-tree-id261 . -1) 593) nil (26028 14543 758426 837000) 0 nil])
([nil nil ((592 . 602)) nil (26028 14543 758416 674000) 0 nil])
([nil nil ((#("TODO" 0 4 (face font-lock-string-face fontified t)) . 156) (undo-tree-id335 . -4) (t 26028 14543 762609 225000)) nil (26028 14754 711432 861000) 0 nil])
([nil nil ((156 . 158)) nil (26028 14754 711432 450000) 0 nil])
([nil nil ((158 . 179)) nil (26028 14754 711432 264000) 0 nil])
([nil nil ((179 . 183)) nil (26028 14754 711431 954000) 0 nil])
([nil nil ((183 . 195)) nil (26028 14754 711431 731000) 0 nil])
([nil nil ((#("CircuitPYthon" 0 13 (face font-lock-string-face fontified t)) . 174) (undo-tree-id321 . -1) (undo-tree-id322 . -2) (undo-tree-id323 . -3) (undo-tree-id324 . -4) (undo-tree-id325 . -5) (undo-tree-id326 . -6) (undo-tree-id327 . -7) (undo-tree-id328 . -8) (undo-tree-id329 . -9) (undo-tree-id330 . -10) (undo-tree-id331 . -11) (undo-tree-id332 . -12) (undo-tree-id333 . -13) (undo-tree-id334 . -13)) nil (26028 14754 711431 447000) 0 nil])
([nil nil ((174 . 187)) nil (26028 14754 711428 688000) 0 nil])
([nil nil ((156 . 162)) nil (26028 14754 711428 491000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t)) . -160) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -161) (undo-tree-id319 . -1) (undo-tree-id320 . -1) 162) nil (26028 14754 711428 205000) 0 nil])
([nil nil ((#("managing" 0 8 (face font-lock-string-face fontified t)) . 169) (undo-tree-id305 . -1) (undo-tree-id306 . -2) (undo-tree-id307 . -3) (undo-tree-id308 . -4) (undo-tree-id309 . -5) (undo-tree-id310 . -6) (undo-tree-id311 . -7) (undo-tree-id312 . -8) (undo-tree-id313 . -8) (undo-tree-id314 . -8)) nil (26028 14754 711426 678000) 0 nil])
([nil nil ((169 . 185)) nil (26028 14754 711417 929000) 0 nil])
([nil nil ((207 . 208)) nil (26028 14754 711414 830000) 0 nil])
([nil nil ((#("CLI" 0 3 (face font-lock-string-face fontified t)) . 156) (undo-tree-id344 . -3) (t 26028 14754 714811 622000)) nil (26028 14767 560391 128000) 0 nil])
([nil nil ((156 . 165)) nil (26028 14767 560390 680000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-string-face fontified t)) . -163) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -164) (undo-tree-id342 . -1) (undo-tree-id343 . -1) 165) nil (26028 14767 560390 222000) 0 nil])
([nil nil ((163 . 168)) nil (26028 14767 560388 421000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-string-face fontified t)) . -169) (undo-tree-id336 . -1) (undo-tree-id337 . -1) 170) nil (26028 14767 560387 658000) 0 nil])
([nil nil ((169 . 170)) nil (26028 14767 560378 491000) 0 nil])
([nil nil ((274 . 279) (t 26028 14767 562824 120000)) nil (26028 14855 140022 399000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-string-face fontified t)) . -275) (undo-tree-id347 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -276) (undo-tree-id348 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -277) (undo-tree-id349 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -278) (undo-tree-id350 . -1) 279) nil (26028 14855 140022 80000) 0 nil])
([nil nil ((275 . 291)) nil (26028 14855 140021 108000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -289) (undo-tree-id345 . -1) (#(" " 0 1 (fontified t)) . -290) (undo-tree-id346 . -1) 291) nil (26028 14855 140020 786000) 0 nil])
([nil nil ((289 . 292)) nil (26028 14855 140013 986000) 0 nil])
([nil nil ((292 . 313)) nil (26028 14855 140013 619000) 0 nil])
([nil nil ((313 . 330)) nil (26028 14855 140010 785000) 0 nil])
([nil nil ((1215 . 1217) (t 26028 14855 146909 744000)) nil (26028 15840 623207 910000) 0 nil])
([nil nil ((1218 . 1219)) nil (26028 15840 623207 651000) 0 nil])
([nil nil ((1216 . 1235)) nil (26028 15840 623207 457000) 0 nil])
([nil nil ((1235 . 1241)) nil (26028 15840 623207 351000) 0 nil])
([nil nil ((1241 . 1242)) nil (26028 15840 623207 147000) 0 nil])
([nil nil ((1242 . 1243)) nil (26028 15840 623206 942000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1242) (undo-tree-id372 . -1) 1243) nil (26028 15840 623206 717000) 0 nil])
([nil nil ((1242 . 1245)) nil (26028 15840 623206 421000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -1243) (undo-tree-id370 . -1) (#("e" 0 1 (fontified t)) . -1244) (undo-tree-id371 . -1) 1245) nil (26028 15840 623206 255000) 0 nil])
([nil nil ((1243 . 1244)) nil (26028 15840 623205 562000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1242) (undo-tree-id368 . -1) (#(" " 0 1 (fontified t)) . -1243) (undo-tree-id369 . -1) 1244) nil (26028 15840 623205 171000) 0 nil])
([nil nil ((1242 . 1252)) nil (26028 15840 623204 333000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -1251) (undo-tree-id366 . -1) (undo-tree-id367 . -1) 1252) nil (26028 15840 623203 897000) 0 nil])
([nil nil ((1251 . 1258)) nil (26028 15840 623203 222000) 0 nil])
([nil nil ((1258 . 1260)) nil (26028 15840 623203 86000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1259) (undo-tree-id363 . -1) (undo-tree-id364 . 1) (undo-tree-id365 . -1) 1260) nil (26028 15840 623202 881000) 0 nil])
([nil nil ((1259 . 1262)) nil (26028 15840 623202 119000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -1259) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("y" 0 1 (face (font-lock-type-face) fontified t)) . -1260) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#("t" 0 1 (face (font-lock-type-face) fontified t)) . -1261) (undo-tree-id361 . -1) (undo-tree-id362 . -1) 1262) nil (26028 15840 623201 357000) 0 nil])
([nil nil ((1259 . 1274)) nil (26028 15840 623188 145000) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-string-face fontified t)) . -243) (undo-tree-id373 . -1) (undo-tree-id374 . -1) 244 (t 26028 15840 627112 8000)) nil (26028 15844 621514 873000) 0 nil])
([nil nil ((243 . 244)) nil (26028 15844 621503 626000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-string-face fontified t)) . -243) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) 244 (t 26028 15844 627113 847000)) nil (26028 16286 417447 623000) 0 nil])
([nil nil ((243 . 244)) nil (26028 16364 224442 823000) 0 nil])
([nil nil ((apply -6 1216 1282 undo--wrap-and-run-primitive-undo 1216 1282 ((1263 . 1265) (1244 . 1246) (1216 . 1218) 1275))) nil (26028 16368 746525 48000) 0 nil] [nil nil ((717 . 721) (t 26028 16286 423370 272000)) ((#("defa" 0 4 (fontified t)) . 717) (undo-tree-id378 . -4)) (26028 16364 224307 270000) 0 nil])
([nil nil ((apply 6 1216 1274 undo--wrap-and-run-primitive-undo 1216 1274 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1259) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1242) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1216) 1280))) nil (26028 16523 335329 364000) 0 nil])
nil
([nil nil ((#("default]" 0 7 (face (font-lock-type-face) fontified t) 7 8 (fontified t)) . 1233) (undo-tree-id387 . -4) (undo-tree-id388 . -7) (undo-tree-id389 . -8)) nil (26028 16523 335328 997000) 0 nil])
([nil nil ((1233 . 1241)) nil (26028 16523 335328 72000) 0 nil])
([nil nil ((#("j" 0 1 (face (font-lock-type-face) fontified t)) . -1240) (undo-tree-id385 . -1) (undo-tree-id386 . -1) 1241) nil (26028 16523 335327 872000) 0 nil])
([nil nil ((1240 . 1245)) nil (26028 16523 335326 803000) 0 nil])
([nil nil ((#("n" 0 1 (face (font-lock-type-face) fontified t)) . -1243) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("]" 0 1 (fontified t)) . -1244) (undo-tree-id383 . -1) (undo-tree-id384 . -1) 1245) nil (26028 16523 335326 220000) 0 nil])
([nil nil ((1243 . 1244)) nil (26028 16523 335315 332000) 0 nil])
([nil nil ((#("_" 0 1 (face (font-lock-type-face) fontified t)) . -1236) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) 1237 (t 26028 16523 339536 405000)) nil (26028 16536 401644 32000) 0 nil])
([nil nil ((1236 . 1237)) nil (26028 16536 401630 470000) 0 nil])
([nil nil ((#("old-python]" 0 10 (face (font-lock-type-face) fontified t) 10 11 (fontified t)) . 1233) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -11) (undo-tree-id407 . -11) (undo-tree-id408 . -11) (undo-tree-id409 . -11) (undo-tree-id410 . -11) (undo-tree-id411 . -11) (undo-tree-id412 . -4) (undo-tree-id413 . -11) (t 26028 16536 407545 933000)) nil (26028 16547 217088 635000) 0 nil])
([nil nil ((1233 . 1240)) nil (26028 16547 217085 525000) 0 nil])
([nil nil ((1240 . 1244)) nil (26028 16547 217085 144000) 0 nil])
([nil nil ((#("'" 0 1 (face (font-lock-type-face font-lock-string-face) fontified t)) . -1243) (undo-tree-id397 . -1) (undo-tree-id398 . -1) 1244) nil (26028 16547 217084 523000) 0 nil])
([nil nil ((1243 . 1244)) nil (26028 16547 217074 801000) 0 nil])
([nil nil ((1215 . 1216) (t 26028 16547 247553 862000)) nil (26028 17382 85190 610000) 0 nil])
([nil nil ((1216 . 1224)) nil (26028 17382 85190 429000) 0 nil])
([nil nil ((#("a" 0 1 (face (font-lock-type-face) fontified t)) . -1222) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("t" 0 1 (face (font-lock-type-face) fontified t)) . -1223) (undo-tree-id430 . -1) (undo-tree-id431 . -1) 1224) nil (26028 17382 85189 821000) 0 nil])
([nil nil ((1222 . 1234)) nil (26028 17382 85188 377000) 0 nil])
([nil nil ((#("e" 0 1 (face (font-lock-type-face) fontified t)) . -1233) (undo-tree-id424 . -1) (undo-tree-id425 . -1) 1234) nil (26028 17382 85188 230000) 0 nil])
([nil nil ((1233 . 1241)) nil (26028 17382 85187 271000) 0 nil])
([nil nil ((1241 . 1242)) nil (26028 17382 85187 121000) 0 nil])
([nil nil ((1242 . 1255)) nil (26028 17382 85186 996000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . -1253) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#("1" 0 1 (face font-lock-string-face fontified t)) . -1254) (undo-tree-id422 . -1) (undo-tree-id423 . -1) 1255) nil (26028 17382 85186 696000) 0 nil])
([nil nil ((1253 . 1255)) nil (26028 17382 85185 114000) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-string-face fontified t)) . -1254) (undo-tree-id416 . -1) (undo-tree-id417 . -1) 1255) nil (26028 17382 85184 850000) 0 nil])
([nil nil ((1254 . 1257)) nil (26028 17382 85184 5000) 0 nil])
([nil nil ((#("]" 0 1 (face font-lock-string-face fontified t)) . -1256) (undo-tree-id414 . -1) (undo-tree-id415 . -1) 1257) nil (26028 17382 85183 613000) 0 nil])
([nil nil ((1256 . 1257)) nil (26028 17382 85175 512000) 0 nil])
([nil nil ((1257 . 1258)) nil (26028 17382 85175 79000) 0 nil])
([nil nil ((apply -6 1259 1327 undo--wrap-and-run-primitive-undo 1259 1327 ((1309 . 1311) (1290 . 1292) (1259 . 1261) 1320))) nil (26028 17382 85171 553000) 0 nil])
([nil nil ((#("[tool.hatch.envs.default]
python = '3.10'

# [tool.hatch.envs.python-old]
# type = 'virtual'
# python = '3.10'

" 0 1 (fontified t) 1 24 (face (font-lock-type-face) fontified t) 24 26 (fontified t) 26 32 (face font-lock-variable-name-face fontified t) 32 35 (fontified t) 35 41 (face font-lock-string-face fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 45 (face font-lock-comment-delimiter-face fontified t) 45 46 (face font-lock-comment-face fontified t) 46 72 (face font-lock-comment-face fontified t) 72 73 (face font-lock-comment-face fontified t) 73 74 (face font-lock-comment-face fontified t) 74 76 (face font-lock-comment-delimiter-face fontified t) 76 80 (face font-lock-comment-face fontified t) 80 83 (face font-lock-comment-face fontified t) 83 92 (face font-lock-comment-face fontified t) 92 93 (face font-lock-comment-face fontified t) 93 95 (face font-lock-comment-delimiter-face fontified t) 95 101 (face font-lock-comment-face fontified t) 101 104 (face font-lock-comment-face fontified t) 104 110 (face font-lock-comment-face fontified t) 110 111 (face font-lock-comment-face fontified t) 111 112 (fontified t)) . 1216) (undo-tree-id449 . -112) (undo-tree-id450 . -25) (undo-tree-id451 . -43) (undo-tree-id452 . -112) (undo-tree-id453 . -112) (undo-tree-id454 . -41) (undo-tree-id455 . -112) (undo-tree-id456 . -112) 1328 (t 26028 17382 92987 899000)) nil (26028 18110 48581 994000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1215) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) 1216) nil (26028 18110 48577 701000) 0 nil])
([nil nil ((1215 . 1216) (t 26028 18110 50669 616000)) nil (26028 18270 269455 885000) 0 nil])
([nil nil ((1215 . 1216)) nil (26028 18270 269455 720000) 0 nil])
([nil nil ((1216 . 1218)) nil (26028 18270 269455 596000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1216) (undo-tree-id460 . -1) (#("t" 0 1 (fontified t)) . -1217) (undo-tree-id461 . -1) 1218) nil (26028 18270 269455 404000) 0 nil])
([nil nil ((1216 . 1229)) nil (26028 18270 269454 777000) 0 nil])
([nil nil ((#("[[tool.hatch." 0 2 (fontified t) 2 13 (face (font-lock-type-face) fontified t)) . 1216)) nil (26028 18270 269454 521000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1214) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#("
" 0 1 (fontified t)) . -1215) (undo-tree-id459 . -1) 1216) nil (26028 18270 269486 12000) 0 nil])
([nil nil ((1665 . 1666)) nil (26028 18286 462268 902000) 0 nil] [nil nil ((1589 . 1591)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 1589) (undo-tree-id462 . -2) (undo-tree-id463 . -2)) (26028 18270 269444 480000) 0 nil])
([nil nil ((1665 . 1666)) nil (26028 18286 462268 706000) 0 nil])
nil
([nil nil ((1666 . 1669)) nil (26028 18286 462268 513000) 0 nil])
([nil nil ((1669 . 1690)) nil (26028 18286 462268 389000) 0 nil])
([nil nil ((1690 . 1696)) nil (26028 18286 462268 148000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -1666) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) 1667) nil (26028 18286 462267 827000) 0 nil])
([nil nil ((1666 . 1668)) nil (26028 18286 462260 48000) 0 nil])
([nil nil ((1697 . 1698)) nil (26028 18286 462259 883000) 0 nil])
([nil nil ((1698 . 1708)) nil (26028 18286 462259 536000) 0 nil])
([nil nil ((1708 . 1715)) nil (26028 18286 462257 56000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -1714) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) 1715 (t 26028 18286 466960 375000)) nil (26028 18295 823620 139000) 0 nil])
([nil nil ((1714 . 1718)) nil (26028 18295 823610 45000) 0 nil])
([nil nil ((1718 . 1723)) nil (26028 18295 823606 451000) 0 nil])
([nil nil ((#("test" 0 4 (face (font-lock-type-face) fontified t)) . 1684) (undo-tree-id476 . -4) (t 26028 18295 850975 187000)) nil (26028 18342 724092 701000) 0 nil])
([nil nil ((1684 . 1691)) nil (26028 18342 724082 39000) 0 nil])
([nil nil ((#("default" 0 7 (face (font-lock-type-face) fontified t)) . 1684) (undo-tree-id477 . -7) (undo-tree-id478 . -7) (undo-tree-id479 . -5) (undo-tree-id480 . -5) (undo-tree-id481 . -5) (undo-tree-id482 . -5) (undo-tree-id483 . -5) (undo-tree-id484 . -5) (undo-tree-id485 . -7) (undo-tree-id486 . -7) (t 26028 18342 727048 319000)) nil (26028 18357 437656 883000) 0 nil])
([nil nil ((1684 . 1688)) nil (26028 18357 437644 558000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-string-face fontified t)) . -1710) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) 1711 (t 26028 18357 443070 988000)) nil (26028 18602 634189 838000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-string-face fontified t)) . -1717) (undo-tree-id487 . -1) (undo-tree-id488 . -1) 1718) nil (26028 18602 634186 226000) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-string-face fontified t)) . -243) (undo-tree-id496 . -1) (undo-tree-id497 . -1) 244 (t 26028 18602 639432 857000)) nil (26028 18848 381916 482000) 0 nil])
([nil nil ((243 . 244)) nil (26028 18848 381903 375000) 0 nil])
([nil nil ((1710 . 1711) (t 26028 18848 387773 309000)) nil (26028 19068 44212 752000) 0 nil])
([nil nil ((1718 . 1719)) nil (26028 19068 44209 644000) 0 nil])
([nil nil ((1539 . 1541) (t 26028 19068 48065 837000)) nil (26028 19303 206948 408000) 0 nil])
([nil nil ((1541 . 1545)) nil (26028 19303 206948 203000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1541) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (#("t" 0 1 (fontified t)) . -1542) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (#("o" 0 1 (fontified t)) . -1543) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (#("o" 0 1 (fontified t)) . -1544) (undo-tree-id538 . -1) (undo-tree-id539 . -1) 1545) nil (26028 19303 206947 848000) 0 nil])
([nil nil ((1541 . 1562)) nil (26028 19303 206943 382000) 0 nil])
([nil nil ((1562 . 1566)) nil (26028 19303 206943 166000) 0 nil])
([nil nil ((#("[" 0 1 (face (font-lock-type-face) fontified t)) . -1565) (undo-tree-id518 . -1) (undo-tree-id519 . -1) 1566) nil (26028 19303 206942 918000) 0 nil])
([nil nil ((1565 . 1566)) nil (26028 19303 206942 274000) 0 nil])
([nil nil ((1566 . 1567)) nil (26028 19303 206942 156000) 0 nil])
([nil nil ((1567 . 1571)) nil (26028 19303 206941 934000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1567) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (#("e" 0 1 (fontified t)) . -1568) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (#("r" 0 1 (fontified t)) . -1569) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#("s" 0 1 (fontified t)) . -1570) (undo-tree-id516 . -1) (undo-tree-id517 . -1) 1571) nil (26028 19303 206941 401000) 0 nil])
([nil nil ((1567 . 1576)) nil (26028 19303 206929 804000) 0 nil])
([nil nil ((1576 . 1582)) nil (26028 19362 979374 996000) 0 nil])
([nil nil ((1215 . 1216)) nil (26028 19622 500803 656000) 0 nil] [nil nil ((#("[tool.hatch.envs.default]
python = \"3.10\"
" 0 1 (fontified t) 1 24 (face (font-lock-type-face) fontified t) 24 26 (fontified t) 26 32 (face font-lock-variable-name-face fontified t) 32 35 (fontified t) 35 41 (face font-lock-string-face fontified t) 41 42 (fontified t)) . 1541) (undo-tree-id548 . -42) (undo-tree-id549 . -42) (undo-tree-id550 . -26) (undo-tree-id551 . -42) (undo-tree-id552 . -42) 1583 (t 26028 19303 211925 922000)) ((1541 . 1583)) (26028 19362 688504 116000) 0 nil])
([nil nil ((1215 . 1216)) nil (26028 19622 500803 464000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1540) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) 1541) ((1540 . 1541) (t 26028 19357 799836 726000)) (26028 19357 772882 982000) 0 nil])
([nil nil ((1216 . 1219)) nil (26028 19622 500803 337000) 0 nil])
nil
([nil nil ((#("[" 0 1 (fontified t)) . -1217) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("t" 0 1 (face (font-lock-type-face) fontified t)) . -1218) (undo-tree-id565 . -1) (undo-tree-id566 . -1) 1219) nil (26028 19622 500803 39000) 0 nil])
([nil nil ((1217 . 1223)) nil (26028 19622 500800 494000) 0 nil])
([nil nil ((#("e" 0 1 (face (font-lock-type-face) fontified t)) . -1222) (undo-tree-id559 . -1) (undo-tree-id560 . -1) 1223) nil (26028 19622 500800 60000) 0 nil])
([nil nil ((1222 . 1241)) nil (26028 19622 500799 477000) 0 nil])
([nil nil ((1241 . 1242)) nil (26028 19622 500799 270000) 0 nil])
([nil nil ((1242 . 1247)) nil (26028 19622 500799 93000) 0 nil])
([nil nil ((#("versi" 0 5 (fontified t)) . 1242) (undo-tree-id553 . -1) (undo-tree-id554 . -2) (undo-tree-id555 . -3) (undo-tree-id556 . -4) (undo-tree-id557 . -5) (undo-tree-id558 . -5)) nil (26028 19622 500798 743000) 0 nil])
([nil nil ((1242 . 1246)) nil (26028 19622 500791 439000) 0 nil])
([nil nil ((1246 . 1257)) nil (26028 19622 500788 299000) 0 nil])
([nil nil ((#("[tool.hatch.envs.default]
python = \"3.10\"

" 0 1 (fontified t) 1 24 (face (font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face) fontified t) 24 26 (fontified t) 26 32 (face font-lock-variable-name-face fontified t) 32 35 (fontified t) 35 41 (face font-lock-string-face fontified t) 41 42 (fontified t) 42 43 (fontified t)) . 1584) (undo-tree-id567 . -42) (undo-tree-id568 . -26) (undo-tree-id569 . -21) (undo-tree-id570 . -43) (undo-tree-id571 . -21) (undo-tree-id572 . -21) (undo-tree-id573 . -21) (undo-tree-id574 . -21) (undo-tree-id575 . -43) (undo-tree-id576 . -43) 1627 (t 26028 19622 531573 306000)) nil (26028 19639 824125 598000) 0 nil])
([nil nil ((#("[[tool.hatch.envs.test.matrix]]
python = [\"3.10\", \"3.11\"]

" 0 2 (fontified t) 2 29 (face (font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face) fontified t) 29 32 (fontified t) 32 38 (face font-lock-variable-name-face fontified t) 38 42 (fontified t) 42 48 (face font-lock-string-face fontified t) 48 50 (fontified t) 50 56 (face font-lock-string-face fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t)) . 1709) (undo-tree-id577 . -55) (undo-tree-id578 . -59) 1768 (t 26028 19639 851563 911000)) nil (26028 19718 9956 978000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . -715) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) 716 (t 26028 19718 15530 956000)) nil (26028 19896 791133 558000) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-string-face fontified t)) . -1253) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("0" 0 1 (face font-lock-string-face fontified t)) . -1254) (undo-tree-id595 . -1) (undo-tree-id596 . -1) 1255 (t 26028 19896 795504 227000)) nil (26028 20002 364076 335000) 0 nil])
([nil nil ((1253 . 1254)) nil (26028 20002 364075 155000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-string-face fontified t)) . -1253) (undo-tree-id592 . -1) 1254) nil (26028 20002 364074 889000) 0 nil])
([nil nil ((1253 . 1254)) nil (26028 20002 364074 295000) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-string-face fontified t)) . -242) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (#("0" 0 1 (face font-lock-string-face fontified t)) . -243) (undo-tree-id590 . -1) (undo-tree-id591 . -1) 244) nil (26028 20002 364073 703000) 0 nil])
([nil nil ((242 . 243)) nil (26028 20002 364061 501000) 0 nil])
([nil nil ((#("9" 0 1 (face font-lock-string-face fontified t)) . -242) (undo-tree-id604 . -1) 243 (t 26028 20002 367513 572000)) nil (26028 20142 611680 445000) 0 nil])
([nil nil ((242 . 243)) nil (26028 20209 406357 78000) 0 nil])
([nil nil ((#("9" 0 1 (face font-lock-string-face fontified t)) . -1252) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) 1253) nil (26028 20211 864292 80000) 0 nil] [nil nil ((#("9" 0 1 (face font-lock-string-face fontified t)) . -1252) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id601 . -1) (undo-tree-id603 . -1) 1253) ((1252 . 1253)) (26028 20209 236795 603000) 0 nil])
([nil nil ((242 . 1255) (#("8\"
license = \"MIT\"
keywords = [\"circuitpython\", \"microcontroller\", \"rp2040\", \"adafruit\"]
authors = [
  { name = \"Diony Rosa\", email = \"dhrosa+dev@gmail.com\" },
]
dynamic = [\"readme\", \"version\"]

dependencies = [\"tomlkit\", \"inotify_simple\", \"rich\", \"click\", \"rich-click\"]

[project.urls]
\"Source code\" = \"https://github.com/dhrosa/circuitpython_tool\"

# Generate a README for pypi that has all relative image links replaced with
# absolute links to images hosted on GitHub.
[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = \"text/markdown\"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = \"docs/README.md\"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = '\\[(.+?)\\]\\(((?!https?://)\\S+?)\\)'
replacement = '[\\1](https://raw.githubusercontent.com/dhrosa/circuitpython_tool/main/docs/\\g<2>)'

[project.scripts]
circuitpython-tool = \"circuitpython_tool:main\"

[tool.hatch.version]
path = \"src/circuitpython_tool/__init__.py\"

[tool.hatch.envs.default]
python = '3." 0 2 (face font-lock-string-face fontified t) 2 3 (fontified t) 3 10 (face font-lock-variable-name-face fontified t) 10 13 (fontified t) 13 18 (face font-lock-string-face fontified t) 18 19 (fontified t) 19 27 (face font-lock-variable-name-face fontified t) 27 31 (fontified t) 31 46 (face font-lock-string-face fontified t) 46 48 (fontified t) 48 65 (face font-lock-string-face fontified t) 65 67 (fontified t) 67 75 (face font-lock-string-face fontified t) 75 77 (fontified t) 77 87 (face font-lock-string-face fontified t) 87 88 (fontified t) 88 89 (fontified t) 89 96 (face font-lock-variable-name-face fontified t) 96 103 (fontified t) 103 109 (face font-lock-variable-name-face fontified t) 109 112 (fontified t) 112 113 (face font-lock-string-face fontified t) 113 123 (face font-lock-string-face fontified t) 123 124 (face font-lock-string-face fontified t) 124 134 (fontified t) 134 135 (face font-lock-string-face fontified t) 135 155 (face font-lock-string-face fontified t) 155 156 (face font-lock-string-face fontified t) 156 160 (fontified t) 160 161 (fontified t) 161 162 (fontified t) 162 169 (face font-lock-variable-name-face fontified t) 169 173 (fontified t) 173 174 (face font-lock-string-face fontified t) 174 180 (face font-lock-string-face fontified t) 180 181 (face font-lock-string-face fontified t) 181 183 (fontified t) 183 184 (face font-lock-string-face fontified t) 184 191 (face font-lock-string-face fontified t) 191 192 (face font-lock-string-face fontified t) 192 193 (fontified t rear-nonsticky t) 193 194 (fontified t) 194 195 (fontified t) 195 207 (face font-lock-variable-name-face fontified t) 207 211 (fontified t) 211 212 (face font-lock-string-face fontified t) 212 219 (face font-lock-string-face fontified t) 219 220 (face font-lock-string-face fontified t) 220 222 (fontified t) 222 223 (face font-lock-string-face fontified t) 223 237 (face font-lock-string-face fontified t) 237 238 (face font-lock-string-face fontified t) 238 240 (fontified t) 240 241 (face font-lock-string-face fontified t) 241 245 (face font-lock-string-face fontified t) 245 246 (face font-lock-string-face fontified t) 246 248 (fontified t) 248 249 (face font-lock-string-face fontified t) 249 254 (face font-lock-string-face fontified t) 254 255 (face font-lock-string-face fontified t) 255 257 (fontified t) 257 258 (face font-lock-string-face fontified t) 258 268 (face font-lock-string-face fontified t) 268 269 (face font-lock-string-face fontified t) 269 271 (fontified t) 271 272 (fontified t) 272 273 (fontified t) 273 285 (face (font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face) fontified t) 285 287 (fontified t) 287 288 (face font-lock-string-face fontified t) 288 299 (face font-lock-string-face fontified t) 299 300 (face font-lock-string-face fontified t rear-nonsticky t) 300 303 (fontified t) 303 304 (face font-lock-string-face fontified t) 304 316 (face font-lock-string-face fontified t) 316 347 (face font-lock-string-face fontified t) 347 348 (face font-lock-string-face fontified t rear-nonsticky t) 348 349 (face font-lock-string-face fontified t) 349 350 (fontified t) 350 351 (fontified t) 351 353 (face font-lock-comment-delimiter-face fontified t) 353 427 (face font-lock-comment-face fontified t) 427 428 (face font-lock-comment-face fontified t) 428 430 (face font-lock-comment-delimiter-face fontified t) 430 472 (face font-lock-comment-face fontified t) 472 473 (face font-lock-comment-face fontified t) 473 474 (fontified t) 474 517 (face (font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face) fontified t) 517 519 (fontified t) 519 531 (face font-lock-variable-name-face fontified t) 531 534 (fontified t) 534 535 (face font-lock-string-face fontified t) 535 548 (face font-lock-string-face fontified t) 548 549 (face font-lock-string-face fontified t) 549 550 (fontified t) 550 551 (fontified t) 551 553 (fontified t) 553 606 (face (font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face) fontified t) 606 609 (fontified t) 609 613 (face font-lock-variable-name-face fontified t) 613 616 (fontified t) 616 617 (face font-lock-string-face fontified t) 617 631 (face font-lock-string-face fontified t) 631 632 (face font-lock-string-face fontified t) 632 633 (fontified t) 633 634 (fontified t) 634 636 (fontified t) 636 641 (face (font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face) fontified t) 641 693 (face (font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face) fontified t) 693 696 (fontified t) 696 703 (face font-lock-variable-name-face fontified t) 703 706 (fontified t) 706 740 (face font-lock-string-face fontified t) 740 741 (fontified t rear-nonsticky t) 741 752 (face font-lock-variable-name-face fontified t) 752 755 (fontified t) 755 756 (face font-lock-string-face fontified t) 756 791 (face font-lock-string-face fontified t) 791 820 (face font-lock-string-face fontified t) 820 838 (face font-lock-string-face fontified t) 838 839 (fontified t) 839 840 (fontified t) 840 841 (fontified t) 841 856 (face (font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face) fontified t) 856 858 (fontified t) 858 876 (face font-lock-variable-name-face fontified t) 876 879 (fontified t) 879 880 (face font-lock-string-face fontified t) 880 903 (face font-lock-string-face fontified t) 903 904 (face font-lock-string-face fontified t) 904 905 (fontified t) 905 906 (fontified t) 906 907 (fontified t) 907 925 (face (font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face) fontified t) 925 927 (fontified t) 927 931 (face font-lock-variable-name-face fontified t) 931 934 (fontified t) 934 935 (face font-lock-string-face fontified t) 935 969 (face font-lock-string-face fontified t) 969 970 (face font-lock-string-face fontified t) 970 971 (fontified t) 971 972 (fontified t) 972 973 (fontified t) 973 996 (face (font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face) fontified t) 996 998 (fontified t) 998 1004 (face font-lock-variable-name-face fontified t) 1004 1007 (fontified t) 1007 1010 (face font-lock-string-face fontified t)) . -242) (undo-tree-id617 . -1) (undo-tree-id618 . -935) (undo-tree-id619 . -473) (undo-tree-id620 . -1010) (undo-tree-id621 . -633) (undo-tree-id622 . -161) (undo-tree-id623 . -473) (undo-tree-id624 . -320) (undo-tree-id625 . -970) (undo-tree-id626 . -971) (undo-tree-id627 . -972) (undo-tree-id628 . -2) (undo-tree-id629 . -472) (undo-tree-id630 . -472) (undo-tree-id631 . -472) (undo-tree-id632 . -286) (undo-tree-id633 . -1010) (undo-tree-id634 . -100) (undo-tree-id635 . -100) (undo-tree-id636 . -1010) (undo-tree-id637 . -998) (undo-tree-id638 . -1010) (undo-tree-id639 . -1010) (undo-tree-id640 . -1010) (undo-tree-id641 . -1010) (undo-tree-id642 . -473) (undo-tree-id643 . -1010) (undo-tree-id644 . -1010) (t 26028 20211 867572 277000)) nil (26028 20248 196865 824000) 0 nil])
([nil nil ((1252 . 1253)) ((#("8" 0 1 (face font-lock-string-face fontified t)) . 1252) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (t 26028 20142 615547 865000)) (26028 20142 611667 474000) 0 nil])
([nil nil ((#(" --no-header --verbose -vv\"]" 0 26 (face font-lock-string-face fontified t) 26 27 (face font-lock-string-face fontified t) 27 28 (fontified t)) . 1678) (undo-tree-id691 . -2) (undo-tree-id692 . -1) (undo-tree-id693 . -28) (t 26028 20215 207573 563000)) nil (26028 20466 736552 698000) 0 nil] [nil nil ((2232 . 2234) (t 26028 20215 207573 563000)) ((#("si" 0 2 (fontified t)) . 2232) (undo-tree-id645 . -2) (undo-tree-id646 . -2) (undo-tree-id647 . -2)) (26028 20248 196535 697000) 0 nil])
nil
([nil nil ((1678 . 1680)) nil (26028 20466 736551 910000) 0 nil])
nil
([nil nil ((1680 . 1681)) nil (26028 20466 736551 643000) 0 nil])
([nil nil ((1681 . 1682)) nil (26028 20466 736551 527000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1680) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (#("
" 0 1 (fontified t)) . -1681) (undo-tree-id687 . -1) (undo-tree-id688 . 1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) 1682) nil (26028 20466 736551 194000) 0 nil])
([nil nil ((1680 . 1682)) nil (26028 20466 736548 820000) 0 nil])
([nil nil ((1682 . 1685)) nil (26028 20466 736548 571000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -1683) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (#("t" 0 1 (face (font-lock-type-face) fontified t)) . -1684) (undo-tree-id681 . -1) (undo-tree-id682 . -1) 1685) nil (26028 20466 736547 923000) 0 nil])
([nil nil ((1683 . 1690)) nil (26028 20466 736546 585000) 0 nil])
([nil nil ((#("a" 0 1 (face (font-lock-type-face) fontified t)) . -1688) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#("h" 0 1 (face (font-lock-type-face) fontified t)) . -1689) (undo-tree-id675 . -1) (undo-tree-id676 . -1) 1690) nil (26028 20466 736546 198000) 0 nil])
([nil nil ((1688 . 1695)) nil (26028 20466 736324 576000) 0 nil])
([nil nil ((#("-" 0 1 (face (font-lock-type-face) fontified t)) . -1694) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) 1695) nil (26028 20466 736324 249000) 0 nil])
([nil nil ((1694 . 1700)) nil (26028 20466 736321 435000) 0 nil])
([nil nil ((#("t" 0 1 (face (font-lock-type-face) fontified t)) . -1698) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (#("_" 0 1 (face (font-lock-type-face) fontified t)) . -1699) (undo-tree-id661 . -1) (undo-tree-id662 . -1) 1700) nil (26028 20466 736320 933000) 0 nil])
([nil nil ((1698 . 1707)) nil (26028 20466 736319 599000) 0 nil])
([nil nil ((1707 . 1708)) nil (26028 20466 736319 405000) 0 nil])
([nil nil ((1708 . 1718)) nil (26028 20466 736319 250000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 1718) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (1717 . 1718) (#("=" 0 1 (fontified nil)) . 1716) (1717 . 1718) 1718) nil (26028 20466 736318 924000) 0 nil])
([nil nil ((#("=" 0 1 (fontified nil)) . 1718) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (1717 . 1718) (#(" " 0 1 (fontified nil)) . 1716) (1717 . 1718) 1718) nil (26028 20466 736318 203000) 0 nil])
([nil nil ((1718 . 1719)) nil (26028 20466 736317 404000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1746 . 1747) (nil fontified nil 1746 . 1747) (nil fontified nil 1745 . 1746) (nil fontified nil 1719 . 1745) (1719 . 1747)) nil (26028 20466 736316 950000) 0 nil])
([nil nil ((#("]" 0 1 (rear-nonsticky t fontified t)) . -1746) (undo-tree-id651 . -1) (undo-tree-id652 . -1) 1747) nil (26028 20466 736316 386000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -1719) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) 1720) nil (26028 20466 736312 966000) 0 nil])
([nil nil ((1141 . 1145) (t 26028 20466 739693 744000)) nil (26032 37142 925578 759000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -1144) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 1145) nil (26032 37142 925578 137000) 0 nil])
([nil current ((1144 . 1145)) nil (26032 37142 925564 78000) 0 nil])
nil
