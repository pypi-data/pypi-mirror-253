[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs>=0.3", "setuptools-scm>=7.1"]

[project]
dependencies = [
  "keyring",
  "pkce",
  "python-dotenv",
  "pydantic",
  "pyjwt",
  "requests",
  "cryptography>=3.4.0",  # see pyjwt
  "semver<3"
]
description = "A client auth library for Anaconda.cloud APIs"
dynamic = ["version"]
license = {text = "BSD-3-Clause"}
name = "anaconda-cloud-auth"
readme = "README.md"
requires-python = ">=3.8"

[project.entry-points."panel.auth"]
anaconda_cloud = "anaconda_cloud_auth.panel:AnacondaCloudLoginHandler"

[project.optional-dependencies]
cli = ["anaconda-cloud-cli"]
dev = [
  "mypy",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "tox",
  "types-requests"
]
publish = [
  "build",
  "twine",
  "wheel"
]

[tool.distutils.bdist_wheel]
universal = true

[tool.hatch.build.hooks.vcs]
version-file = "src/anaconda_cloud_auth/_version.py"

[tool.hatch.build.targets.sdist]
include = [
  "/src/anaconda_cloud_auth",
  "/.env.template",
  "/pyproject.toml",
  "/tests",
  "/Makefile",
  "/environment-dev.yml"
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
git_describe_command = "git describe --dirty --tags --long --match 'anaconda-cloud-auth-*'"
root = "../.."

[tool.isort]
force_single_line = true
profile = "black"

[tool.mypy]
disallow_untyped_defs = true
files = [
  "src/**/*.py",
  "tests/**/*.py"
]
python_version = "3.8"

[[tool.mypy.overrides]]
ignore_errors = true
module = "*._version"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "anaconda_anon_usage.*"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "semver.*"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "anaconda_navigator.*"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "jaraco.classes.properties.*"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "panel.*"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "pydantic.v1.*"

[tool.pytest.ini_options]
addopts = [
  "--cov=anaconda_cloud_auth",
  "--color=yes",
  "--cov-append",
  "--cov-branch",
  "--cov-report=html",
  "--cov-report=html:./cov_html",
  "--cov-report=term-missing",
  "--cov-report=xml",
  "--durations=5",
  "-vv"
]
markers = [
  "integration: Integration tests requiring a browser"
]
norecursedirs = ["env", "envs", ".tox"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38,py39,py310-{old-keyring,new-keyring},py310-{pydantic1,pydantic2},py311,mypy
isolated_build = True

[gh-actions]
python =
    3.8: py38, mypy
    3.9: py39, mypy
    3.10: py310, mypy
    3.11: py311

[testenv]
pass_env =
  TEST_AUTOMATION_USER_EMAIL
  TEST_AUTOMATION_USER_PASSWORD
  CF_CLIENT_ID
  CF_CLIENT_SECRET
deps =
    mypy
    pytest
    pytest-cov
    pytest-mock
    # This is to test the removal of jaraco.classes in earlier versions, so we don't explicitly depend
    # on an import from that library and instead rely on `keyring.backend.properties`.
    old-keyring: keyring <=23.4.0
    pydantic1: pydantic <2.0
    pydantic2: pydantic >=2.0
conda_deps =
    anaconda-anon-usage
conda_channels =
    anaconda-cloud
    defaults
    conda-forge
commands = pytest {posargs}

[testenv:mypy]
deps =
    mypy
    pytest
    pytest-cov
    pytest-mock
    types-requests
    anaconda-cli-base
    anaconda-cloud-cli  # Needed for typer
commands = mypy
"""

[tool.vendoring]
destination = "src/anaconda_cloud_auth/_vendor/"
namespace = "anaconda_cloud_auth._vendor"
protected-files = ["__init__.py", "requirements.txt"]
requirements = "src/anaconda_cloud_auth/_vendor/requirements.txt"

[tool.vendoring.license.directories]
setuptools = "pkg_resources"

[tool.vendoring.license.fallback-urls]
pkce = "https://github.com/RomeoDespres/pkce/raw/master/LICENSE"
