# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['escavador',
 'escavador.resources',
 'escavador.resources.helpers',
 'escavador.v1',
 'escavador.v1.resources',
 'escavador.v2',
 'escavador.v2.resources']

package_data = \
{'': ['*']}

install_requires = \
['dataclasses',
 'importlib_metadata',
 'python-dotenv>=0.19.2',
 'ratelimit',
 'requests>=2.27.1']

setup_kwargs = {
    'name': 'escavador',
    'version': '0.8.0',
    'description': 'A library to interact with Escavador API',
    'long_description': '# O SDK em Python da API do Escavador\n\n## Documentação disponível\n\n- [API V1](https://api.escavador.com/v1/docs/)\n- [API V2](https://api.escavador.com/v2/docs/)\n\n## Instalação\n\nO SDK pode ser instalado via `pip` através do comando:\n```bash\npython -m pip install escavador\n```\n\n##  Requisitos\n\n- Python 3.6+\n\n## Como Configurar\n\nNo arquivo `.env` na raíz do seu projeto, crie uma variável chamada `ESCAVADOR_API_KEY` e atribua a ela o seu token da API. A linha onde a variável é definida deve ficar parecida com:\n```bash\nESCAVADOR_API_KEY="SUA_API_KEY"\n```\n\nAlternativamente, utilize a função `config()` durante a execução do seu projeto, antes de utilizar qualquer outro módulo do SDK.\n```py\nimport escavador\nescavador.config("SUA_API_KEY")\n```\n\nPara obter seu token da API, acesse o [painel de tokens](https://api.escavador.com/tokens)\n\n## Exemplos\n\n### Consultando os processos de uma empresa pelo CNPJ usando a API V2\n\n[Processos de um envolvido pelo seu nome ou documento](https://api.escavador.com/v2/docs/#processos-de-envolvidos-por-nome-ou-cpfcnpj)\n\n```py\nfrom escavador.v2 import Processo\n\n# Chamada inicial na API /api/v2/envolvido/processos?cpf_cnpj=00000000000\nenvolvido, processos = Processo.por_cnpj(cnpj="00653149000170")  # Também aceita o formato 00.000.000/0000-00)\n\nprint(f"Processos da empresa {envolvido.nome}:")\n\nwhile processos:\n    for processo in processos:\n        print(f"{processo.numero_cnj}:")\n        print(f"Fonte: {processo.fontes[0].nome}")\n        print(f"Data de início: {processo.data_inicio}")\n        print(f"Última movimentação: {processo.data_ultima_movimentacao}")\n\n    # Chamada para a paginação via cursor na API /api/v2/envolvido/processos?cpf_cnpj=00000000000&cursor=HASH_PROXIMA_PAGINA\n    processos = processos.continuar_busca()\n```\n\n### Consultando o processo mais recente de um advogado usando a API V2\n\n[Consultando processos de um advogado usando sua OAB](https://api.escavador.com/v2/docs/#processos-de-um-advogado-por-oab)\n\n```py\nfrom escavador import CriterioOrdenacao, Ordem\nfrom escavador.v2 import Processo\n\nadvogado, processos = Processo.por_oab(numero=12345,\n                                       estado="SP",\n                                       ordena_por=CriterioOrdenacao.INICIO,\n                                       ordem=Ordem.DESC)\n\nprocesso = processos.pop()\n\nprint(f"{processo.numero_cnj}: {processo.titulo_polo_ativo} X {processo.titulo_polo_passivo}")\n```\n\n### Buscando as movimentações de um processo usando a API V2\n\n[Consultando movimentações de um processo](https://api.escavador.com/v2/docs/#movimentaes-de-um-processo)\n\n```py\nfrom escavador.v2 import Processo\n\nresultado = Processo.movimentacoes(numero_cnj="0000000-00.0000.0.00.0000")\n\nwhile resultado:\n    for movimentacao in resultado:\n        print(f"{movimentacao.data} - {movimentacao.tipo}:")\n        print(f"{movimentacao.conteudo}")\n        print()\n    resultado = resultado.continuar_busca() # Solicita a próxima página de movimentações\n```\n\n### Consultando a última movimentação dos processos mais recentes de uma pessoa pelo nome usando a API V2\n\n[Processos de um envolvido pelo seu nome ou documento](https://api.escavador.com/v2/docs/#processos-de-envolvidos-por-nome-ou-cpfcnpj)\n\n```py\nfrom escavador import CriterioOrdenacao, Ordem\nfrom escavador.v2 import Processo\n\nenvolvido, processos = Processo.por_nome(nome="Fulano de Tal da Silva",\n                                         ordena_por=CriterioOrdenacao.INICIO,\n                                         ordem=Ordem.DESC)\n\nfor processo in processos:\n    print(f"{processo.numero_cnj}:")\n    print(f"Fonte: {processo.fontes[0].nome}")\n    print(f"Data de início: {processo.data_inicio}")\n    movimentacoes = Processo.movimentacoes(numero_cnj=processo.numero_cnj)\n    if movimentacoes:\n        print(f"Última movimentação: {movimentacoes[0].conteudo}")\n```\n\n### Solicitar busca assíncrona de processo usando a API V1\n[Buscando informações do processo no sistema do Tribunal](https://api.escavador.com/v1/docs/#pesquisar-processo-no-site-do-tribunal-assncrono) (Assíncrono)\n```py\nfrom escavador import Processo\n\nresultado_busca = Processo.informacoes_no_tribunal("0000000-00.0000.0.00.0000")  # Gera uma busca assíncrona\n\nif resultado_busca[\'resposta\'][\'status\'] == \'SUCESSO\':\n    for instancia in resultado_busca[\'resposta\'][\'resposta\'][\'instancias\']:\n        print(instancia[\'assunto\'])\n\nelif resultado_busca[\'resposta\'][\'status\'] == \'PENDENTE\':\n    # O ID de uma busca assíncrona pode ser usado para consultar seu status \n    # ou identificar a requisição originária ao receber o callback no seu servidor.\n    id_async = resultado_busca[\'resposta\'][\'id\']\n```\n\nÉ recomendado que se utilize o callback ao invés de continuamente consultar o resultado. Entretanto, é possível consultar em massa os seus callbacks cadastrados utilizando a classe `Callback`.\n\nO módulo `server` da biblioteca `http` oferece uma interface simples para receber callbacks. Basta definir o recebimento de requests `POST` conformando com [a documentação do conteúdo dos callbacks](https://api.escavador.com/v1/docs/#detalhes-dos-callbacks).\n\n### Consultar manualmente o status de uma busca assíncrona previamente solicitada\n\nEmbora não seja recomendado devido à possibilidade de saturação do seu limite de requisições por minuto, é possível consultar periodicamente o status de uma busca assíncrona.\n\n```py\nfrom escavador import BuscaAssincrona\nfrom time import sleep\n\nwhile True:\n    resultado_busca = BuscaAssincrona.por_id(id_async)\n    if resultado_busca[\'resposta\'][\'status\'] != \'PENDENTE\':\n        break\n    sleep(15)\n\nif resultado_busca[\'resposta\'][\'status\'] == \'SUCESSO\':\n    # Os dados consultados estarão disponíveis no campo [\'resposta\'][\'resposta\']\n    pass\nelif resultado_busca[\'resposta\'][\'status\'] == \'ERRO\':\n    print("Algo deu errado, tente novamente mais tarde.")\n```\n\n### Criando Monitoramentos na API V1\n\n```py\nfrom escavador import MonitoramentoTribunal, MonitoramentoDiario, TiposMonitoramentosTribunal, TiposMonitoramentosDiario,FrequenciaMonitoramentoTribunal\n\n# Monitoramento nos sisteams dos Tribunais\nmonitoramento_tribunal = MonitoramentoTribunal.criar(tipo_monitoramento=TiposMonitoramentosTribunal.UNICO,\n                                                       valor="0000000-00.0000.0.00.0000",\n                                                       tribunal="TJSP",\n                                                       frequencia=FrequenciaMonitoramentoTribunal.SEMANAL)\n\n# Monitoramento em Diários Oficiais\nmonitoramento_diario = MonitoramentoDiario.criar(TiposMonitoramentosDiario.PROCESSO, processo_id=2, origens_ids=[2,4,6])\n```\n\n### Consultando os Tribunais e sistemas disponíveis para a API V1\n\n```py\nfrom escavador import Tribunal\n\ntribunais_disponiveis = Tribunal.sistemas_disponiveis()\n```\n\n### Módulos Disponíveis e Referência da API\n\n#### V1:\n| Módulo                | Link API                                                             |\n|-----------------------|----------------------------------------------------------------------|\n| Busca                 | https://api.escavador.com/v1/docs/#busca                             |\n| Processo              | https://api.escavador.com/v1/docs/#processos                         |\n| Callback              | https://api.escavador.com/v1/docs/#callback                          |\n| DiarioOficial         | https://api.escavador.com/v1/docs/#dirios-oficiais                   |\n| Instituicao           | https://api.escavador.com/v1/docs/#instituies                        |\n| Legislacao            | https://api.escavador.com/v1/docs/#legislao                          |\n| Jurisprudencia        | https://api.escavador.com/v1/docs/#jurisprudncias                    |\n| MonitoramentoDiario   | https://api.escavador.com/v1/docs/#monitoramento-de-dirios-oficiais  |\n| MonitoramentoTribunal | https://api.escavador.com/v1/docs/#monitoramento-no-site-do-tribunal |\n| Movimentacao          | https://api.escavador.com/v1/docs/#movimentaes                       |\n| Pessoa                | https://api.escavador.com/v1/docs/#pessoas                           |\n| Tribunal              | https://api.escavador.com/v1/docs/#tribunais                         |\n| Saldo                 | https://api.escavador.com/v1/docs/#saldo-da-api                      |\n\n\n#### V2:\n\n| Módulo      | Link API                                     |\n|-------------|----------------------------------------------|\n| v2.Processo | https://api.escavador.com/v2/docs/#processos |\n| v2.Tribunal | https://api.escavador.com/v2/docs/#tribunais |\n',
    'author': 'Rafael',
    'author_email': 'rafaelcampos@escavador.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://www.escavador.com',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
