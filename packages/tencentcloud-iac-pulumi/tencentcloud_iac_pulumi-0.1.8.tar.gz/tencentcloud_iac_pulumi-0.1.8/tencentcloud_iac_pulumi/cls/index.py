# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IndexArgs', 'Index']

@pulumi.input_type
class IndexArgs:
    def __init__(__self__, *,
                 topic_id: pulumi.Input[str],
                 include_internal_fields: Optional[pulumi.Input[bool]] = None,
                 metadata_flag: Optional[pulumi.Input[int]] = None,
                 rule: Optional[pulumi.Input['IndexRuleArgs']] = None,
                 status: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Index resource.
        :param pulumi.Input[str] topic_id: Log topic ID.
        :param pulumi.Input[bool] include_internal_fields: Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
        :param pulumi.Input[int] metadata_flag: Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
        :param pulumi.Input['IndexRuleArgs'] rule: Index rule.
        :param pulumi.Input[bool] status: Whether to take effect. Default value: true.
        """
        pulumi.set(__self__, "topic_id", topic_id)
        if include_internal_fields is not None:
            pulumi.set(__self__, "include_internal_fields", include_internal_fields)
        if metadata_flag is not None:
            pulumi.set(__self__, "metadata_flag", metadata_flag)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        """
        Log topic ID.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="includeInternalFields")
    def include_internal_fields(self) -> Optional[pulumi.Input[bool]]:
        """
        Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
        """
        return pulumi.get(self, "include_internal_fields")

    @include_internal_fields.setter
    def include_internal_fields(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_internal_fields", value)

    @property
    @pulumi.getter(name="metadataFlag")
    def metadata_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
        """
        return pulumi.get(self, "metadata_flag")

    @metadata_flag.setter
    def metadata_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metadata_flag", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input['IndexRuleArgs']]:
        """
        Index rule.
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input['IndexRuleArgs']]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to take effect. Default value: true.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _IndexState:
    def __init__(__self__, *,
                 include_internal_fields: Optional[pulumi.Input[bool]] = None,
                 metadata_flag: Optional[pulumi.Input[int]] = None,
                 rule: Optional[pulumi.Input['IndexRuleArgs']] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Index resources.
        :param pulumi.Input[bool] include_internal_fields: Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
        :param pulumi.Input[int] metadata_flag: Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
        :param pulumi.Input['IndexRuleArgs'] rule: Index rule.
        :param pulumi.Input[bool] status: Whether to take effect. Default value: true.
        :param pulumi.Input[str] topic_id: Log topic ID.
        """
        if include_internal_fields is not None:
            pulumi.set(__self__, "include_internal_fields", include_internal_fields)
        if metadata_flag is not None:
            pulumi.set(__self__, "metadata_flag", metadata_flag)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="includeInternalFields")
    def include_internal_fields(self) -> Optional[pulumi.Input[bool]]:
        """
        Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
        """
        return pulumi.get(self, "include_internal_fields")

    @include_internal_fields.setter
    def include_internal_fields(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_internal_fields", value)

    @property
    @pulumi.getter(name="metadataFlag")
    def metadata_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
        """
        return pulumi.get(self, "metadata_flag")

    @metadata_flag.setter
    def metadata_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metadata_flag", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input['IndexRuleArgs']]:
        """
        Index rule.
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input['IndexRuleArgs']]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to take effect. Default value: true.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Log topic ID.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)


class Index(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 include_internal_fields: Optional[pulumi.Input[bool]] = None,
                 metadata_flag: Optional[pulumi.Input[int]] = None,
                 rule: Optional[pulumi.Input[pulumi.InputType['IndexRuleArgs']]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cls index.

        ## Import

        cls cos index can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Cls/index:Index index 0937e56f-4008-49d2-ad2d-69c52a9f11cc
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] include_internal_fields: Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
        :param pulumi.Input[int] metadata_flag: Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
        :param pulumi.Input[pulumi.InputType['IndexRuleArgs']] rule: Index rule.
        :param pulumi.Input[bool] status: Whether to take effect. Default value: true.
        :param pulumi.Input[str] topic_id: Log topic ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IndexArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cls index.

        ## Import

        cls cos index can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Cls/index:Index index 0937e56f-4008-49d2-ad2d-69c52a9f11cc
        ```

        :param str resource_name: The name of the resource.
        :param IndexArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IndexArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 include_internal_fields: Optional[pulumi.Input[bool]] = None,
                 metadata_flag: Optional[pulumi.Input[int]] = None,
                 rule: Optional[pulumi.Input[pulumi.InputType['IndexRuleArgs']]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IndexArgs.__new__(IndexArgs)

            __props__.__dict__["include_internal_fields"] = include_internal_fields
            __props__.__dict__["metadata_flag"] = metadata_flag
            __props__.__dict__["rule"] = rule
            __props__.__dict__["status"] = status
            if topic_id is None and not opts.urn:
                raise TypeError("Missing required property 'topic_id'")
            __props__.__dict__["topic_id"] = topic_id
        super(Index, __self__).__init__(
            'tencentcloud:Cls/index:Index',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            include_internal_fields: Optional[pulumi.Input[bool]] = None,
            metadata_flag: Optional[pulumi.Input[int]] = None,
            rule: Optional[pulumi.Input[pulumi.InputType['IndexRuleArgs']]] = None,
            status: Optional[pulumi.Input[bool]] = None,
            topic_id: Optional[pulumi.Input[str]] = None) -> 'Index':
        """
        Get an existing Index resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] include_internal_fields: Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
        :param pulumi.Input[int] metadata_flag: Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
        :param pulumi.Input[pulumi.InputType['IndexRuleArgs']] rule: Index rule.
        :param pulumi.Input[bool] status: Whether to take effect. Default value: true.
        :param pulumi.Input[str] topic_id: Log topic ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IndexState.__new__(_IndexState)

        __props__.__dict__["include_internal_fields"] = include_internal_fields
        __props__.__dict__["metadata_flag"] = metadata_flag
        __props__.__dict__["rule"] = rule
        __props__.__dict__["status"] = status
        __props__.__dict__["topic_id"] = topic_id
        return Index(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="includeInternalFields")
    def include_internal_fields(self) -> pulumi.Output[Optional[bool]]:
        """
        Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
        """
        return pulumi.get(self, "include_internal_fields")

    @property
    @pulumi.getter(name="metadataFlag")
    def metadata_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
        """
        return pulumi.get(self, "metadata_flag")

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Output['outputs.IndexRule']:
        """
        Index rule.
        """
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[bool]:
        """
        Whether to take effect. Default value: true.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[str]:
        """
        Log topic ID.
        """
        return pulumi.get(self, "topic_id")

