# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetApiKeysResult',
    'AwaitableGetApiKeysResult',
    'get_api_keys',
    'get_api_keys_output',
]

@pulumi.output_type
class GetApiKeysResult:
    """
    A collection of values returned by getApiKeys.
    """
    def __init__(__self__, api_key_id=None, id=None, lists=None, result_output_file=None, secret_name=None):
        if api_key_id and not isinstance(api_key_id, str):
            raise TypeError("Expected argument 'api_key_id' to be a str")
        pulumi.set(__self__, "api_key_id", api_key_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if secret_name and not isinstance(secret_name, str):
            raise TypeError("Expected argument 'secret_name' to be a str")
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> Optional[str]:
        """
        API key ID.
        """
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetApiKeysListResult']:
        """
        A list of API keys.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")


class AwaitableGetApiKeysResult(GetApiKeysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiKeysResult(
            api_key_id=self.api_key_id,
            id=self.id,
            lists=self.lists,
            result_output_file=self.result_output_file,
            secret_name=self.secret_name)


def get_api_keys(api_key_id: Optional[str] = None,
                 result_output_file: Optional[str] = None,
                 secret_name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiKeysResult:
    """
    Use this data source to query API gateway access keys.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    test = tencentcloud.api_gateway.ApiKey("test",
        secret_name="my_api_key",
        status="on")
    name = tencentcloud.ApiGateway.get_api_keys_output(secret_name=test.secret_name)
    id = tencentcloud.ApiGateway.get_api_keys_output(api_key_id=test.id)
    ```


    :param str api_key_id: Created API key ID, this field is exactly the same as ID.
    :param str result_output_file: Used to save results.
    :param str secret_name: Custom key name.
    """
    __args__ = dict()
    __args__['apiKeyId'] = api_key_id
    __args__['resultOutputFile'] = result_output_file
    __args__['secretName'] = secret_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('tencentcloud:ApiGateway/getApiKeys:getApiKeys', __args__, opts=opts, typ=GetApiKeysResult).value

    return AwaitableGetApiKeysResult(
        api_key_id=__ret__.api_key_id,
        id=__ret__.id,
        lists=__ret__.lists,
        result_output_file=__ret__.result_output_file,
        secret_name=__ret__.secret_name)


@_utilities.lift_output_func(get_api_keys)
def get_api_keys_output(api_key_id: Optional[pulumi.Input[Optional[str]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        secret_name: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApiKeysResult]:
    """
    Use this data source to query API gateway access keys.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    test = tencentcloud.api_gateway.ApiKey("test",
        secret_name="my_api_key",
        status="on")
    name = tencentcloud.ApiGateway.get_api_keys_output(secret_name=test.secret_name)
    id = tencentcloud.ApiGateway.get_api_keys_output(api_key_id=test.id)
    ```


    :param str api_key_id: Created API key ID, this field is exactly the same as ID.
    :param str result_output_file: Used to save results.
    :param str secret_name: Custom key name.
    """
    ...
