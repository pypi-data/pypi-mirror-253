# coding: utf-8

"""
    Stock API

    Stock API for Korbyte

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Details(BaseModel):
    """
    Details
    """ # noqa: E501
    id: Optional[StrictInt] = None
    market_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="marketCapacity")
    phone_number: Optional[StrictStr] = Field(default=None, alias="phoneNumber")
    description: Optional[StrictStr] = None
    sic_code: Optional[StrictStr] = Field(default=None, alias="sicCode")
    sic_description: Optional[StrictStr] = Field(default=None, alias="sicDescription")
    ticker_root: Optional[StrictStr] = Field(default=None, alias="tickerRoot")
    homepage_url: Optional[StrictStr] = Field(default=None, alias="homepageUrl")
    total_employees: Optional[StrictInt] = Field(default=None, alias="totalEmployees")
    shares_outstanding: Optional[StrictInt] = Field(default=None, alias="sharesOutstanding")
    weighted_shares_outstanding: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="weightedSharesOutstanding")
    round_lot: Optional[StrictInt] = Field(default=None, alias="roundLot")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    __properties: ClassVar[List[str]] = ["id", "marketCapacity", "phoneNumber", "description", "sicCode", "sicDescription", "tickerRoot", "homepageUrl", "totalEmployees", "sharesOutstanding", "weightedSharesOutstanding", "roundLot", "createdAt", "updatedAt"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Details from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Details from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "marketCapacity": obj.get("marketCapacity"),
            "phoneNumber": obj.get("phoneNumber"),
            "description": obj.get("description"),
            "sicCode": obj.get("sicCode"),
            "sicDescription": obj.get("sicDescription"),
            "tickerRoot": obj.get("tickerRoot"),
            "homepageUrl": obj.get("homepageUrl"),
            "totalEmployees": obj.get("totalEmployees"),
            "sharesOutstanding": obj.get("sharesOutstanding"),
            "weightedSharesOutstanding": obj.get("weightedSharesOutstanding"),
            "roundLot": obj.get("roundLot"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


