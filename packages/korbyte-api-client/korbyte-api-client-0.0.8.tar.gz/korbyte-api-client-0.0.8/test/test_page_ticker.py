# coding: utf-8

"""
    Stock API

    Stock API for Korbyte

    The version of the OpenAPI document: 0.0.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from korbyte_api_client.models.page_ticker import PageTicker

class TestPageTicker(unittest.TestCase):
    """PageTicker unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PageTicker:
        """Test PageTicker
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PageTicker`
        """
        model = PageTicker()
        if include_optional:
            return PageTicker(
                total_pages = 56,
                total_elements = 56,
                pageable = korbyte_api_client.models.pageable_object.PageableObject(
                    page_number = 56, 
                    page_size = 56, 
                    paged = True, 
                    unpaged = True, 
                    offset = 56, 
                    sort = korbyte_api_client.models.sort_object.SortObject(
                        sorted = True, 
                        unsorted = True, 
                        empty = True, ), ),
                size = 56,
                content = [
                    korbyte_api_client.models.ticker.Ticker(
                        id = 56, 
                        symbol = '', 
                        name = '', 
                        cik = '', 
                        composite_figi = '', 
                        share_class_figi = '', 
                        active = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        exchange = korbyte_api_client.models.exchange.Exchange(
                            id = 56, 
                            name = '', 
                            mic = '', 
                            operating_mic = '', 
                            participating_id = '', 
                            type = '', 
                            url = '', 
                            locale = '', 
                            asset = '', ), 
                        tracking = korbyte_api_client.models.tracking.Tracking(
                            id = 56, 
                            daily = True, ), 
                        details = korbyte_api_client.models.details.Details(
                            id = 56, 
                            market_capacity = 1.337, 
                            phone_number = '', 
                            description = '', 
                            sic_code = '', 
                            sic_description = '', 
                            ticker_root = '', 
                            homepage_url = '', 
                            total_employees = 56, 
                            shares_outstanding = 56, 
                            weighted_shares_outstanding = 1.337, 
                            round_lot = 56, 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                    ],
                number = 56,
                sort = korbyte_api_client.models.sort_object.SortObject(
                    sorted = True, 
                    unsorted = True, 
                    empty = True, ),
                first = True,
                last = True,
                number_of_elements = 56,
                empty = True
            )
        else:
            return PageTicker(
        )
        """

    def testPageTicker(self):
        """Test PageTicker"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
