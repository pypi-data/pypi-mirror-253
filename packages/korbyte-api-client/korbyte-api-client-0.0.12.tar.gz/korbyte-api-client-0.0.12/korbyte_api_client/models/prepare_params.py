# coding: utf-8

"""
    Stock API

    Stock API for Korbyte

    The version of the OpenAPI document: 0.0.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PrepareParams(BaseModel):
    """
    PrepareParams
    """ # noqa: E501
    symbol: Optional[StrictStr] = 'MSFT'
    limit: Optional[StrictInt] = 2147483647
    order: Optional[StrictStr] = 'DESC'
    precision: Optional[StrictInt] = 2
    timespan: Optional[StrictStr] = None
    fields: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["symbol", "limit", "order", "precision", "timespan", "fields"]

    @field_validator('order')
    def order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ASC', 'DESC'):
            raise ValueError("must be one of enum values ('ASC', 'DESC')")
        return value

    @field_validator('timespan')
    def timespan_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DAY'):
            raise ValueError("must be one of enum values ('DAY')")
        return value

    @field_validator('fields')
    def fields_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('OPEN', 'CLOSE', 'HIGH', 'LOW', 'ADJUSTED_OPEN', 'ADJUSTED_CLOSE', 'ADJUSTED_HIGH', 'ADJUSTED_LOW', 'VOLUME', 'VOLUME_WEIGHTED_AVERAGE'):
                raise ValueError("each list item must be one of ('OPEN', 'CLOSE', 'HIGH', 'LOW', 'ADJUSTED_OPEN', 'ADJUSTED_CLOSE', 'ADJUSTED_HIGH', 'ADJUSTED_LOW', 'VOLUME', 'VOLUME_WEIGHTED_AVERAGE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PrepareParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PrepareParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol") if obj.get("symbol") is not None else 'MSFT',
            "limit": obj.get("limit") if obj.get("limit") is not None else 2147483647,
            "order": obj.get("order") if obj.get("order") is not None else 'DESC',
            "precision": obj.get("precision") if obj.get("precision") is not None else 2,
            "timespan": obj.get("timespan"),
            "fields": obj.get("fields")
        })
        return _obj


