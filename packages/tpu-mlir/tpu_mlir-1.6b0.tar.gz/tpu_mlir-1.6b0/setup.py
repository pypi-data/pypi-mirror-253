from setuptools import setup
import os

setup(
    name="tpu_mlir",
    version=os.getenv("mlir_version").split("-")[0],
    author="SOPHGO",
    author_email="sales@sophgo.com",
    description=f"Machine learning compiler based on MLIR for Sophgo TPU {os.getenv('mlir_version')}.",
    long_description=open('README.md').read(),
    long_description_content_type='text/markdown',
    license="2-Clause BSD",
    platforms="unbuntu22.04",
    python_requires=">=3.10,<3.11",
    url="https://github.com/sophgo/tpu-mlir",
    include_package_data=True,
    packages=["tpu_mlir"],
    keywords=["python3.10", "unbuntu22.04", "linux", "tpu-mlir"],
    classifiers=[
        "Intended Audience :: Developers",
        "Programming Language :: Python :: 3.10",
        "Topic :: Software Development",
    ],
    install_requires=[
        "numpy==1.24.3",
        "scipy==1.11.1",
        "tqdm==4.65.0",
        "Pillow==10.0.0",
        "plotly==5.15.0",
        "opencv-python-headless==4.8.0.74",
        "protobuf==3.20.3",
        "graphviz==0.20.1",
        "pycocotools==2.0.6",
        "scikit-image==0.21.0",
        "transformers==4.31.0",
    ],
    extras_require={
        "all": [
            # torch
            "torch==2.0.1",
            "torchvision==0.15.2",
            # onnx
            "onnx==1.14.0",
            "onnxruntime==1.15.1",
            "onnxsim==0.4.17",
            # caffe 
            "six==1.16.0",
            # tensorflow
            "tensorflow-cpu==2.13.0",
            "tf2onnx==1.8.4",
            # paddle
            "paddlepaddle==2.5.0",
            "paddle2onnx==1.0.8",
        ],
        "torch": [
            "torch==2.0.1",
            "torchvision==0.15.2"
        ],
        "onnx": [
            "onnx==1.14.0",
            "onnxruntime==1.15.1",
            "onnxsim==0.4.17"
        ],
        "caffe": [
            "six==1.16.0",
        ],
        "tensorflow": [
            "tensorflow-cpu==2.13.0",
            "tf2onnx==1.8.4"
        ],
        "paddle": [
            "paddlepaddle==2.5.0",
            "paddle2onnx==1.0.8",
        ]
    },
    scripts=["release_tools/envsetup.sh"],
    entry_points={
        "console_scripts": [  # command entries corresponding to the functions in entry.py.
            # "tpu_mlir_get_resource=tpu_mlir:cp_from_package_root",
            ### Command Entries Will Be Set From Here. Do Not Delete This Line! ###
            "model_tool=tpu_mlir.entry:model_tool",
            "model_tool.py=tpu_mlir.entry:model_tool",
            "cvimodel_debug=tpu_mlir.entry:cvimodel_debug",
            "cvimodel_debug.py=tpu_mlir.entry:cvimodel_debug",
            "tpuc-opt=tpu_mlir.entry:tpuc_opt",
            "tpuc-opt.py=tpu_mlir.entry:tpuc_opt",
            "compare_visualizer=tpu_mlir.entry:compare_visualizer",
            "compare_visualizer.py=tpu_mlir.entry:compare_visualizer",
            "gen_shell=tpu_mlir.entry:gen_shell",
            "gen_shell.py=tpu_mlir.entry:gen_shell",
            "mlir2onnx=tpu_mlir.entry:mlir2onnx",
            "mlir2onnx.py=tpu_mlir.entry:mlir2onnx",
            "fp_forward=tpu_mlir.entry:fp_forward",
            "fp_forward.py=tpu_mlir.entry:fp_forward",
            "bmodel_checker=tpu_mlir.entry:bmodel_checker",
            "bmodel_checker.py=tpu_mlir.entry:bmodel_checker",
            "model_eval_imagenet=tpu_mlir.entry:model_eval_imagenet",
            "model_eval_imagenet.py=tpu_mlir.entry:model_eval_imagenet",
            "run_qtable=tpu_mlir.entry:run_qtable",
            "run_qtable.py=tpu_mlir.entry:run_qtable",
            "mlir2graph=tpu_mlir.entry:mlir2graph",
            "mlir2graph.py=tpu_mlir.entry:mlir2graph",
            "model_deploy=tpu_mlir.entry:model_deploy",
            "model_deploy.py=tpu_mlir.entry:model_deploy",
            "mlir_cut=tpu_mlir.entry:mlir_cut",
            "mlir_cut.py=tpu_mlir.entry:mlir_cut",
            "model_transform=tpu_mlir.entry:model_transform",
            "model_transform.py=tpu_mlir.entry:model_transform",
            "model_eval=tpu_mlir.entry:model_eval",
            "model_eval.py=tpu_mlir.entry:model_eval",
            "tpu_profile=tpu_mlir.entry:tpu_profile",
            "tpu_profile.py=tpu_mlir.entry:tpu_profile",
            "model_runner=tpu_mlir.entry:model_runner",
            "model_runner.py=tpu_mlir.entry:model_runner",
            "model_inference_cpu=tpu_mlir.entry:model_inference_cpu",
            "model_inference_cpu.py=tpu_mlir.entry:model_inference_cpu",
            "assign_output=tpu_mlir.entry:assign_output",
            "assign_output.py=tpu_mlir.entry:assign_output",
            "bmodel_dis=tpu_mlir.entry:bmodel_dis",
            "bmodel_dis.py=tpu_mlir.entry:bmodel_dis",
            "gen_rand_input=tpu_mlir.entry:gen_rand_input",
            "gen_rand_input.py=tpu_mlir.entry:gen_rand_input",
            "pmu_dump=tpu_mlir.entry:pmu_dump",
            "pmu_dump.py=tpu_mlir.entry:pmu_dump",
            "npz_tool=tpu_mlir.entry:npz_tool",
            "npz_tool.py=tpu_mlir.entry:npz_tool",
            "bmrt_test=tpu_mlir.entry:bmrt_test",
            "bmrt_test.py=tpu_mlir.entry:bmrt_test",
            "run_sensitive_layer=tpu_mlir.entry:run_sensitive_layer",
            "run_sensitive_layer.py=tpu_mlir.entry:run_sensitive_layer",
            "tdb=tpu_mlir.entry:tdb",
            "tdb.py=tpu_mlir.entry:tdb",
            "run_calibration=tpu_mlir.entry:run_calibration",
            "run_calibration.py=tpu_mlir.entry:run_calibration",
            "visual=tpu_mlir.entry:visual",
            "visual.py=tpu_mlir.entry:visual",
            "code_stripper=tpu_mlir.entry:code_stripper",
            "code_stripper.py=tpu_mlir.entry:code_stripper",
            "detect_yolov3=tpu_mlir.entry:detect_yolov3",
            "detect_yolov3.py=tpu_mlir.entry:detect_yolov3",
            "detect_ssd-12=tpu_mlir.entry:detect_ssd_12",
            "detect_ssd-12.py=tpu_mlir.entry:detect_ssd_12",
            "detect_pp_yolox=tpu_mlir.entry:detect_pp_yolox",
            "detect_pp_yolox.py=tpu_mlir.entry:detect_pp_yolox",
            "detect_yolov5=tpu_mlir.entry:detect_yolov5",
            "detect_yolov5.py=tpu_mlir.entry:detect_yolov5",
            "classify_inception_v3=tpu_mlir.entry:classify_inception_v3",
            "classify_inception_v3.py=tpu_mlir.entry:classify_inception_v3",
            "detect_pp_picodet=tpu_mlir.entry:detect_pp_picodet",
            "detect_pp_picodet.py=tpu_mlir.entry:detect_pp_picodet",
            "classify_squeezenet=tpu_mlir.entry:classify_squeezenet",
            "classify_squeezenet.py=tpu_mlir.entry:classify_squeezenet",
            "classify_vgg16=tpu_mlir.entry:classify_vgg16",
            "classify_vgg16.py=tpu_mlir.entry:classify_vgg16",
            "classify_resnext50=tpu_mlir.entry:classify_resnext50",
            "classify_resnext50.py=tpu_mlir.entry:classify_resnext50",
            "detect_ultraface=tpu_mlir.entry:detect_ultraface",
            "detect_ultraface.py=tpu_mlir.entry:detect_ultraface",
            "classify_DenseNet=tpu_mlir.entry:classify_DenseNet",
            "classify_DenseNet.py=tpu_mlir.entry:classify_DenseNet",
            "classify_resnet50=tpu_mlir.entry:classify_resnet50",
            "classify_resnet50.py=tpu_mlir.entry:classify_resnet50",
            "classify_shufflenet=tpu_mlir.entry:classify_shufflenet",
            "classify_shufflenet.py=tpu_mlir.entry:classify_shufflenet",
            "detect_retinaface=tpu_mlir.entry:detect_retinaface",
            "detect_retinaface.py=tpu_mlir.entry:detect_retinaface",
            "classify_LeNet=tpu_mlir.entry:classify_LeNet",
            "classify_LeNet.py=tpu_mlir.entry:classify_LeNet",
            "classify_resnet18=tpu_mlir.entry:classify_resnet18",
            "classify_resnet18.py=tpu_mlir.entry:classify_resnet18",
            "detect_pp_yoloe=tpu_mlir.entry:detect_pp_yoloe",
            "detect_pp_yoloe.py=tpu_mlir.entry:detect_pp_yoloe",
            "classify_xception=tpu_mlir.entry:classify_xception",
            "classify_xception.py=tpu_mlir.entry:classify_xception",
            "seg_humanseg=tpu_mlir.entry:seg_humanseg",
            "seg_humanseg.py=tpu_mlir.entry:seg_humanseg",
            "classify_efficientnet=tpu_mlir.entry:classify_efficientnet",
            "classify_efficientnet.py=tpu_mlir.entry:classify_efficientnet",
            "classify_mobilenet_v2=tpu_mlir.entry:classify_mobilenet_v2",
            "classify_mobilenet_v2.py=tpu_mlir.entry:classify_mobilenet_v2",
        ]
    },
)
