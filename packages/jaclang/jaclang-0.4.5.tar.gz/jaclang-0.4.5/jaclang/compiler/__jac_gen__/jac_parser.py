# The file was automatically generated by Lark v1.1.8
__version__ = "1.1.8"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from copy import deepcopy
from abc import ABC, abstractmethod
from types import ModuleType
from typing import (
    TypeVar,
    Generic,
    Type,
    Tuple,
    List,
    Dict,
    Iterator,
    Collection,
    Callable,
    Optional,
    FrozenSet,
    Any,
    Union,
    Iterable,
    IO,
    TYPE_CHECKING,
    overload,
    Sequence,
    Pattern as REPattern,
    ClassVar,
    Set,
    Mapping,
)




class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg="Got %r, expected one of %s"):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass


T = TypeVar("T")


class UnexpectedInput(LarkError):
    #--

    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None
    interactive_parser: "InteractiveParser"

    def get_context(self, text: str, span: int = 40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit("\n", 1)[-1]
            after = text[pos:end].split("\n", 1)[0]
            return before + after + "\n" + " " * len(before.expandtabs()) + "^\n"
        else:
            before = text[start:pos].rsplit(b"\n", 1)[-1]
            after = text[pos:end].split(b"\n", 1)[0]
            return (
                before + after + b"\n" + b" " * len(before.expandtabs()) + b"^\n"
            ).decode("ascii", "backslashreplace")

    def match_examples(
        self,
        parse_fn: "Callable[[str], Tree]",
        examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
        token_type_match_fallback: bool = False,
        use_accepts: bool = True,
    ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug(
                                "Different accepts with same state[%d]: %s != %s at example [%s][%s]"
                                % (self.state, self.accepts, ut.accepts, i, j)
                            )
                            continue
                        if isinstance(
                            self, (UnexpectedToken, UnexpectedEOF)
                        ) and isinstance(ut, (UnexpectedToken, UnexpectedEOF)):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[
                                    -1
                                ]:
                                    logger.debug(
                                        "Token Type Fallback at example [%s][%s]"
                                        % (i, j)
                                    )
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug(
                                "Same State match at example [%s][%s]" % (i, j)
                            )
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [
                d[t_name].user_repr() if t_name in d else t_name for t_name in expected
            ]
        return "Expected one of: \n\t* %s\n" % "\n\t* ".join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--

    expected: "List[Token]"

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token

        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name

    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(
        self,
        seq,
        lex_pos,
        line,
        column,
        allowed=None,
        considered_tokens=None,
        state=None,
        token_history=None,
        terminals_by_name=None,
        considered_rules=None,
    ):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos : lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)

    def __str__(self):
        message = (
            "No terminal matches '%s' in the current parser context, at line %d col %d"
            % (self.char, self.line, self.column)
        )
        message += "\n\n" + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += "\nPrevious tokens: %s\n" % ", ".join(
                repr(t) for t in self.token_history
            )
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]

    def __init__(
        self,
        token,
        expected,
        considered_rules=None,
        state=None,
        interactive_parser=None,
        terminals_by_name=None,
        token_history=None,
    ):
        super(UnexpectedToken, self).__init__()

        ##

        self.line = getattr(token, "line", "?")
        self.column = getattr(token, "column", "?")
        self.pos_in_stream = getattr(token, "start_pos", None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history

    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = (
                self.interactive_parser and self.interactive_parser.accepts()
            )
        return self._accepts

    def __str__(self):
        message = "Unexpected token %r at line %s, column %s.\n%s" % (
            self.token,
            self.line,
            self.column,
            self._format_expected(self.accepts or self.expected),
        )
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message


class VisitError(LarkError):
    #--

    obj: "Union[Tree, Token]"
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass



import sys, re
import logging

logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()

T = TypeVar("T")


def classify(
    seq: Iterable, key: Optional[Callable] = None, value: Optional[Callable] = None
) -> Dict:
    d: Dict[Any, Any] = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        try:
            d[k].append(v)
        except KeyError:
            d[k] = [v]
    return d


def _deserialize(data: Any, namespace: Dict[str, Any], memo: Dict) -> Any:
    if isinstance(data, dict):
        if "__type__" in data:  ##

            class_ = namespace[data["__type__"]]
            return class_.deserialize(data, memo)
        elif "@" in data:
            return memo[data["@"]]
        return {
            key: _deserialize(value, namespace, memo) for key, value in data.items()
        }
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


_T = TypeVar("_T", bound="Serialize")


class Serialize:
    #--

    def memo_serialize(self, types_to_memoize: List) -> Any:
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None) -> Dict[str, Any]:
        if memo and memo.in_types(self):
            return {"@": memo.memoized.get(self)}

        fields = getattr(self, "__serialize_fields__")
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res["__type__"] = type(self).__name__
        if hasattr(self, "_serialize"):
            self._serialize(res, memo)  ##

        return res

    @classmethod
    def deserialize(cls: Type[_T], data: Dict[str, Any], memo: Dict[int, Any]) -> _T:
        namespace = getattr(cls, "__serialize_namespace__", [])
        namespace = {c.__name__: c for c in namespace}

        fields = getattr(cls, "__serialize_fields__")

        if "@" in data:
            return memo[data["@"]]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, "_deserialize"):
            inst._deserialize()  ##


        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = ("memoized",)

    def __init__(self, types_to_memoize: List) -> None:
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value: Serialize) -> bool:
        return isinstance(value, self.types_to_memoize)

    def serialize(self) -> Dict[int, Any]:  ##

        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data: Dict[int, Any], namespace: Dict[str, Any], memo: Dict[Any, Any]) -> Dict[int, Any]:  ##

        return _deserialize(data, namespace, memo)


try:
    import regex

    _has_regex = True
except ImportError:
    _has_regex = False

if sys.version_info >= (3, 11):
    import re._parser as sre_parse
    import re._constants as sre_constants
else:
    import sre_parse
    import sre_constants

categ_pattern = re.compile(r"\\p{[A-Za-z_]+}")


def get_regexp_width(expr: str) -> Union[Tuple[int, int], List[int]]:
    if _has_regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, "A", expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError(
                "`regex` module must be installed in order to use Unicode categories.",
                expr,
            )
        regexp_final = expr
    try:
        ##

        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]  ##

    except sre_constants.error:
        if not _has_regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match("") is None:
                ##

                return 1, int(sre_constants.MAXREPEAT)
            else:
                return 0, int(sre_constants.MAXREPEAT)



from collections import OrderedDict


class Meta:
    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: "List[TerminalDef]"
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, "Tree[_Leaf_T]"]


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: "List[Branch[_Leaf_T]]"

    def __init__(
        self, data: str, children: "List[Branch[_Leaf_T]]", meta: Optional[Meta] = None
    ) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return "Tree(%r, %r)" % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        yield f"{indent_str*level}{self._pretty_label()}"
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            yield f"\t{self.children[0]}\n"
        else:
            yield "\n"
            for n in self.children:
                if isinstance(n, Tree):
                    yield from n._pretty(level + 1, indent_str)
                else:
                    yield f"{indent_str*(level+1)}{n}\n"

    def pretty(self, indent_str: str = "  ") -> str:
        #--
        return "".join(self._pretty(0, indent_str))

    def __rich__(self, parent: Optional["rich.tree.Tree"] = None) -> "rich.tree.Tree":
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f"[bold]{self.data}[/bold]")
        else:
            import rich.tree

            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f"[green]{c}[/green]")

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> "Iterator[Tree[_Leaf_T]]":
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            ##

            queue += [
                c
                for c in reversed(subtree.children)  ##

                if isinstance(c, Tree) and id(c) not in subtrees
            ]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        stack_append = stack.append
        stack_pop = stack.pop
        while stack:
            node = stack_pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack_append(child)

    def find_pred(
        self, pred: "Callable[[Tree[_Leaf_T]], bool]"
    ) -> "Iterator[Tree[_Leaf_T]]":
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> "Iterator[Tree[_Leaf_T]]":
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar("_Return_T")
_Return_V = TypeVar("_Return_V")
_Leaf_T = TypeVar("_Leaf_T")
_Leaf_U = TypeVar("_Leaf_U")
_R = TypeVar("_R")
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]


class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"


Discard = _DiscardType()

##



class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):
            ##

            if name.startswith("_") or (
                name in libmembers and name not in cls.__dict__
            ):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    __visit_tokens__ = True  ##


    def __init__(self, visit_tokens: bool = True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, "visit_wrapper", None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        return self._transform_tree(tree)

    def __mul__(
        self: "Transformer[_Leaf_T, Tree[_Leaf_U]]",
        other: "Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]",
    ) -> "TransformerChain[_Leaf_T, _Return_V]":
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError(
                    "Cannot merge: method '%s' appears more than once" % prefixed_method
                )

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):  ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):
    transformers: "Tuple[Union[Transformer, TransformerChain], ...]"

    def __init__(self, *transformers: "Union[Transformer, TransformerChain]") -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
        self: "TransformerChain[_Leaf_T, Tree[_Leaf_U]]",
        other: "Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]",
    ) -> "TransformerChain[_Leaf_T, _Return_V]":
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer[_Leaf_T, _Return_T]):
    #--

    def _transform_tree(self, tree):  ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer[_Leaf_T, _Return_T]):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        (result,) = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--

    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##



class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, "visit_wrapper", None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [
            self._visit_tree(child) if isinstance(child, Tree) else child
            for child in tree.children
        ]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]


def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--

    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)

    return inner


##



def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--

    base_func: Callable

    def __init__(
        self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]
    ):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        ##

        self.base_func = func  ##

        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            ##

            ##

            g = type(self.base_func).__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(self.base_func, instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = type(self.base_func).__set_name__
        except AttributeError:
            return
        else:
            f(self.base_func, owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)


def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)


def _vargs_meta(f, _data, children, meta):
    return f(meta, children)


def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(
    inline: bool = False,
    meta: bool = False,
    tree: bool = False,
    wrapper: Optional[Callable] = None,
) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError(
            "Visitor functions cannot combine 'tree' with 'meta' or 'inline'."
        )

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError(
                "Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'."
            )
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)

    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ("name",)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return "%s(%r)" % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = "name", "filter_out"

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return "%s(%r, %r)" % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = ("name",)

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = (
        "keep_all_tokens",
        "expand1",
        "priority",
        "template_source",
        "empty_indices",
    )

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(
        self,
        keep_all_tokens: bool = False,
        expand1: bool = False,
        priority: Optional[int] = None,
        template_source: Optional[str] = None,
        empty_indices: Tuple[bool, ...] = (),
    ) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return "RuleOptions(%r, %r, %r, %r)" % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source,
        )


class Rule(Serialize):
    #--

    __slots__ = ("origin", "expansion", "alias", "options", "order", "_hash")

    __serialize_fields__ = "origin", "expansion", "order", "alias", "options"
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    origin: NonTerminal
    expansion: Sequence[Symbol]
    order: int
    alias: Optional[str]
    options: RuleOptions
    _hash: int

    def __init__(
        self,
        origin: NonTerminal,
        expansion: Sequence[Symbol],
        order: int = 0,
        alias: Optional[str] = None,
        options: Optional[RuleOptions] = None,
    ):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return "<%s : %s>" % (
            self.origin.name,
            " ".join(x.name for x in self.expansion),
        )

    def __repr__(self):
        return "Rule(%r, %r, %r, %r)" % (
            self.origin,
            self.expansion,
            self.alias,
            self.options,
        )

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy

try:  ##

    has_interegular = bool(interegular)
except NameError:
    has_interegular = False


class Pattern(Serialize, ABC):
    #--

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(
        self, value: str, flags: Collection[str] = (), raw: Optional[str] = None
    ) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return (
            type(self) == type(other)
            and self.value == other.value
            and self.flags == other.flags
        )

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = "(?%s:%s)" % (f, value)
        return value


class PatternStr(Pattern):
    __serialize_fields__ = "value", "flags", "raw"

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = "value", "flags", "raw", "_width"

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None

    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    #--
    __serialize_fields__ = "name", "pattern", "priority"
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(
        self, name: str, pattern: Pattern, priority: int = TOKEN_DEFAULT_PRIORITY
    ) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return "%s(%r, %r)" % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith("__"):  ##

            return self.pattern.raw or self.name
        else:
            return self.name


_T = TypeVar("_T", bound="Token")


class Token(str):
    #--

    __slots__ = (
        "type",
        "start_pos",
        "value",
        "line",
        "column",
        "end_line",
        "end_column",
        "end_pos",
    )

    __match_args__ = ("type", "value")

    type: str
    start_pos: Optional[int]
    value: Any
    line: Optional[int]
    column: Optional[int]
    end_line: Optional[int]
    end_column: Optional[int]
    end_pos: Optional[int]

    @overload
    def __new__(
        cls,
        type: str,
        value: Any,
        start_pos: Optional[int] = None,
        line: Optional[int] = None,
        column: Optional[int] = None,
        end_line: Optional[int] = None,
        end_column: Optional[int] = None,
        end_pos: Optional[int] = None,
    ) -> "Token":
        ...

    @overload
    def __new__(
        cls,
        type_: str,
        value: Any,
        start_pos: Optional[int] = None,
        line: Optional[int] = None,
        column: Optional[int] = None,
        end_line: Optional[int] = None,
        end_column: Optional[int] = None,
        end_pos: Optional[int] = None,
    ) -> "Token":
        ...

    def __new__(cls, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn(
                "`type_` is deprecated use `type` instead", DeprecationWarning
            )

            if "type" in kwargs:
                raise TypeError(
                    "Error: using both 'type' and the deprecated 'type_' as arguments."
                )
            kwargs["type"] = kwargs.pop("type_")

        return cls._future_new(*args, **kwargs)

    @classmethod
    def _future_new(
        cls,
        type,
        value,
        start_pos=None,
        line=None,
        column=None,
        end_line=None,
        end_column=None,
        end_pos=None,
    ):
        inst = super(Token, cls).__new__(cls, value)

        inst.type = type
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    @overload
    def update(
        self, type: Optional[str] = None, value: Optional[Any] = None
    ) -> "Token":
        ...

    @overload
    def update(
        self, type_: Optional[str] = None, value: Optional[Any] = None
    ) -> "Token":
        ...

    def update(self, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn(
                "`type_` is deprecated use `type` instead", DeprecationWarning
            )

            if "type" in kwargs:
                raise TypeError(
                    "Error: using both 'type' and the deprecated 'type_' as arguments."
                )
            kwargs["type"] = kwargs.pop("type_")

        return self._future_update(*args, **kwargs)

    def _future_update(
        self, type: Optional[str] = None, value: Optional[Any] = None
    ) -> "Token":
        return Token.new_borrow_pos(
            type if type is not None else self.type,
            value if value is not None else self.value,
            self,
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: "Token") -> _T:
        return cls(
            type_,
            value,
            borrow_t.start_pos,
            borrow_t.line,
            borrow_t.column,
            borrow_t.end_line,
            borrow_t.end_column,
            borrow_t.end_pos,
        )

    def __reduce__(self):
        return (
            self.__class__,
            (self.type, self.value, self.start_pos, self.line, self.column),
        )

    def __repr__(self):
        return "Token(%r, %r)" % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    #--

    __slots__ = "char_pos", "line", "column", "line_start_pos", "newline_char"

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return (
            self.char_pos == other.char_pos and self.newline_char == other.newline_char
        )

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = (
                    self.char_pos + token.rindex(self.newline_char) + 1
                )

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)


def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(
                Scanner(
                    unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes
                )
            )

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = "$" if self.match_whole else ""
        mres = []
        while terminals:
            pattern = "|".join(
                "(?P<%s>%s)" % (t.name, t.pattern.to_regexp() + postfix)
                for t in terminals[:max_size]
            )
            if self.use_bytes:
                pattern = pattern.encode("latin-1")
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size // 2)

            mres.append(mre)
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), m.lastgroup


def _regexp_has_newline(r: str):
    #--
    return (
        "\n" in r or "\\n" in r or "\\s" in r or "[^" in r or ("(?s" in r and "." in r)
    )


class LexerState:
    #--

    __slots__ = "text", "line_ctr", "last_token"

    text: str
    line_ctr: LineCounter
    last_token: Optional[Token]

    def __init__(
        self,
        text: str,
        line_ctr: Optional[LineCounter] = None,
        last_token: Optional[Token] = None,
    ):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(
            b"\n" if isinstance(text, bytes) else "\n"
        )
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return (
            self.text is other.text
            and self.line_ctr == other.line_ctr
            and self.last_token == other.last_token
        )

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: "Lexer", lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: "Lexer", text: str) -> "LexerThread":
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]


class Lexer(ABC):
    #--

    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


def _check_regex_collisions(
    terminal_to_regexp: Dict[TerminalDef, str],
    comparator,
    strict_mode,
    max_collisions_to_show=8,
):
    if not comparator:
        comparator = interegular.Comparator.from_regexes(terminal_to_regexp)

    ##

    ##

    max_time = 2 if strict_mode else 0.2

    ##

    if comparator.count_marked_pairs() >= max_collisions_to_show:
        return
    for group in classify(terminal_to_regexp, lambda t: t.priority).values():
        for a, b in comparator.check(group, skip_marked=True):
            assert a.priority == b.priority
            ##

            comparator.mark(a, b)

            ##

            message = f"Collision between Terminals {a.name} and {b.name}. "
            try:
                example = comparator.get_example_overlap(
                    a, b, max_time
                ).format_multiline()
            except ValueError:
                ##

                example = "No example could be found fast enough. However, the collision does still exists"
            if strict_mode:
                raise LexError(f"{message}\n{example}")
            logger.warning(
                "%s The lexer will choose between them arbitrarily.\n%s",
                message,
                example,
            )
            if comparator.count_marked_pairs() >= max_collisions_to_show:
                logger.warning("Found 8 regex collisions, will not check for more.")
                return


class AbstractBasicLexer(Lexer):
    terminals_by_name: Dict[str, TerminalDef]

    @abstractmethod
    def __init__(self, conf: "LexerConf", comparator=None) -> None:
        ...

    @abstractmethod
    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        ...

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)


class BasicLexer(AbstractBasicLexer):
    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: "LexerConf", comparator=None) -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            terminal_to_regexp = {}
            for t in terminals:
                regexp = t.pattern.to_regexp()
                try:
                    self.re.compile(regexp, conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError(
                        "Lexer does not allow zero-width terminals. (%s: %s)"
                        % (t.name, t.pattern)
                    )
                if t.pattern.type == "re":
                    terminal_to_regexp[t] = regexp

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError(
                    "Ignore terminals are not defined: %s"
                    % (set(conf.ignore) - {t.name for t in terminals})
                )

            if has_interegular:
                _check_regex_collisions(terminal_to_regexp, comparator, conf.strict)
            elif conf.strict:
                raise LexError(
                    "interegular must be installed for strict mode. Use `pip install 'lark[interegular]'`."
                )

        ##

        self.newline_types = frozenset(
            t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())
        )
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(
            key=lambda x: (
                -x.priority,
                -x.pattern.max_width,
                -len(x.pattern.value),
                x.name,
            )
        )
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(
            self.terminals, self.g_regex_flags, self.re, self.use_bytes
        )
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(
                    self.callback[type_], f, lambda t: t.type == type_
                )
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(
                    lex_state.text,
                    line_ctr.char_pos,
                    line_ctr.line,
                    line_ctr.column,
                    allowed=allowed,
                    token_history=lex_state.last_token and [lex_state.last_token],
                    state=parser_state,
                    terminals_by_name=self.terminals_by_name,
                )

            value, type_ = res

            ignored = type_ in self.ignore_types
            t = None
            if not ignored or type_ in self.callback:
                t = Token(
                    type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column
                )
            line_ctr.feed(value, type_ in self.newline_types)
            if t is not None:
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                if not ignored:
                    if not isinstance(t, Token):
                        raise LexError(
                            "Callbacks must return a token (returned %r)" % t
                        )
                    lex_state.last_token = t
                    return t

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):
    lexers: Dict[int, AbstractBasicLexer]
    root_lexer: AbstractBasicLexer

    BasicLexer: Type[AbstractBasicLexer] = BasicLexer

    def __init__(
        self,
        conf: "LexerConf",
        states: Dict[int, Collection[str]],
        always_accept: Collection[str] = (),
    ) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        if has_interegular and not conf.skip_validation:
            comparator = interegular.Comparator.from_regexes(
                {t: t.pattern.to_regexp() for t in terminals}
            )
        else:
            comparator = None
        lexer_by_tokens: Dict[FrozenSet[str], AbstractBasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [
                    terminals_by_name[n] for n in accepts if n in terminals_by_name
                ]
                lexer = self.BasicLexer(lexer_conf, comparator)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        trad_conf.skip_validation = True  ##

        self.root_lexer = self.BasicLexer(trad_conf, comparator)

    def lex(
        self, lexer_state: LexerState, parser_state: "ParserState"
    ) -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = (
                    lexer_state.last_token
                )  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(
                    token,
                    e.allowed,
                    state=parser_state,
                    token_history=[last_token],
                    terminals_by_name=self.root_lexer.terminals_by_name,
                )
            except UnexpectedCharacters:
                raise e  ##





_ParserArgType: "TypeAlias" = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: "TypeAlias" = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_LexerCallback = Callable[[Token], Token]
ParserCallbacks = Dict[str, Callable]


class LexerConf(Serialize):
    __serialize_fields__ = (
        "terminals",
        "ignore",
        "g_regex_flags",
        "use_bytes",
        "lexer_type",
    )
    __serialize_namespace__ = (TerminalDef,)

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: "Optional[PostLex]"
    callbacks: Dict[str, _LexerCallback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]
    strict: bool

    def __init__(
        self,
        terminals: Collection[TerminalDef],
        re_module: ModuleType,
        ignore: Collection[str] = (),
        postlex: "Optional[PostLex]" = None,
        callbacks: Optional[Dict[str, _LexerCallback]] = None,
        g_regex_flags: int = 0,
        skip_validation: bool = False,
        use_bytes: bool = False,
        strict: bool = False,
    ):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.strict = strict
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )


class ParserConf(Serialize):
    __serialize_fields__ = "rules", "start", "parser_type"

    rules: List["Rule"]
    callbacks: ParserCallbacks
    start: List[str]
    parser_type: _ParserArgType

    def __init__(
        self, rules: List["Rule"], callbacks: ParserCallbacks, start: List[str]
    ):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start



from functools import partial, wraps
from itertools import product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)


class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, "line"):
                    ##

                    res_meta.line = getattr(
                        first_meta, "container_line", first_meta.line
                    )
                    res_meta.column = getattr(
                        first_meta, "container_column", first_meta.column
                    )
                    res_meta.start_pos = getattr(
                        first_meta, "container_start_pos", first_meta.start_pos
                    )
                    res_meta.empty = False

                res_meta.container_line = getattr(
                    first_meta, "container_line", first_meta.line
                )
                res_meta.container_column = getattr(
                    first_meta, "container_column", first_meta.column
                )
                res_meta.container_start_pos = getattr(
                    first_meta, "container_start_pos", first_meta.start_pos
                )

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, "end_line"):
                    res_meta.end_line = getattr(
                        last_meta, "container_end_line", last_meta.end_line
                    )
                    res_meta.end_column = getattr(
                        last_meta, "container_end_column", last_meta.end_column
                    )
                    res_meta.end_pos = getattr(
                        last_meta, "container_end_pos", last_meta.end_pos
                    )
                    res_meta.empty = False

                res_meta.container_end_line = getattr(
                    last_meta, "container_end_line", last_meta.end_line
                )
                res_meta.container_end_column = getattr(
                    last_meta, "container_end_column", last_meta.end_column
                )
                res_meta.container_end_pos = getattr(
                    last_meta, "container_end_pos", last_meta.end_pos
                )

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c
            elif hasattr(c, "__lark_meta__"):
                return c.__lark_meta__()


def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError("Invalid option for propagate_positions: %r" % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:  ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--

    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:  ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith("_")


def maybe_create_child_filter(
    expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]
):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = "".join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split("0")]
        assert len(empty_indices) == len(expansion) + 1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion) + 1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if (
        _empty_indices
        or len(to_include) < len(expansion)
        or any(to_expand for i, to_expand, _ in to_include)
    ):
        if _empty_indices or ambiguous:
            return partial(
                ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add
            )
        else:
            ##

            return partial(
                ChildFilterLALR_NoPlaceholders, [(i, x) for i, x, _ in to_include]
            )


class AmbiguousExpander:
    #--

    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, "data") and t.data == "_ambig"

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data("_ambig")

        if not ambiguous:
            return self.node_builder(children)

        expand = [
            child.children if i in ambiguous else (child,)
            for i, child in enumerate(children)
        ]
        return self.tree_class(
            "_ambig", [self.node_builder(list(f)) for f in product(*expand)]
        )


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [
        i
        for i, sym in enumerate(expansion)
        if keep_all_tokens
        or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))
    ]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, "data") and child.data == "_iambig"

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class(
                            "_inter", grandchild.children + children[1:]
                        )
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class("_ambig", processed_nodes)

        return self.node_builder(children)


def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)

    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)

    return f


class ParseTreeBuilder:
    def __init__(
        self,
        rules,
        tree_class,
        propagate_positions=False,
        ambiguous=False,
        maybe_placeholders=False,
    ):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(
                filter(
                    None,
                    [
                        (expand_single_child and not rule.alias) and ExpandSingleChild,
                        maybe_create_child_filter(
                            rule.expansion,
                            keep_all_tokens,
                            self.ambiguous,
                            options.empty_indices if self.maybe_placeholders else None,
                        ),
                        propagate_positions,
                        self.ambiguous
                        and maybe_create_ambiguous_expander(
                            self.tree_class, rule.expansion, keep_all_tokens
                        ),
                        self.ambiguous
                        and partial(AmbiguousIntermediateExpander, self.tree_class),
                    ],
                )
            )

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, "__default__", None)
        if default_handler:

            def default_callback(data, children):
                return default_handler(data, children, None)

        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:
            user_callback_name = (
                rule.alias or rule.options.template_source or rule.origin.name
            )
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, "visit_wrapper", None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks





class Action:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

    def __repr__(self):
        return str(self)


Shift = Action("Shift")
Reduce = Action("Reduce")

StateT = TypeVar("StateT")


class ParseTableBase(Generic[StateT]):
    states: Dict[StateT, Dict[str, Tuple]]
    start_states: Dict[str, StateT]
    end_states: Dict[str, StateT]

    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()

        states = {
            state: {
                tokens.get(token): (
                    (1, arg.serialize(memo)) if action is Reduce else (0, arg)
                )
                for token, (action, arg) in actions.items()
            }
            for state, actions in self.states.items()
        }

        return {
            "tokens": tokens.reversed(),
            "states": states,
            "start_states": self.start_states,
            "end_states": self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data["tokens"]
        states = {
            state: {
                tokens[token]: (
                    (Reduce, Rule.deserialize(arg, memo))
                    if action == 1
                    else (Shift, arg)
                )
                for token, (action, arg) in actions.items()
            }
            for state, actions in data["states"].items()
        }
        return cls(states, data["start_states"], data["end_states"])


class ParseTable(ParseTableBase["State"]):
    #--

    pass


class IntParseTable(ParseTableBase[int]):
    #--

    @classmethod
    def from_ParseTable(cls, parse_table: ParseTable):
        enum = list(parse_table.states)
        state_to_idx: Dict["State", int] = {s: i for i, s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {
                k: (v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                for k, v in la.items()
            }
            int_states[state_to_idx[s]] = la

        start_states = {
            start: state_to_idx[s] for start, s in parse_table.start_states.items()
        }
        end_states = {
            start: state_to_idx[s] for start, s in parse_table.end_states.items()
        }
        return cls(int_states, start_states, end_states)





class ParseConf(Generic[StateT]):
    __slots__ = (
        "parse_table",
        "callbacks",
        "start",
        "start_state",
        "end_state",
        "states",
    )

    parse_table: ParseTableBase[StateT]
    callbacks: ParserCallbacks
    start: str

    start_state: StateT
    end_state: StateT
    states: Dict[StateT, Dict[str, tuple]]

    def __init__(
        self,
        parse_table: ParseTableBase[StateT],
        callbacks: ParserCallbacks,
        start: str,
    ):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start


class ParserState(Generic[StateT]):
    __slots__ = "parse_conf", "lexer", "state_stack", "value_stack"

    parse_conf: ParseConf[StateT]
    lexer: LexerThread
    state_stack: List[StateT]
    value_stack: list

    def __init__(
        self,
        parse_conf: ParseConf[StateT],
        lexer: LexerThread,
        state_stack=None,
        value_stack=None,
    ):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self) -> StateT:
        return self.state_stack[-1]

    ##

    def __eq__(self, other) -> bool:
        if not isinstance(other, ParserState):
            return NotImplemented
        return (
            len(self.state_stack) == len(other.state_stack)
            and self.position == other.position
        )

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer,  ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self) -> "ParserState[StateT]":
        return copy(self)

    def feed_token(self, token: Token, is_end=False) -> Any:
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(
                    token, expected, state=self, interactive_parser=None
                )

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(
                    token
                    if token.type not in callbacks
                    else callbacks[token.type](token)
                )
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s) if callbacks else s

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]





class LALR_Parser(Serialize):
    def __init__(
        self, parser_conf: ParserConf, debug: bool = False, strict: bool = False
    ):
        analysis = LALR_Analyzer(parser_conf, debug=debug, strict=strict)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo: Any = None) -> Dict[str, Any]:
        return self._parse_table.serialize(memo)

    def parse_interactive(self, lexer: LexerThread, start: str):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p : p + 1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (
                        isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == "$END"
                        and e.interactive_parser == e2.interactive_parser
                    ):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class _Parser:
    parse_table: ParseTableBase
    callbacks: ParserCallbacks
    debug: bool

    def __init__(
        self,
        parse_table: ParseTableBase,
        callbacks: ParserCallbacks,
        debug: bool = False,
    ):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(
        self,
        lexer: LexerThread,
        start: str,
        value_stack=None,
        state_stack=None,
        start_interactive=False,
    ):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)

    def parse_from_state(self, state: ParserState, last_token: Optional[Token] = None):
        #--
        try:
            token = last_token
            for token in state.lexer.lex(state):
                assert token is not None
                state.feed_token(token)

            end_token = (
                Token.new_borrow_pos("$END", "", token)
                if token
                else Token("$END", "", 0, 1, 1)
            )
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print("%d)" % i, s)
                print("")

            raise





class InteractiveParser:
    #--

    def __init__(self, parser, parser_state, lexer_thread: LexerThread):
        self.parser = parser
        self.parser_state = parser_state
        self.lexer_thread = lexer_thread
        self.result = None

    @property
    def lexer_state(self) -> LexerThread:
        warnings.warn(
            "lexer_state will be removed in subsequent releases. Use lexer_thread instead.",
            DeprecationWarning,
        )
        return self.lexer_thread

    def feed_token(self, token: Token):
        #--
        return self.parser_state.feed_token(token, token.type == "$END")

    def iter_parse(self) -> Iterator[Token]:
        #--
        for token in self.lexer_thread.lex(self.parser_state):
            yield token
            self.result = self.feed_token(token)

    def exhaust_lexer(self) -> List[Token]:
        #--
        return list(self.iter_parse())

    def feed_eof(self, last_token=None):
        #--
        eof = (
            Token.new_borrow_pos("$END", "", last_token)
            if last_token is not None
            else self.lexer_thread._Token("$END", "", 0, 1, 1)
        )
        return self.feed_token(eof)

    def __copy__(self):
        #--
        return type(self)(
            self.parser,
            copy(self.parser_state),
            copy(self.lexer_thread),
        )

    def copy(self):
        return copy(self)

    def __eq__(self, other):
        if not isinstance(other, InteractiveParser):
            return False

        return (
            self.parser_state == other.parser_state
            and self.lexer_thread == other.lexer_thread
        )

    def as_immutable(self):
        #--
        p = copy(self)
        return ImmutableInteractiveParser(p.parser, p.parser_state, p.lexer_thread)

    def pretty(self):
        #--
        out = ["Parser choices:"]
        for k, v in self.choices().items():
            out.append("\t- %s -> %r" % (k, v))
        out.append("stack size: %s" % len(self.parser_state.state_stack))
        return "\n".join(out)

    def choices(self):
        #--
        return self.parser_state.parse_conf.parse_table.states[
            self.parser_state.position
        ]

    def accepts(self):
        #--
        accepts = set()
        conf_no_callbacks = copy(self.parser_state.parse_conf)
        ##

        ##

        conf_no_callbacks.callbacks = {}
        for t in self.choices():
            if t.isupper():  ##

                new_cursor = copy(self)
                new_cursor.parser_state.parse_conf = conf_no_callbacks
                try:
                    new_cursor.feed_token(self.lexer_thread._Token(t, ""))
                except UnexpectedToken:
                    pass
                else:
                    accepts.add(t)
        return accepts

    def resume_parse(self):
        #--
        return self.parser.parse_from_state(
            self.parser_state, last_token=self.lexer_thread.state.last_token
        )


class ImmutableInteractiveParser(InteractiveParser):
    #--

    result = None

    def __hash__(self):
        return hash((self.parser_state, self.lexer_thread))

    def feed_token(self, token):
        c = copy(self)
        c.result = InteractiveParser.feed_token(c, token)
        return c

    def exhaust_lexer(self):
        #--
        cursor = self.as_mutable()
        cursor.exhaust_lexer()
        return cursor.as_immutable()

    def as_mutable(self):
        #--
        p = copy(self)
        return InteractiveParser(p.parser, p.parser_state, p.lexer_thread)





def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, "__future_interface__", False)
    if future_interface:
        return lexer_class
    else:

        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)

            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)

        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data["parser_conf"], memo)
    cls = (options and options._plugins.get("LALR_Parser")) or LALR_Parser
    parser = cls.deserialize(data["parser"], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: "Dict[str, Callable[[LexerConf, Any, Any], Any]]" = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = "lexer_conf", "parser_conf", "parser"

    lexer_conf: LexerConf
    parser_conf: ParserConf
    options: Any

    def __init__(
        self, lexer_conf: LexerConf, parser_conf: ParserConf, options, parser=None
    ):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert (
                create_parser is not None
            ), "{} is not supported in standalone mode".format(parser_conf.parser_type)
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ("dynamic", "dynamic_complete"):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        if isinstance(lexer_type, type):
            assert issubclass(lexer_type, Lexer)
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        elif isinstance(lexer_type, str):
            create_lexer = {
                "basic": create_basic_lexer,
                "contextual": create_contextual_lexer,
            }[lexer_type]
            self.lexer = create_lexer(
                lexer_conf, self.parser, lexer_conf.postlex, options
            )
        else:
            raise TypeError("Bad value for lexer_type: {lexer_type}")

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)

    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError(
                    "Lark initialized with more than 1 possible start rule. Must specify which start rule to parse",
                    start_decls,
                )
            (start,) = start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError(
                "Unknown start rule %s. Must be one of %r"
                % (start, self.parser_conf.start)
            )
        return start

    def _make_lexer_thread(self, text: str) -> Union[str, LexerThread]:
        cls = (self.options and self.options._plugins.get("LexerThread")) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text: str, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {"on_error": on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)

    def parse_interactive(self, text: Optional[str] = None, start=None):
        ##

        ##

        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != "lalr":
            raise ConfigurationError(
                "parse_interactive() currently only works with parser='lalr' "
            )
        stream = self._make_lexer_thread(text)  ##

        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ("lalr", "earley", "cyk"))
    if not isinstance(lexer, type):  ##

        expected = {
            "lalr": ("basic", "contextual"),
            "earley": ("basic", "dynamic", "dynamic_complete"),
            "cyk": ("basic",),
        }[parser]
        assert_config(
            lexer,
            expected,
            "Parser %r does not support lexer %%r, expected one of %%s" % parser,
        )


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result


class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)


def create_basic_lexer(lexer_conf, parser, postlex, options) -> BasicLexer:
    cls = (options and options._plugins.get("BasicLexer")) or BasicLexer
    return cls(lexer_conf)


def create_contextual_lexer(
    lexer_conf: LexerConf, parser, postlex, options
) -> ContextualLexer:
    cls = (options and options._plugins.get("ContextualLexer")) or ContextualLexer
    parse_table: ParseTableBase[int] = parser._parse_table
    states: Dict[int, Collection[str]] = {
        idx: list(t.keys()) for idx, t in parse_table.states.items()
    }
    always_accept: Collection[str] = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)


def create_lalr_parser(
    lexer_conf: LexerConf, parser_conf: ParserConf, options=None
) -> LALR_Parser:
    debug = options.debug if options else False
    strict = options.strict if options else False
    cls = (options and options._plugins.get("LALR_Parser")) or LALR_Parser
    return cls(parser_conf, debug=debug, strict=strict)


_parser_creators["lalr"] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()


class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    strict: bool
    transformer: "Optional[Transformer]"
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Optional[Callable[[str, List], Any]]
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    ordered_sets: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: "List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]"
    source_path: Optional[str]

    OPTIONS_DOC = r"""
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    strict
            Throw an exception on any potential ambiguity, including shift/reduce conflicts, and regex collisions.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates positional attributes into the 'meta' attribute of all tree branches.
            Sets attributes: (line, column, end_line, end_column, start_pos, end_pos,
                              container_line, container_column, container_end_line, container_end_column)
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    ordered_sets
            Should Earley use ordered-sets to achieve stable output (~10% slower than regular sets. Default: True)
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        "debug": False,
        "strict": False,
        "keep_all_tokens": False,
        "tree_class": None,
        "cache": False,
        "postlex": None,
        "parser": "earley",
        "lexer": "auto",
        "transformer": None,
        "start": "start",
        "priority": "auto",
        "ambiguity": "auto",
        "regex": False,
        "propagate_positions": False,
        "lexer_callbacks": {},
        "maybe_placeholders": True,
        "edit_terminals": None,
        "g_regex_flags": 0,
        "use_bytes": False,
        "ordered_sets": True,
        "import_paths": [],
        "source_path": None,
        "_plugins": {},
    }

    def __init__(self, options_dict: Dict[str, Any]) -> None:
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in (
                    "cache",
                    "use_bytes",
                    "propagate_positions",
                ):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options["start"], str):
            options["start"] = [options["start"]]

        self.__dict__["options"] = options

        assert_config(self.parser, ("earley", "lalr", "cyk", None))

        if self.parser == "earley" and self.transformer:
            raise ConfigurationError(
                "Cannot specify an embedded transformer when using the Earley algorithm. "
                "Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)"
            )

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name: str) -> Any:
        try:
            return self.__dict__["options"][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name: str, value: str) -> None:
        assert_config(
            name, self.options.keys(), "%r isn't a valid option. Expected one of: %s"
        )
        self.options[name] = value

    def serialize(self, memo=None) -> Dict[str, Any]:
        return self.options

    @classmethod
    def deserialize(
        cls, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]]
    ) -> "LarkOptions":
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {
    "postlex",
    "transformer",
    "lexer_callbacks",
    "use_bytes",
    "debug",
    "g_regex_flags",
    "regex",
    "propagate_positions",
    "tree_class",
    "_plugins",
}

_VALID_PRIORITY_OPTIONS = ("auto", "normal", "invert", None)
_VALID_AMBIGUITY_OPTIONS = ("auto", "resolve", "explicit", "forest")


_T = TypeVar("_T", bound="Lark")


class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: "Grammar"
    options: LarkOptions
    lexer: Lexer
    parser: "ParsingFrontend"
    terminals: Collection[TerminalDef]

    def __init__(self, grammar: "Union[Grammar, str, IO[str]]", **options) -> None:
        self.options = LarkOptions(options)
        re_module: types.ModuleType

        ##

        use_regex = self.options.regex
        if use_regex:
            if _has_regex:
                re_module = regex
            else:
                raise ImportError(
                    "`regex` module must be installed if calling `Lark(regex=True)`."
                )
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name  ##

            except AttributeError:
                self.source_path = "<string>"
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read  ##

        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_sha256 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError(
                        "Grammar must be ascii only, when use_bytes=True"
                    )

            if self.options.cache:
                if self.options.parser != "lalr":
                    raise ConfigurationError(
                        "cache only works with parser='lalr' for now"
                    )

                unhashable = (
                    "transformer",
                    "postlex",
                    "lexer_callbacks",
                    "edit_terminals",
                    "_plugins",
                )
                options_str = "".join(
                    k + str(v) for k, v in options.items() if k not in unhashable
                )
                from . import __version__

                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_sha256 = sha256_digest(s)

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")

                    try:
                        username = getpass.getuser()
                    except Exception:
                        ##

                        ##

                        ##

                        username = "unknown"

                    cache_fn = (
                        tempfile.gettempdir()
                        + "/.lark_cache_%s_%s_%s_%s.tmp"
                        % (username, cache_sha256, *sys.version_info[:2])
                    )

                old_options = self.options
                try:
                    with FS.open(cache_fn, "rb") as f:
                        logger.debug("Loading grammar from cache: %s", cache_fn)
                        ##

                        for name in set(options) - _LOAD_ALLOWED_OPTIONS:
                            del options[name]
                        file_sha256 = f.readline().rstrip(b"\n")
                        cached_used_files = pickle.load(f)
                        if file_sha256 == cache_sha256.encode(
                            "utf8"
                        ) and verify_used_files(cached_used_files):
                            cached_parser_data = pickle.load(f)
                            self._load(cached_parser_data, **options)
                            return
                except FileNotFoundError:
                    ##

                    pass
                except (
                    Exception
                ):  ##

                    logger.exception(
                        "Failed to load Lark from cache: %r. We will try to carry on.",
                        cache_fn,
                    )

                    ##

                    ##

                    self.options = old_options

            ##

            self.grammar, used_files = load_grammar(
                grammar,
                self.source_path,
                self.options.import_paths,
                self.options.keep_all_tokens,
            )
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar

        if self.options.lexer == "auto":
            if self.options.parser == "lalr":
                self.options.lexer = "contextual"
            elif self.options.parser == "earley":
                if self.options.postlex is not None:
                    logger.info(
                        "postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                        "Consider using lalr with contextual instead of earley"
                    )
                    self.options.lexer = "basic"
                else:
                    self.options.lexer = "dynamic"
            elif self.options.parser == "cyk":
                self.options.lexer = "basic"
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(
                lexer, Lexer
            )  ##

        else:
            assert_config(lexer, ("basic", "contextual", "dynamic", "dynamic_complete"))
            if self.options.postlex is not None and "dynamic" in lexer:
                raise ConfigurationError(
                    "Can't use postlex with a dynamic lexer. Use basic or contextual instead"
                )

        if self.options.ambiguity == "auto":
            if self.options.parser == "earley":
                self.options.ambiguity = "resolve"
        else:
            assert_config(
                self.options.parser,
                ("earley", "cyk"),
                "%r doesn't support disambiguation. Use one of these parsers instead: %s",
            )

        if self.options.priority == "auto":
            self.options.priority = "normal"

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError(
                "invalid priority option: %r. Must be one of %r"
                % (self.options.priority, _VALID_PRIORITY_OPTIONS)
            )
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError(
                "invalid ambiguity option: %r. Must be one of %r"
                % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS)
            )

        if self.options.parser is None:
            terminals_to_keep = "*"
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(
            self.options.start, terminals_to_keep
        )

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == "invert":
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
            self.terminals,
            re_module,
            self.ignore_tokens,
            self.options.postlex,
            self.options.lexer_callbacks,
            self.options.g_regex_flags,
            use_bytes=self.options.use_bytes,
            strict=self.options.strict,
        )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug("Saving grammar to cache: %s", cache_fn)
            try:
                with FS.open(cache_fn, "wb") as f:
                    assert cache_sha256 is not None
                    f.write(cache_sha256.encode("utf8") + b"\n")
                    pickle.dump(used_files, f)
                    self.save(f, _LOAD_ALLOWED_OPTIONS)
            except IOError as e:
                logger.exception("Failed to save Lark to cache: %r.", cache_fn, e)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = "parser", "rules", "options"

    def _build_lexer(self, dont_ignore: bool = False) -> BasicLexer:
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy

            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self) -> None:
        self._callbacks = {}
        ##

        if self.options.ambiguity != "forest":
            self._parse_tree_builder = ParseTreeBuilder(
                self.rules,
                self.options.tree_class or Tree,
                self.options.propagate_positions,
                self.options.parser != "lalr" and self.options.ambiguity == "explicit",
                self.options.maybe_placeholders,
            )
            self._callbacks = self._parse_tree_builder.create_callback(
                self.options.transformer
            )
        self._callbacks.update(
            _get_lexer_callbacks(self.options.transformer, self.terminals)
        )

    def _build_parser(self) -> "ParsingFrontend":
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options,
        )

    def save(self, f, exclude_options: Collection[str] = ()) -> None:
        #--
        if self.options.parser != "lalr":
            raise NotImplementedError(
                "Lark.save() is only implemented for the LALR(1) parser."
            )
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {
                n: v for n, v in data["options"].items() if n not in exclude_options
            }
        pickle.dump({"data": data, "memo": m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls: Type[_T], f) -> _T:
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(
        self,
        data: Dict[str, Any],
        memo: Dict[int, Union[TerminalDef, Rule]],
        options: LarkOptions,
    ) -> LexerConf:
        lexer_conf = LexerConf.deserialize(data["lexer_conf"], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self: _T, f: Any, **kwargs) -> _T:
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d["memo"]
        data = d["data"]

        assert memo_json
        memo = SerializeMemoizer.deserialize(
            memo_json, {"Rule": Rule, "TerminalDef": TerminalDef}, {}
        )
        options = dict(data["options"])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError(
                "Some options are not allowed when loading a Parser: {}".format(
                    set(kwargs) - _LOAD_ALLOWED_OPTIONS
                )
            )
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data["rules"]]
        self.source_path = "<deserialized>"
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(
            data["parser"], memo, self.options
        )
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data["parser"],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({"data": data, "memo": memo}, **kwargs)

    @classmethod
    def open(
        cls: Type[_T], grammar_filename: str, rel_to: Optional[str] = None, **options
    ) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding="utf8") as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(
        cls: Type[_T],
        package: str,
        grammar_path: str,
        search_paths: "Sequence[str]" = [""],
        **options
    ) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault("source_path", full_path)
        options.setdefault("import_paths", [])
        options["import_paths"].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return "Lark(open(%r), parser=%r, lexer=%r, ...)" % (
            self.source_path,
            self.options.parser,
            self.options.lexer,
        )

    def lex(self, text: str, dont_ignore: bool = False) -> Iterator[Token]:
        #--
        lexer: Lexer
        if not hasattr(self, "lexer") or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]

    def parse_interactive(
        self, text: Optional[str] = None, start: Optional[str] = None
    ) -> "InteractiveParser":
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(
        self,
        text: str,
        start: Optional[str] = None,
        on_error: "Optional[Callable[[UnexpectedInput], bool]]" = None,
    ) -> "ParseTree":
        #--
        return self.parser.parse(text, start=start, on_error=on_error)





class DedentError(LarkError):
    pass


class Indenter(PostLex, ABC):
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit("\n", 1)[1]  ##

        indent = indent_str.count(" ") + indent_str.count("\t") * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError(
                    "Unexpected dedent to column %s. Expected dedent to %s"
                    % (indent, self.indent_level[-1])
                )

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, "")

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        raise NotImplementedError()


class PythonIndenter(Indenter):
    NL_type = "_NEWLINE"
    OPEN_PAREN_types = ["LPAR", "LSQB", "LBRACE"]
    CLOSE_PAREN_types = ["RPAR", "RSQB", "RBRACE"]
    INDENT_type = "_INDENT"
    DEDENT_type = "_DEDENT"
    tab_len = 8



import pickle, zlib, base64
DATA = (
b''
)
DATA = pickle.loads(zlib.decompress(base64.b64decode(DATA)))
MEMO = (
b'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'
)
MEMO = pickle.loads(zlib.decompress(base64.b64decode(MEMO)))
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
