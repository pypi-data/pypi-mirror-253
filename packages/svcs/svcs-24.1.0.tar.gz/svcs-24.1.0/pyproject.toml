# SPDX-FileCopyrightText: 2023 Hynek Schlawack <hs@ox.cx>
#
# SPDX-License-Identifier: MIT

[build-system]
requires = ["hatchling", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"


[project]
dynamic = ["version", "readme"]
name = "svcs"
description = "A Flexible Service Locator"
requires-python = ">=3.8"
license = "MIT"
authors = [{ name = "Hynek Schlawack", email = "hs@ox.cx" }]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed",
]
dependencies = [
  "attrs>=21.3.0", # attrs namespace
]

[project.optional-dependencies]
tests = [
  "pytest",
  "pytest-asyncio",
  "sybil>=6",
  "typing-extensions; python_version<'3.9'",
]
typing = ["mypy>=1.4", "fastapi", "flask", "starlette", "aiohttp", "pyramid"]
docs = [
  "sphinx>=7.2.2",
  "sphinx-design",
  "sphinx-copybutton",
  "sphinx-notfound-page",
  "sphinxext-opengraph",
  "myst-parser",
  "furo>=2023.8.17",
  "sybil",
  "pytest",
  "httpx",
  "aiohttp",
  "fastapi",
  "flask",
  "pyramid",
  "starlette",
  "sqlalchemy",
]
dev = ["svcs[tests,typing]", "tox>4", "httpx"]

[project.urls]
Changelog = "https://github.com/hynek/svcs/blob/main/CHANGELOG.md"
Documentation = "https://svcs.hynek.me/"
GitHub = "https://github.com/hynek/svcs"
Funding = "https://github.com/sponsors/hynek"
Mastodon = "https://mastodon.social/@hynek"
Twitter = "https://twitter.com/hynek"


[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"
start-after = "<!-- begin logo -->\n"
end-before = "\n<!-- end logo -->"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"
start-after = "<!-- begin pypi -->\n"
end-before = "\n<!-- end pypi -->"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """

## Release Information

"""

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "CHANGELOG.md"
start-after = "<!-- changelog follows -->"
pattern = "\n(###.+?\n)## "

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """
---

[Full Changelog â†’](https://github.com/hynek/svcs/blob/main/CHANGELOG.md)


"""

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"
start-at = "## Credits"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = '> \[!(.*)\]'
replacement = '> **\1**'

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = ']\(\./(.*)\)'
replacement = '](https://github.com/hynek/svcs/blob/main/\1)'

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = '(docs/_static/.*")'
replacement = 'https://raw.githubusercontent.com/hynek/svcs/main/\1"'


[tool.pytest.ini_options]
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "once::Warning",
  "ignore:'cgi' is deprecated:DeprecationWarning:webob.compat:",
  "ignore:Deprecated call to `pkg_resources.declare_namespace:DeprecationWarning:pkg_resources:",
  "ignore:pkg_resources is deprecated:DeprecationWarning:pyramid.asset:",
]


[tool.coverage.run]
branch = true
parallel = true
source = ["svcs", "tests"]

[tool.coverage.paths]
source = ["src", ".tox/py*/**/site-packages"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  # Typing-related
  "if TYPE_CHECKING:",
  "^ +\\.\\.\\.$",
]


[tool.interrogate]
omit-covered-files = true
verbose = 2
fail-under = 100
whitelist-regex = ["test_.*"]


[tool.mypy]
strict = true

show_error_codes = true
enable_error_code = ["ignore-without-code"]

allow_any_generics = true

[[tool.mypy.overrides]]
module = "pyramid.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytest.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.typing.*"
ignore_errors = false

[[tool.mypy.overrides]]
module = "health_check_pyramid"

allow_untyped_decorators = true


[tool.pyright]
ignore = [
  "conftest.py",
  "docs",
  "src/svcs/pyramid.py",
  "tests",
  "tests/typing/pyramid.py",
]


[tool.black]
line-length = 79


[tool.ruff]
src = ["src", "tests", "conftest.py", "docs"]
select = ["ALL"]
ignore = [
  "A001",    # shadowing is fine
  "ANN",     # Mypy is better at this
  "ARG",     # unused arguments are normal when implementing interfaces
  "COM",     # Black takes care of our commas
  "D",       # We prefer our own docstring style.
  "E501",    # leave line-length enforcement to Black
  "FBT",     # we have one function that takes one bool; c'mon!
  "FIX",     # Yes, we want XXX as a marker.
  "INP001",  # sometimes we want Python files outside of packages
  "PLR0913", # yes, many arguments, but most have defaults
  "PLR2004", # numbers are sometimes fine
  "PYI034",  # We're not adding typing_extensions just for Self.
  "SLF001",  # private members are accessed by friendly functions
  "TCH",     # TYPE_CHECKING blocks break autodocs
]

[tool.ruff.per-file-ignores]
"**/test_*" = [
  "S101",   # assert
  "SIM300", # Yoda rocks in asserts
  "PT005",  # we always add underscores and explicit names
  "PT011",  # broad is fine
  "TRY002", # stock exceptions are fine in tests
  "EM101",  # no need for exception msg hygiene in tests
]

"tests/typing/*" = [
  "F841", # unused variables are fine in type checks
]

"conftest.py" = [
  "PT005", # we always add underscores and explicit names
]

"docs/examples/*" = ["PERF203", "BLE001"]

[tool.ruff.isort]
lines-between-types = 1
lines-after-imports = 2
known-first-party = [
  "svcs",
  "tests",
  "simple_fastapi_app",
  "simple_starlette_app",
]
