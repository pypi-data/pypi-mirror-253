"summarize-text-on-demand-serving-mode"
***************************************

* Description

* Usage

* Required Parameters

* Optional Parameters

* Global Parameters

* Example using required parameter


Description
===========

Summarizes the input text.


Usage
=====

   oci generative-ai-inference summarize-text-result summarize-text-on-demand-serving-mode [OPTIONS]


Required Parameters
===================

--compartment-id, -c [text]

The OCID of compartment that the user is authorized to use to call
into the Generative AI service.

--input [text]

The input string to be summarized.

--serving-mode-model-id [text]

The unique ID of a model to use. Can use list Models API to list
available models.


Optional Parameters
===================

--additional-command [text]

A free-form instruction for modifying how the summaries get generated.
Should complete the sentence “Generate a summary _”. For example,
“focusing on the next steps” or “written by Yoda”.

--extractiveness [text]

Controls how close to the original text the summary is. High
extractiveness summaries will lean towards reusing sentences verbatim,
while low extractiveness summaries will tend to paraphrase more.

Accepted values are:

   AUTO, HIGH, LOW, MEDIUM

--format [text]

Indicates the style in which the summary will be delivered - in a free
form paragraph or in bullet points. If “AUTO” is selected, the best
option will be picked based on the input text.

Accepted values are:

   AUTO, BULLETS, PARAGRAPH

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id –> compartmentId),
while the values of the keys need to be populated by the user before
using the sample file as an input to this command. For any command
option that accepts multiple values, the value of the key can be a
JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our “using CLI with
advanced JSON options” link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--is-echo [boolean]

Whether or not to include the original inputs in the response.

--length [text]

Indicates the approximate length of the summary. If “AUTO” is
selected, the best option will be picked based on the input text.

Accepted values are:

   AUTO, LONG, MEDIUM, SHORT

--temperature [text]

A number that sets the randomness of the generated output. Lower
temperatures mean less random generations.

Use lower numbers for tasks with a correct answer such as question
answering or summarizing. High temperatures can generate
hallucinations or factually incorrect information. Start with
temperatures lower than 1.0, and increase the temperature for more
creative outputs, as you regenerate the prompts to refine the outputs.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-auto-prompt", "--
cli-rc-file", "--config-file", "--connection-timeout", "--debug", "--
defaults-file", "--endpoint", "--generate-full-command-json-input", "
--generate-param-json-input", "--help", "--latest-version", "--max-
retries", "--no-retry", "--opc-client-request-id", "--opc-request-id",
"--output", "--profile", "--proxy", "--query", "--raw-output", "--
read-timeout", "--realm-specific-endpoint", "--region", "--release-
info", "--request-id", "--version", "-?", "-d", "-h", "-i", "-v"


Example using required parameter
================================

Copy the following CLI commands into a file named example.sh. Run the
command by typing “bash example.sh” and replacing the example
parameters with your own.

Please note this sample will only work in the POSIX-compliant bash-
like shell. You need to set up the OCI configuration and appropriate
security policies before trying the examples.

       export compartment_id=<substitute-value-of-compartment_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/generative-ai-inference/summarize-text-result/summarize-text-on-demand-serving-mode.html#cmdoption-compartment-id
       export input=<substitute-value-of-input> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/generative-ai-inference/summarize-text-result/summarize-text-on-demand-serving-mode.html#cmdoption-input
       export serving_mode_model_id=<substitute-value-of-serving_mode_model_id> # https://docs.cloud.oracle.com/en-us/iaas/tools/oci-cli/latest/oci_cli_docs/cmdref/generative-ai-inference/summarize-text-result/summarize-text-on-demand-serving-mode.html#cmdoption-serving-mode-model-id

       oci generative-ai-inference summarize-text-result summarize-text-on-demand-serving-mode --compartment-id $compartment_id --input $input --serving-mode-model-id $serving_mode_model_id
