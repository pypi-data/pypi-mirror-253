_binary_exp{self,child,op}: child | self op child
_comma_delimited{item}: [ item ("," item)* ","? ] // Used in definitions.lark

?exp: is_exp

?is_exp: _binary_exp{is_exp, or_exp, "is"}

?or_exp: _binary_exp{or_exp, xor_exp, "|"}
?xor_exp: _binary_exp{xor_exp, and_exp, "^"}
?and_exp: _binary_exp{and_exp, comp_exp, "&"}

?comp_exp: _binary_exp{comp_exp, mult_exp, COMPARISON_OP}
COMPARISON_OP: "!=" | "==" | ">=" | "<=" | ">" | "<"

?mult_exp: _binary_exp{mult_exp, add_exp, MULTIPLICATION_OP}
MULTIPLICATION_OP: "*" | "/" | "%"

?add_exp: _binary_exp{add_exp, unary_exp, ADDITION_OP}
ADDITION_OP: "+" | "-"

?unary_exp: value_exp
          | UNARY_OP value_exp
UNARY_OP: "!" | "~"

?value_exp: atom_exp
          | literal

?atom_exp: identifier
         | "(" exp ")"
         | atom_exp "[" [ exp ] "]" -> filter_exp
         | atom_exp "." atom_exp -> dot_exp

identifier: TYPE | EDGE

literal: SIGNED_NUMBER
       | STRING

%import tokens (WS, COMMENT, TYPE, EDGE, SIGNED_NUMBER, STRING)
%ignore WS
%ignore COMMENT