# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from truera.protobuf.public.streaming import streaming_ingress_service_pb2 as truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2


class StreamingIngressServiceStub(object):
    """Entry point for streaming DQ.
    Expected workflow:
    1. Customer creates a project and data collection
    2. Customer uploads a schema to the data collection
    3. The customer calls IngestPoint for each data point in real time
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/truera.streaming.StreamingIngressService/Ping',
                request_serializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.PingRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.PingResponse.FromString,
                )
        self.IngestPoint = channel.unary_unary(
                '/truera.streaming.StreamingIngressService/IngestPoint',
                request_serializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestPointRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestPointResponse.FromString,
                )
        self.IngestBulk = channel.unary_unary(
                '/truera.streaming.StreamingIngressService/IngestBulk',
                request_serializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestBulkRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestBulkResponse.FromString,
                )
        self.IngestMetric = channel.unary_unary(
                '/truera.streaming.StreamingIngressService/IngestMetric',
                request_serializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestMetricRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestMetricResponse.FromString,
                )


class StreamingIngressServiceServicer(object):
    """Entry point for streaming DQ.
    Expected workflow:
    1. Customer creates a project and data collection
    2. Customer uploads a schema to the data collection
    3. The customer calls IngestPoint for each data point in real time
    """

    def Ping(self, request, context):
        """A simple ping request for checking connectivity
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestPoint(self, request, context):
        """Ingest a single data point into streaming.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestBulk(self, request, context):
        """Ingest multiple data points into streaming. Currently we only allow 1k points as an upper limit.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestMetric(self, request, context):
        """Ingest a single metric point into streaming with age <= 1 hr.
        High throughput endpoint with very high limit.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamingIngressServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.PingRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.PingResponse.SerializeToString,
            ),
            'IngestPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestPoint,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestPointRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestPointResponse.SerializeToString,
            ),
            'IngestBulk': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestBulk,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestBulkRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestBulkResponse.SerializeToString,
            ),
            'IngestMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestMetric,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestMetricRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestMetricResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'truera.streaming.StreamingIngressService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StreamingIngressService(object):
    """Entry point for streaming DQ.
    Expected workflow:
    1. Customer creates a project and data collection
    2. Customer uploads a schema to the data collection
    3. The customer calls IngestPoint for each data point in real time
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.streaming.StreamingIngressService/Ping',
            truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.PingRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IngestPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.streaming.StreamingIngressService/IngestPoint',
            truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestPointRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestPointResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IngestBulk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.streaming.StreamingIngressService/IngestBulk',
            truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestBulkRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestBulkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IngestMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.streaming.StreamingIngressService/IngestMetric',
            truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestMetricRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_streaming_dot_streaming__ingress__service__pb2.IngestMetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
