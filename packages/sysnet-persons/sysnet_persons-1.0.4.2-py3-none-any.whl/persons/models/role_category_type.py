# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoleCategoryType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'individual': 'bool',
        'personal': 'bool',
        'security': 'bool',
        'other': 'bool'
    }

    attribute_map = {
        'individual': 'individual',
        'personal': 'personal',
        'security': 'security',
        'other': 'other'
    }

    def __init__(self, individual=False, personal=False, security=False, other=False):  # noqa: E501
        """RoleCategoryType - a model defined in Swagger"""  # noqa: E501
        self._individual = None
        self._personal = None
        self._security = None
        self._other = None
        self.discriminator = None
        if individual is not None:
            self.individual = individual
        if personal is not None:
            self.personal = personal
        if security is not None:
            self.security = security
        if other is not None:
            self.other = other

    @property
    def individual(self):
        """Gets the individual of this RoleCategoryType.  # noqa: E501

        osobní role  # noqa: E501

        :return: The individual of this RoleCategoryType.  # noqa: E501
        :rtype: bool
        """
        return self._individual

    @individual.setter
    def individual(self, individual):
        """Sets the individual of this RoleCategoryType.

        osobní role  # noqa: E501

        :param individual: The individual of this RoleCategoryType.  # noqa: E501
        :type: bool
        """

        self._individual = individual

    @property
    def personal(self):
        """Gets the personal of this RoleCategoryType.  # noqa: E501

        subjektová role  # noqa: E501

        :return: The personal of this RoleCategoryType.  # noqa: E501
        :rtype: bool
        """
        return self._personal

    @personal.setter
    def personal(self, personal):
        """Sets the personal of this RoleCategoryType.

        subjektová role  # noqa: E501

        :param personal: The personal of this RoleCategoryType.  # noqa: E501
        :type: bool
        """

        self._personal = personal

    @property
    def security(self):
        """Gets the security of this RoleCategoryType.  # noqa: E501

        bezpečnostní role  # noqa: E501

        :return: The security of this RoleCategoryType.  # noqa: E501
        :rtype: bool
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this RoleCategoryType.

        bezpečnostní role  # noqa: E501

        :param security: The security of this RoleCategoryType.  # noqa: E501
        :type: bool
        """

        self._security = security

    @property
    def other(self):
        """Gets the other of this RoleCategoryType.  # noqa: E501

        jiná role  # noqa: E501

        :return: The other of this RoleCategoryType.  # noqa: E501
        :rtype: bool
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this RoleCategoryType.

        jiná role  # noqa: E501

        :param other: The other of this RoleCategoryType.  # noqa: E501
        :type: bool
        """

        self._other = other

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoleCategoryType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleCategoryType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
