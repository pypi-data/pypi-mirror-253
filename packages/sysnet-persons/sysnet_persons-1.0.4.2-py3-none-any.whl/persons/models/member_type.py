# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MemberType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'IdentifierType',
        'is_person': 'bool',
        'name': 'str',
        'membership': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'is_person': 'is_person',
        'name': 'name',
        'membership': 'membership'
    }

    def __init__(self, identifier=None, is_person=False, name=None, membership=None):  # noqa: E501
        """MemberType - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._is_person = None
        self._name = None
        self._membership = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if is_person is not None:
            self.is_person = is_person
        if name is not None:
            self.name = name
        if membership is not None:
            self.membership = membership

    @property
    def identifier(self):
        """Gets the identifier of this MemberType.  # noqa: E501


        :return: The identifier of this MemberType.  # noqa: E501
        :rtype: IdentifierType
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this MemberType.


        :param identifier: The identifier of this MemberType.  # noqa: E501
        :type: IdentifierType
        """

        self._identifier = identifier

    @property
    def is_person(self):
        """Gets the is_person of this MemberType.  # noqa: E501

        Typ členského záznamu (individual/person)  # noqa: E501

        :return: The is_person of this MemberType.  # noqa: E501
        :rtype: bool
        """
        return self._is_person

    @is_person.setter
    def is_person(self, is_person):
        """Sets the is_person of this MemberType.

        Typ členského záznamu (individual/person)  # noqa: E501

        :param is_person: The is_person of this MemberType.  # noqa: E501
        :type: bool
        """

        self._is_person = is_person

    @property
    def name(self):
        """Gets the name of this MemberType.  # noqa: E501

        Název, jméno člena  # noqa: E501

        :return: The name of this MemberType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MemberType.

        Název, jméno člena  # noqa: E501

        :param name: The name of this MemberType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def membership(self):
        """Gets the membership of this MemberType.  # noqa: E501

        Typ členství (admin/representative/employee)  # noqa: E501

        :return: The membership of this MemberType.  # noqa: E501
        :rtype: str
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this MemberType.

        Typ členství (admin/representative/employee)  # noqa: E501

        :param membership: The membership of this MemberType.  # noqa: E501
        :type: str
        """

        self._membership = membership

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
