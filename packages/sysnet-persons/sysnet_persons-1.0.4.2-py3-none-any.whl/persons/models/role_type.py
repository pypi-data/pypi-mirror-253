# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoleType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'IdentifierType',
        'registry': 'ReferenceRegistry',
        'code': 'str',
        'name': 'str',
        'categories': 'RoleCategoryType',
        'holders_individual': 'list[IdentifierType]',
        'holders_personal': 'list[IdentifierType]',
        'admins_individual': 'list[IdentifierType]',
        'admins_personal': 'list[IdentifierType]',
        'tags': 'TagType',
        'document': 'DocumentMetadataType'
    }

    attribute_map = {
        'identifier': 'identifier',
        'registry': 'registry',
        'code': 'code',
        'name': 'name',
        'categories': 'categories',
        'holders_individual': 'holders_individual',
        'holders_personal': 'holders_personal',
        'admins_individual': 'admins_individual',
        'admins_personal': 'admins_personal',
        'tags': 'tags',
        'document': 'document'
    }

    def __init__(self, identifier=None, registry=None, code=None, name=None, categories=None, holders_individual=None, holders_personal=None, admins_individual=None, admins_personal=None, tags=None, document=None):  # noqa: E501
        """RoleType - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._registry = None
        self._code = None
        self._name = None
        self._categories = None
        self._holders_individual = None
        self._holders_personal = None
        self._admins_individual = None
        self._admins_personal = None
        self._tags = None
        self._document = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if registry is not None:
            self.registry = registry
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if categories is not None:
            self.categories = categories
        if holders_individual is not None:
            self.holders_individual = holders_individual
        if holders_personal is not None:
            self.holders_personal = holders_personal
        if admins_individual is not None:
            self.admins_individual = admins_individual
        if admins_personal is not None:
            self.admins_personal = admins_personal
        if tags is not None:
            self.tags = tags
        if document is not None:
            self.document = document

    @property
    def identifier(self):
        """Gets the identifier of this RoleType.  # noqa: E501


        :return: The identifier of this RoleType.  # noqa: E501
        :rtype: IdentifierType
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this RoleType.


        :param identifier: The identifier of this RoleType.  # noqa: E501
        :type: IdentifierType
        """

        self._identifier = identifier

    @property
    def registry(self):
        """Gets the registry of this RoleType.  # noqa: E501


        :return: The registry of this RoleType.  # noqa: E501
        :rtype: ReferenceRegistry
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this RoleType.


        :param registry: The registry of this RoleType.  # noqa: E501
        :type: ReferenceRegistry
        """

        self._registry = registry

    @property
    def code(self):
        """Gets the code of this RoleType.  # noqa: E501

        Kód role  # noqa: E501

        :return: The code of this RoleType.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RoleType.

        Kód role  # noqa: E501

        :param code: The code of this RoleType.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this RoleType.  # noqa: E501

        Název role  # noqa: E501

        :return: The name of this RoleType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoleType.

        Název role  # noqa: E501

        :param name: The name of this RoleType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def categories(self):
        """Gets the categories of this RoleType.  # noqa: E501


        :return: The categories of this RoleType.  # noqa: E501
        :rtype: RoleCategoryType
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this RoleType.


        :param categories: The categories of this RoleType.  # noqa: E501
        :type: RoleCategoryType
        """

        self._categories = categories

    @property
    def holders_individual(self):
        """Gets the holders_individual of this RoleType.  # noqa: E501

        Nositelé role - jednotlivci  # noqa: E501

        :return: The holders_individual of this RoleType.  # noqa: E501
        :rtype: list[IdentifierType]
        """
        return self._holders_individual

    @holders_individual.setter
    def holders_individual(self, holders_individual):
        """Sets the holders_individual of this RoleType.

        Nositelé role - jednotlivci  # noqa: E501

        :param holders_individual: The holders_individual of this RoleType.  # noqa: E501
        :type: list[IdentifierType]
        """

        self._holders_individual = holders_individual

    @property
    def holders_personal(self):
        """Gets the holders_personal of this RoleType.  # noqa: E501

        Nositelé role - osoby  # noqa: E501

        :return: The holders_personal of this RoleType.  # noqa: E501
        :rtype: list[IdentifierType]
        """
        return self._holders_personal

    @holders_personal.setter
    def holders_personal(self, holders_personal):
        """Sets the holders_personal of this RoleType.

        Nositelé role - osoby  # noqa: E501

        :param holders_personal: The holders_personal of this RoleType.  # noqa: E501
        :type: list[IdentifierType]
        """

        self._holders_personal = holders_personal

    @property
    def admins_individual(self):
        """Gets the admins_individual of this RoleType.  # noqa: E501

        Správci role - jednotlivci  # noqa: E501

        :return: The admins_individual of this RoleType.  # noqa: E501
        :rtype: list[IdentifierType]
        """
        return self._admins_individual

    @admins_individual.setter
    def admins_individual(self, admins_individual):
        """Sets the admins_individual of this RoleType.

        Správci role - jednotlivci  # noqa: E501

        :param admins_individual: The admins_individual of this RoleType.  # noqa: E501
        :type: list[IdentifierType]
        """

        self._admins_individual = admins_individual

    @property
    def admins_personal(self):
        """Gets the admins_personal of this RoleType.  # noqa: E501

        Správci role - osoby  # noqa: E501

        :return: The admins_personal of this RoleType.  # noqa: E501
        :rtype: list[IdentifierType]
        """
        return self._admins_personal

    @admins_personal.setter
    def admins_personal(self, admins_personal):
        """Sets the admins_personal of this RoleType.

        Správci role - osoby  # noqa: E501

        :param admins_personal: The admins_personal of this RoleType.  # noqa: E501
        :type: list[IdentifierType]
        """

        self._admins_personal = admins_personal

    @property
    def tags(self):
        """Gets the tags of this RoleType.  # noqa: E501


        :return: The tags of this RoleType.  # noqa: E501
        :rtype: TagType
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RoleType.


        :param tags: The tags of this RoleType.  # noqa: E501
        :type: TagType
        """

        self._tags = tags

    @property
    def document(self):
        """Gets the document of this RoleType.  # noqa: E501


        :return: The document of this RoleType.  # noqa: E501
        :rtype: DocumentMetadataType
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this RoleType.


        :param document: The document of this RoleType.  # noqa: E501
        :type: DocumentMetadataType
        """

        self._document = document

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoleType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
