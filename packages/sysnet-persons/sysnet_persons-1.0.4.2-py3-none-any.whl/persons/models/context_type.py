# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContextType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'IdentifierType',
        'username': 'str',
        'roles': 'ContextTypeRoles',
        'persons': 'ContextTypePersons'
    }

    attribute_map = {
        'identifier': 'identifier',
        'username': 'username',
        'roles': 'roles',
        'persons': 'persons'
    }

    def __init__(self, identifier=None, username=None, roles=None, persons=None):  # noqa: E501
        """ContextType - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._username = None
        self._roles = None
        self._persons = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if username is not None:
            self.username = username
        if roles is not None:
            self.roles = roles
        if persons is not None:
            self.persons = persons

    @property
    def identifier(self):
        """Gets the identifier of this ContextType.  # noqa: E501


        :return: The identifier of this ContextType.  # noqa: E501
        :rtype: IdentifierType
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ContextType.


        :param identifier: The identifier of this ContextType.  # noqa: E501
        :type: IdentifierType
        """

        self._identifier = identifier

    @property
    def username(self):
        """Gets the username of this ContextType.  # noqa: E501

        Uživatelské jméno osoby  # noqa: E501

        :return: The username of this ContextType.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ContextType.

        Uživatelské jméno osoby  # noqa: E501

        :param username: The username of this ContextType.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def roles(self):
        """Gets the roles of this ContextType.  # noqa: E501


        :return: The roles of this ContextType.  # noqa: E501
        :rtype: ContextTypeRoles
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ContextType.


        :param roles: The roles of this ContextType.  # noqa: E501
        :type: ContextTypeRoles
        """

        self._roles = roles

    @property
    def persons(self):
        """Gets the persons of this ContextType.  # noqa: E501


        :return: The persons of this ContextType.  # noqa: E501
        :rtype: ContextTypePersons
        """
        return self._persons

    @persons.setter
    def persons(self, persons):
        """Sets the persons of this ContextType.


        :param persons: The persons of this ContextType.  # noqa: E501
        :type: ContextTypePersons
        """

        self._persons = persons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContextType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContextType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
