# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersonType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'IdentifierType',
        'pid': 'PidType',
        'code': 'str',
        'registry': 'ReferenceRegistry',
        'ico': 'str',
        'birthdate': 'BirthDateType',
        'person_type': 'PersonTypeType',
        'name': 'str',
        'full_name': 'str',
        'headquarters': 'LocationType',
        'department': 'DepartmentType',
        'addresses': 'list[LocationType]',
        'address_printable': 'str',
        'representative': 'ContactType',
        'contacts': 'list[ContactType]',
        'note': 'str',
        'admins': 'list[str]',
        'members': 'list[MemberType]',
        'issuing': 'list[IssuingType]',
        'linked_persons': 'list[PersonLinkType]',
        'tags': 'TagType',
        'document': 'DocumentMetadataType'
    }

    attribute_map = {
        'identifier': 'identifier',
        'pid': 'pid',
        'code': 'code',
        'registry': 'registry',
        'ico': 'ico',
        'birthdate': 'birthdate',
        'person_type': 'person_type',
        'name': 'name',
        'full_name': 'full_name',
        'headquarters': 'headquarters',
        'department': 'department',
        'addresses': 'addresses',
        'address_printable': 'address_printable',
        'representative': 'representative',
        'contacts': 'contacts',
        'note': 'note',
        'admins': 'admins',
        'members': 'members',
        'issuing': 'issuing',
        'linked_persons': 'linked_persons',
        'tags': 'tags',
        'document': 'document'
    }

    def __init__(self, identifier=None, pid=None, code=None, registry=None, ico=None, birthdate=None, person_type=None, name=None, full_name=None, headquarters=None, department=None, addresses=None, address_printable=None, representative=None, contacts=None, note=None, admins=None, members=None, issuing=None, linked_persons=None, tags=None, document=None):  # noqa: E501
        """PersonType - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._pid = None
        self._code = None
        self._registry = None
        self._ico = None
        self._birthdate = None
        self._person_type = None
        self._name = None
        self._full_name = None
        self._headquarters = None
        self._department = None
        self._addresses = None
        self._address_printable = None
        self._representative = None
        self._contacts = None
        self._note = None
        self._admins = None
        self._members = None
        self._issuing = None
        self._linked_persons = None
        self._tags = None
        self._document = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if pid is not None:
            self.pid = pid
        if code is not None:
            self.code = code
        if registry is not None:
            self.registry = registry
        if ico is not None:
            self.ico = ico
        if birthdate is not None:
            self.birthdate = birthdate
        if person_type is not None:
            self.person_type = person_type
        if name is not None:
            self.name = name
        if full_name is not None:
            self.full_name = full_name
        if headquarters is not None:
            self.headquarters = headquarters
        if department is not None:
            self.department = department
        if addresses is not None:
            self.addresses = addresses
        if address_printable is not None:
            self.address_printable = address_printable
        if representative is not None:
            self.representative = representative
        if contacts is not None:
            self.contacts = contacts
        if note is not None:
            self.note = note
        if admins is not None:
            self.admins = admins
        if members is not None:
            self.members = members
        if issuing is not None:
            self.issuing = issuing
        if linked_persons is not None:
            self.linked_persons = linked_persons
        if tags is not None:
            self.tags = tags
        if document is not None:
            self.document = document

    @property
    def identifier(self):
        """Gets the identifier of this PersonType.  # noqa: E501


        :return: The identifier of this PersonType.  # noqa: E501
        :rtype: IdentifierType
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PersonType.


        :param identifier: The identifier of this PersonType.  # noqa: E501
        :type: IdentifierType
        """

        self._identifier = identifier

    @property
    def pid(self):
        """Gets the pid of this PersonType.  # noqa: E501


        :return: The pid of this PersonType.  # noqa: E501
        :rtype: PidType
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this PersonType.


        :param pid: The pid of this PersonType.  # noqa: E501
        :type: PidType
        """

        self._pid = pid

    @property
    def code(self):
        """Gets the code of this PersonType.  # noqa: E501

        Kód subjektu  # noqa: E501

        :return: The code of this PersonType.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PersonType.

        Kód subjektu  # noqa: E501

        :param code: The code of this PersonType.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def registry(self):
        """Gets the registry of this PersonType.  # noqa: E501


        :return: The registry of this PersonType.  # noqa: E501
        :rtype: ReferenceRegistry
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this PersonType.


        :param registry: The registry of this PersonType.  # noqa: E501
        :type: ReferenceRegistry
        """

        self._registry = registry

    @property
    def ico(self):
        """Gets the ico of this PersonType.  # noqa: E501

        Jiný identifikátor  # noqa: E501

        :return: The ico of this PersonType.  # noqa: E501
        :rtype: str
        """
        return self._ico

    @ico.setter
    def ico(self, ico):
        """Sets the ico of this PersonType.

        Jiný identifikátor  # noqa: E501

        :param ico: The ico of this PersonType.  # noqa: E501
        :type: str
        """

        self._ico = ico

    @property
    def birthdate(self):
        """Gets the birthdate of this PersonType.  # noqa: E501


        :return: The birthdate of this PersonType.  # noqa: E501
        :rtype: BirthDateType
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this PersonType.


        :param birthdate: The birthdate of this PersonType.  # noqa: E501
        :type: BirthDateType
        """

        self._birthdate = birthdate

    @property
    def person_type(self):
        """Gets the person_type of this PersonType.  # noqa: E501


        :return: The person_type of this PersonType.  # noqa: E501
        :rtype: PersonTypeType
        """
        return self._person_type

    @person_type.setter
    def person_type(self, person_type):
        """Sets the person_type of this PersonType.


        :param person_type: The person_type of this PersonType.  # noqa: E501
        :type: PersonTypeType
        """

        self._person_type = person_type

    @property
    def name(self):
        """Gets the name of this PersonType.  # noqa: E501

        Název nebo jméno osoby  # noqa: E501

        :return: The name of this PersonType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersonType.

        Název nebo jméno osoby  # noqa: E501

        :param name: The name of this PersonType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def full_name(self):
        """Gets the full_name of this PersonType.  # noqa: E501

        Plné jméno. U fyzických osob včetně titulů  # noqa: E501

        :return: The full_name of this PersonType.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this PersonType.

        Plné jméno. U fyzických osob včetně titulů  # noqa: E501

        :param full_name: The full_name of this PersonType.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def headquarters(self):
        """Gets the headquarters of this PersonType.  # noqa: E501


        :return: The headquarters of this PersonType.  # noqa: E501
        :rtype: LocationType
        """
        return self._headquarters

    @headquarters.setter
    def headquarters(self, headquarters):
        """Sets the headquarters of this PersonType.


        :param headquarters: The headquarters of this PersonType.  # noqa: E501
        :type: LocationType
        """

        self._headquarters = headquarters

    @property
    def department(self):
        """Gets the department of this PersonType.  # noqa: E501


        :return: The department of this PersonType.  # noqa: E501
        :rtype: DepartmentType
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this PersonType.


        :param department: The department of this PersonType.  # noqa: E501
        :type: DepartmentType
        """

        self._department = department

    @property
    def addresses(self):
        """Gets the addresses of this PersonType.  # noqa: E501

        další adresy  # noqa: E501

        :return: The addresses of this PersonType.  # noqa: E501
        :rtype: list[LocationType]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this PersonType.

        další adresy  # noqa: E501

        :param addresses: The addresses of this PersonType.  # noqa: E501
        :type: list[LocationType]
        """

        self._addresses = addresses

    @property
    def address_printable(self):
        """Gets the address_printable of this PersonType.  # noqa: E501

        Adresa pro tisk  # noqa: E501

        :return: The address_printable of this PersonType.  # noqa: E501
        :rtype: str
        """
        return self._address_printable

    @address_printable.setter
    def address_printable(self, address_printable):
        """Sets the address_printable of this PersonType.

        Adresa pro tisk  # noqa: E501

        :param address_printable: The address_printable of this PersonType.  # noqa: E501
        :type: str
        """

        self._address_printable = address_printable

    @property
    def representative(self):
        """Gets the representative of this PersonType.  # noqa: E501


        :return: The representative of this PersonType.  # noqa: E501
        :rtype: ContactType
        """
        return self._representative

    @representative.setter
    def representative(self, representative):
        """Sets the representative of this PersonType.


        :param representative: The representative of this PersonType.  # noqa: E501
        :type: ContactType
        """

        self._representative = representative

    @property
    def contacts(self):
        """Gets the contacts of this PersonType.  # noqa: E501

        Další kontaktní osoby  # noqa: E501

        :return: The contacts of this PersonType.  # noqa: E501
        :rtype: list[ContactType]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this PersonType.

        Další kontaktní osoby  # noqa: E501

        :param contacts: The contacts of this PersonType.  # noqa: E501
        :type: list[ContactType]
        """

        self._contacts = contacts

    @property
    def note(self):
        """Gets the note of this PersonType.  # noqa: E501

        Poznámka  # noqa: E501

        :return: The note of this PersonType.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this PersonType.

        Poznámka  # noqa: E501

        :param note: The note of this PersonType.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def admins(self):
        """Gets the admins of this PersonType.  # noqa: E501

        Správci subjektu  # noqa: E501

        :return: The admins of this PersonType.  # noqa: E501
        :rtype: list[str]
        """
        return self._admins

    @admins.setter
    def admins(self, admins):
        """Sets the admins of this PersonType.

        Správci subjektu  # noqa: E501

        :param admins: The admins of this PersonType.  # noqa: E501
        :type: list[str]
        """

        self._admins = admins

    @property
    def members(self):
        """Gets the members of this PersonType.  # noqa: E501

        Členové subjektu  # noqa: E501

        :return: The members of this PersonType.  # noqa: E501
        :rtype: list[MemberType]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this PersonType.

        Členové subjektu  # noqa: E501

        :param members: The members of this PersonType.  # noqa: E501
        :type: list[MemberType]
        """

        self._members = members

    @property
    def issuing(self):
        """Gets the issuing of this PersonType.  # noqa: E501

        Osoba je autoritou vydávající nějaké dokumenty  # noqa: E501

        :return: The issuing of this PersonType.  # noqa: E501
        :rtype: list[IssuingType]
        """
        return self._issuing

    @issuing.setter
    def issuing(self, issuing):
        """Sets the issuing of this PersonType.

        Osoba je autoritou vydávající nějaké dokumenty  # noqa: E501

        :param issuing: The issuing of this PersonType.  # noqa: E501
        :type: list[IssuingType]
        """

        self._issuing = issuing

    @property
    def linked_persons(self):
        """Gets the linked_persons of this PersonType.  # noqa: E501

        Vazba na jinoý subjekt  # noqa: E501

        :return: The linked_persons of this PersonType.  # noqa: E501
        :rtype: list[PersonLinkType]
        """
        return self._linked_persons

    @linked_persons.setter
    def linked_persons(self, linked_persons):
        """Sets the linked_persons of this PersonType.

        Vazba na jinoý subjekt  # noqa: E501

        :param linked_persons: The linked_persons of this PersonType.  # noqa: E501
        :type: list[PersonLinkType]
        """

        self._linked_persons = linked_persons

    @property
    def tags(self):
        """Gets the tags of this PersonType.  # noqa: E501


        :return: The tags of this PersonType.  # noqa: E501
        :rtype: TagType
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PersonType.


        :param tags: The tags of this PersonType.  # noqa: E501
        :type: TagType
        """

        self._tags = tags

    @property
    def document(self):
        """Gets the document of this PersonType.  # noqa: E501


        :return: The document of this PersonType.  # noqa: E501
        :rtype: DocumentMetadataType
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this PersonType.


        :param document: The document of this PersonType.  # noqa: E501
        :type: DocumentMetadataType
        """

        self._document = document

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
