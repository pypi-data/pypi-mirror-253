# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssuingType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'tags': 'TagType',
        'representative': 'str',
        'authority': 'str',
        'place': 'str',
        'note': 'str'
    }

    attribute_map = {
        'code': 'code',
        'tags': 'tags',
        'representative': 'representative',
        'authority': 'authority',
        'place': 'place',
        'note': 'note'
    }

    def __init__(self, code=None, tags=None, representative=None, authority=None, place=None, note=None):  # noqa: E501
        """IssuingType - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._tags = None
        self._representative = None
        self._authority = None
        self._place = None
        self._note = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if tags is not None:
            self.tags = tags
        if representative is not None:
            self.representative = representative
        if authority is not None:
            self.authority = authority
        if place is not None:
            self.place = place
        if note is not None:
            self.note = note

    @property
    def code(self):
        """Gets the code of this IssuingType.  # noqa: E501

        Kód vydavatele, kterým se rozliší například detašovaná pracoviště  # noqa: E501

        :return: The code of this IssuingType.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this IssuingType.

        Kód vydavatele, kterým se rozliší například detašovaná pracoviště  # noqa: E501

        :param code: The code of this IssuingType.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def tags(self):
        """Gets the tags of this IssuingType.  # noqa: E501


        :return: The tags of this IssuingType.  # noqa: E501
        :rtype: TagType
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IssuingType.


        :param tags: The tags of this IssuingType.  # noqa: E501
        :type: TagType
        """

        self._tags = tags

    @property
    def representative(self):
        """Gets the representative of this IssuingType.  # noqa: E501

        Statutátní zástupce vydávajícího orgánu  # noqa: E501

        :return: The representative of this IssuingType.  # noqa: E501
        :rtype: str
        """
        return self._representative

    @representative.setter
    def representative(self, representative):
        """Sets the representative of this IssuingType.

        Statutátní zástupce vydávajícího orgánu  # noqa: E501

        :param representative: The representative of this IssuingType.  # noqa: E501
        :type: str
        """

        self._representative = representative

    @property
    def authority(self):
        """Gets the authority of this IssuingType.  # noqa: E501

        Vydávající výkonný orgán  # noqa: E501

        :return: The authority of this IssuingType.  # noqa: E501
        :rtype: str
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this IssuingType.

        Vydávající výkonný orgán  # noqa: E501

        :param authority: The authority of this IssuingType.  # noqa: E501
        :type: str
        """

        self._authority = authority

    @property
    def place(self):
        """Gets the place of this IssuingType.  # noqa: E501

        Místo vydání dokumentu  # noqa: E501

        :return: The place of this IssuingType.  # noqa: E501
        :rtype: str
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this IssuingType.

        Místo vydání dokumentu  # noqa: E501

        :param place: The place of this IssuingType.  # noqa: E501
        :type: str
        """

        self._place = place

    @property
    def note(self):
        """Gets the note of this IssuingType.  # noqa: E501

        Poznámka  # noqa: E501

        :return: The note of this IssuingType.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this IssuingType.

        Poznámka  # noqa: E501

        :param note: The note of this IssuingType.  # noqa: E501
        :type: str
        """

        self._note = note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssuingType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssuingType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
