# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocationType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ruian_adm': 'float',
        'ruian_adm_name': 'str',
        'street': 'str',
        'city': 'str',
        'zip': 'str',
        'region': 'str',
        'country': 'CodeValueType',
        'address_list': 'list[str]',
        'note': 'str',
        'wgs': 'GeoPointType',
        'jtsk': 'GeoPointJtskType'
    }

    attribute_map = {
        'ruian_adm': 'ruian_adm',
        'ruian_adm_name': 'ruian_adm_name',
        'street': 'street',
        'city': 'city',
        'zip': 'zip',
        'region': 'region',
        'country': 'country',
        'address_list': 'address_list',
        'note': 'note',
        'wgs': 'wgs',
        'jtsk': 'jtsk'
    }

    def __init__(self, ruian_adm=None, ruian_adm_name=None, street=None, city=None, zip=None, region=None, country=None, address_list=None, note=None, wgs=None, jtsk=None):  # noqa: E501
        """LocationType - a model defined in Swagger"""  # noqa: E501
        self._ruian_adm = None
        self._ruian_adm_name = None
        self._street = None
        self._city = None
        self._zip = None
        self._region = None
        self._country = None
        self._address_list = None
        self._note = None
        self._wgs = None
        self._jtsk = None
        self.discriminator = None
        if ruian_adm is not None:
            self.ruian_adm = ruian_adm
        if ruian_adm_name is not None:
            self.ruian_adm_name = ruian_adm_name
        if street is not None:
            self.street = street
        if city is not None:
            self.city = city
        if zip is not None:
            self.zip = zip
        if region is not None:
            self.region = region
        if country is not None:
            self.country = country
        if address_list is not None:
            self.address_list = address_list
        if note is not None:
            self.note = note
        if wgs is not None:
            self.wgs = wgs
        if jtsk is not None:
            self.jtsk = jtsk

    @property
    def ruian_adm(self):
        """Gets the ruian_adm of this LocationType.  # noqa: E501

        Kód adresního místa RUIAN  # noqa: E501

        :return: The ruian_adm of this LocationType.  # noqa: E501
        :rtype: float
        """
        return self._ruian_adm

    @ruian_adm.setter
    def ruian_adm(self, ruian_adm):
        """Sets the ruian_adm of this LocationType.

        Kód adresního místa RUIAN  # noqa: E501

        :param ruian_adm: The ruian_adm of this LocationType.  # noqa: E501
        :type: float
        """

        self._ruian_adm = ruian_adm

    @property
    def ruian_adm_name(self):
        """Gets the ruian_adm_name of this LocationType.  # noqa: E501

        Název adresního místa RUIAN  # noqa: E501

        :return: The ruian_adm_name of this LocationType.  # noqa: E501
        :rtype: str
        """
        return self._ruian_adm_name

    @ruian_adm_name.setter
    def ruian_adm_name(self, ruian_adm_name):
        """Sets the ruian_adm_name of this LocationType.

        Název adresního místa RUIAN  # noqa: E501

        :param ruian_adm_name: The ruian_adm_name of this LocationType.  # noqa: E501
        :type: str
        """

        self._ruian_adm_name = ruian_adm_name

    @property
    def street(self):
        """Gets the street of this LocationType.  # noqa: E501

        Ulice nebo část obce a číslo popisné, evidenční, orientační  # noqa: E501

        :return: The street of this LocationType.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this LocationType.

        Ulice nebo část obce a číslo popisné, evidenční, orientační  # noqa: E501

        :param street: The street of this LocationType.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def city(self):
        """Gets the city of this LocationType.  # noqa: E501

        Název obce  # noqa: E501

        :return: The city of this LocationType.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this LocationType.

        Název obce  # noqa: E501

        :param city: The city of this LocationType.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def zip(self):
        """Gets the zip of this LocationType.  # noqa: E501

        PSČ  # noqa: E501

        :return: The zip of this LocationType.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this LocationType.

        PSČ  # noqa: E501

        :param zip: The zip of this LocationType.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def region(self):
        """Gets the region of this LocationType.  # noqa: E501

        Kraj  # noqa: E501

        :return: The region of this LocationType.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this LocationType.

        Kraj  # noqa: E501

        :param region: The region of this LocationType.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def country(self):
        """Gets the country of this LocationType.  # noqa: E501


        :return: The country of this LocationType.  # noqa: E501
        :rtype: CodeValueType
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this LocationType.


        :param country: The country of this LocationType.  # noqa: E501
        :type: CodeValueType
        """

        self._country = country

    @property
    def address_list(self):
        """Gets the address_list of this LocationType.  # noqa: E501

        Seznam adresních položek  # noqa: E501

        :return: The address_list of this LocationType.  # noqa: E501
        :rtype: list[str]
        """
        return self._address_list

    @address_list.setter
    def address_list(self, address_list):
        """Sets the address_list of this LocationType.

        Seznam adresních položek  # noqa: E501

        :param address_list: The address_list of this LocationType.  # noqa: E501
        :type: list[str]
        """

        self._address_list = address_list

    @property
    def note(self):
        """Gets the note of this LocationType.  # noqa: E501

        Poznámka  # noqa: E501

        :return: The note of this LocationType.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this LocationType.

        Poznámka  # noqa: E501

        :param note: The note of this LocationType.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def wgs(self):
        """Gets the wgs of this LocationType.  # noqa: E501


        :return: The wgs of this LocationType.  # noqa: E501
        :rtype: GeoPointType
        """
        return self._wgs

    @wgs.setter
    def wgs(self, wgs):
        """Sets the wgs of this LocationType.


        :param wgs: The wgs of this LocationType.  # noqa: E501
        :type: GeoPointType
        """

        self._wgs = wgs

    @property
    def jtsk(self):
        """Gets the jtsk of this LocationType.  # noqa: E501


        :return: The jtsk of this LocationType.  # noqa: E501
        :rtype: GeoPointJtskType
        """
        return self._jtsk

    @jtsk.setter
    def jtsk(self, jtsk):
        """Sets the jtsk of this LocationType.


        :param jtsk: The jtsk of this LocationType.  # noqa: E501
        :type: GeoPointJtskType
        """

        self._jtsk = jtsk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
