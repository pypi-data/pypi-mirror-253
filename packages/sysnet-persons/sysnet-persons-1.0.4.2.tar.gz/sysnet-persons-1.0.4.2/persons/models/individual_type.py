# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IndividualType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'IdentifierType',
        'pid': 'PidType',
        'registry': 'ReferenceRegistry',
        'name': 'str',
        'username': 'str',
        'password': 'str',
        'contact': 'list[ContactType]',
        'contact_default': 'int',
        'address': 'list[LocationType]',
        'address_default': 'int',
        'address_printable': 'str',
        'birthdate': 'BirthDateType',
        'gdpr': 'bool',
        'tags': 'TagType',
        'document': 'DocumentMetadataType'
    }

    attribute_map = {
        'identifier': 'identifier',
        'pid': 'pid',
        'registry': 'registry',
        'name': 'name',
        'username': 'username',
        'password': 'password',
        'contact': 'contact',
        'contact_default': 'contact_default',
        'address': 'address',
        'address_default': 'address_default',
        'address_printable': 'address_printable',
        'birthdate': 'birthdate',
        'gdpr': 'gdpr',
        'tags': 'tags',
        'document': 'document'
    }

    def __init__(self, identifier=None, pid=None, registry=None, name=None, username=None, password=None, contact=None, contact_default=0, address=None, address_default=0, address_printable=None, birthdate=None, gdpr=True, tags=None, document=None):  # noqa: E501
        """IndividualType - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._pid = None
        self._registry = None
        self._name = None
        self._username = None
        self._password = None
        self._contact = None
        self._contact_default = None
        self._address = None
        self._address_default = None
        self._address_printable = None
        self._birthdate = None
        self._gdpr = None
        self._tags = None
        self._document = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if pid is not None:
            self.pid = pid
        if registry is not None:
            self.registry = registry
        if name is not None:
            self.name = name
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if contact is not None:
            self.contact = contact
        if contact_default is not None:
            self.contact_default = contact_default
        if address is not None:
            self.address = address
        if address_default is not None:
            self.address_default = address_default
        if address_printable is not None:
            self.address_printable = address_printable
        if birthdate is not None:
            self.birthdate = birthdate
        if gdpr is not None:
            self.gdpr = gdpr
        if tags is not None:
            self.tags = tags
        if document is not None:
            self.document = document

    @property
    def identifier(self):
        """Gets the identifier of this IndividualType.  # noqa: E501


        :return: The identifier of this IndividualType.  # noqa: E501
        :rtype: IdentifierType
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this IndividualType.


        :param identifier: The identifier of this IndividualType.  # noqa: E501
        :type: IdentifierType
        """

        self._identifier = identifier

    @property
    def pid(self):
        """Gets the pid of this IndividualType.  # noqa: E501


        :return: The pid of this IndividualType.  # noqa: E501
        :rtype: PidType
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this IndividualType.


        :param pid: The pid of this IndividualType.  # noqa: E501
        :type: PidType
        """

        self._pid = pid

    @property
    def registry(self):
        """Gets the registry of this IndividualType.  # noqa: E501


        :return: The registry of this IndividualType.  # noqa: E501
        :rtype: ReferenceRegistry
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this IndividualType.


        :param registry: The registry of this IndividualType.  # noqa: E501
        :type: ReferenceRegistry
        """

        self._registry = registry

    @property
    def name(self):
        """Gets the name of this IndividualType.  # noqa: E501

        Jméno osoby pro zobrazení  # noqa: E501

        :return: The name of this IndividualType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndividualType.

        Jméno osoby pro zobrazení  # noqa: E501

        :param name: The name of this IndividualType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def username(self):
        """Gets the username of this IndividualType.  # noqa: E501

        Uživatelské jméno osoby  # noqa: E501

        :return: The username of this IndividualType.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this IndividualType.

        Uživatelské jméno osoby  # noqa: E501

        :param username: The username of this IndividualType.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this IndividualType.  # noqa: E501

        Přístupové heslo osoby  # noqa: E501

        :return: The password of this IndividualType.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this IndividualType.

        Přístupové heslo osoby  # noqa: E501

        :param password: The password of this IndividualType.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def contact(self):
        """Gets the contact of this IndividualType.  # noqa: E501


        :return: The contact of this IndividualType.  # noqa: E501
        :rtype: list[ContactType]
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this IndividualType.


        :param contact: The contact of this IndividualType.  # noqa: E501
        :type: list[ContactType]
        """

        self._contact = contact

    @property
    def contact_default(self):
        """Gets the contact_default of this IndividualType.  # noqa: E501

        Primární kontaktní údaje  # noqa: E501

        :return: The contact_default of this IndividualType.  # noqa: E501
        :rtype: int
        """
        return self._contact_default

    @contact_default.setter
    def contact_default(self, contact_default):
        """Sets the contact_default of this IndividualType.

        Primární kontaktní údaje  # noqa: E501

        :param contact_default: The contact_default of this IndividualType.  # noqa: E501
        :type: int
        """

        self._contact_default = contact_default

    @property
    def address(self):
        """Gets the address of this IndividualType.  # noqa: E501


        :return: The address of this IndividualType.  # noqa: E501
        :rtype: list[LocationType]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IndividualType.


        :param address: The address of this IndividualType.  # noqa: E501
        :type: list[LocationType]
        """

        self._address = address

    @property
    def address_default(self):
        """Gets the address_default of this IndividualType.  # noqa: E501

        Primární adresní údaje  # noqa: E501

        :return: The address_default of this IndividualType.  # noqa: E501
        :rtype: int
        """
        return self._address_default

    @address_default.setter
    def address_default(self, address_default):
        """Sets the address_default of this IndividualType.

        Primární adresní údaje  # noqa: E501

        :param address_default: The address_default of this IndividualType.  # noqa: E501
        :type: int
        """

        self._address_default = address_default

    @property
    def address_printable(self):
        """Gets the address_printable of this IndividualType.  # noqa: E501

        Adresa pro tisk  # noqa: E501

        :return: The address_printable of this IndividualType.  # noqa: E501
        :rtype: str
        """
        return self._address_printable

    @address_printable.setter
    def address_printable(self, address_printable):
        """Sets the address_printable of this IndividualType.

        Adresa pro tisk  # noqa: E501

        :param address_printable: The address_printable of this IndividualType.  # noqa: E501
        :type: str
        """

        self._address_printable = address_printable

    @property
    def birthdate(self):
        """Gets the birthdate of this IndividualType.  # noqa: E501


        :return: The birthdate of this IndividualType.  # noqa: E501
        :rtype: BirthDateType
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this IndividualType.


        :param birthdate: The birthdate of this IndividualType.  # noqa: E501
        :type: BirthDateType
        """

        self._birthdate = birthdate

    @property
    def gdpr(self):
        """Gets the gdpr of this IndividualType.  # noqa: E501

        Udělen souhlas se zpracováním dat GDPR  # noqa: E501

        :return: The gdpr of this IndividualType.  # noqa: E501
        :rtype: bool
        """
        return self._gdpr

    @gdpr.setter
    def gdpr(self, gdpr):
        """Sets the gdpr of this IndividualType.

        Udělen souhlas se zpracováním dat GDPR  # noqa: E501

        :param gdpr: The gdpr of this IndividualType.  # noqa: E501
        :type: bool
        """

        self._gdpr = gdpr

    @property
    def tags(self):
        """Gets the tags of this IndividualType.  # noqa: E501


        :return: The tags of this IndividualType.  # noqa: E501
        :rtype: TagType
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IndividualType.


        :param tags: The tags of this IndividualType.  # noqa: E501
        :type: TagType
        """

        self._tags = tags

    @property
    def document(self):
        """Gets the document of this IndividualType.  # noqa: E501


        :return: The document of this IndividualType.  # noqa: E501
        :rtype: DocumentMetadataType
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this IndividualType.


        :param document: The document of this IndividualType.  # noqa: E501
        :type: DocumentMetadataType
        """

        self._document = document

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndividualType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndividualType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
