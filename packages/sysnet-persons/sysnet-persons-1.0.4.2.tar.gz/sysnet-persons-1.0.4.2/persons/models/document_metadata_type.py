# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentMetadataType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'IdentifierType',
        'date_created': 'DateTimeType',
        'date_modified': 'DateTimeType',
        'date_deleted': 'DateTimeType',
        'deleted': 'bool',
        'valid': 'bool',
        'duplicates': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'date_created': 'date_created',
        'date_modified': 'date_modified',
        'date_deleted': 'date_deleted',
        'deleted': 'deleted',
        'valid': 'valid',
        'duplicates': 'duplicates'
    }

    def __init__(self, identifier=None, date_created=None, date_modified=None, date_deleted=None, deleted=False, valid=True, duplicates=None):  # noqa: E501
        """DocumentMetadataType - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._date_created = None
        self._date_modified = None
        self._date_deleted = None
        self._deleted = None
        self._valid = None
        self._duplicates = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified
        if date_deleted is not None:
            self.date_deleted = date_deleted
        if deleted is not None:
            self.deleted = deleted
        if valid is not None:
            self.valid = valid
        if duplicates is not None:
            self.duplicates = duplicates

    @property
    def identifier(self):
        """Gets the identifier of this DocumentMetadataType.  # noqa: E501


        :return: The identifier of this DocumentMetadataType.  # noqa: E501
        :rtype: IdentifierType
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this DocumentMetadataType.


        :param identifier: The identifier of this DocumentMetadataType.  # noqa: E501
        :type: IdentifierType
        """

        self._identifier = identifier

    @property
    def date_created(self):
        """Gets the date_created of this DocumentMetadataType.  # noqa: E501


        :return: The date_created of this DocumentMetadataType.  # noqa: E501
        :rtype: DateTimeType
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this DocumentMetadataType.


        :param date_created: The date_created of this DocumentMetadataType.  # noqa: E501
        :type: DateTimeType
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this DocumentMetadataType.  # noqa: E501


        :return: The date_modified of this DocumentMetadataType.  # noqa: E501
        :rtype: DateTimeType
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this DocumentMetadataType.


        :param date_modified: The date_modified of this DocumentMetadataType.  # noqa: E501
        :type: DateTimeType
        """

        self._date_modified = date_modified

    @property
    def date_deleted(self):
        """Gets the date_deleted of this DocumentMetadataType.  # noqa: E501


        :return: The date_deleted of this DocumentMetadataType.  # noqa: E501
        :rtype: DateTimeType
        """
        return self._date_deleted

    @date_deleted.setter
    def date_deleted(self, date_deleted):
        """Sets the date_deleted of this DocumentMetadataType.


        :param date_deleted: The date_deleted of this DocumentMetadataType.  # noqa: E501
        :type: DateTimeType
        """

        self._date_deleted = date_deleted

    @property
    def deleted(self):
        """Gets the deleted of this DocumentMetadataType.  # noqa: E501

        Dokument byl odstraněn  # noqa: E501

        :return: The deleted of this DocumentMetadataType.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this DocumentMetadataType.

        Dokument byl odstraněn  # noqa: E501

        :param deleted: The deleted of this DocumentMetadataType.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def valid(self):
        """Gets the valid of this DocumentMetadataType.  # noqa: E501

        Dokument je platný/neplatný  # noqa: E501

        :return: The valid of this DocumentMetadataType.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this DocumentMetadataType.

        Dokument je platný/neplatný  # noqa: E501

        :param valid: The valid of this DocumentMetadataType.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def duplicates(self):
        """Gets the duplicates of this DocumentMetadataType.  # noqa: E501

        Dokument je duplicitní k jinému dokumentu s daným identifikátorem  # noqa: E501

        :return: The duplicates of this DocumentMetadataType.  # noqa: E501
        :rtype: str
        """
        return self._duplicates

    @duplicates.setter
    def duplicates(self, duplicates):
        """Sets the duplicates of this DocumentMetadataType.

        Dokument je duplicitní k jinému dokumentu s daným identifikátorem  # noqa: E501

        :param duplicates: The duplicates of this DocumentMetadataType.  # noqa: E501
        :type: str
        """

        self._duplicates = duplicates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentMetadataType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentMetadataType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
