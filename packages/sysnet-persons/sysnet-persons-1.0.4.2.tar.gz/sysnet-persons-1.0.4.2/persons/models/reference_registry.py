# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReferenceRegistry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'uuid': 'str',
        'uri': 'str',
        'other': 'str',
        'date_synchronized': 'DateTimeType'
    }

    attribute_map = {
        'name': 'name',
        'uuid': 'uuid',
        'uri': 'uri',
        'other': 'other',
        'date_synchronized': 'date_synchronized'
    }

    def __init__(self, name=None, uuid=None, uri=None, other=None, date_synchronized=None):  # noqa: E501
        """ReferenceRegistry - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._uuid = None
        self._uri = None
        self._other = None
        self._date_synchronized = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if uuid is not None:
            self.uuid = uuid
        if uri is not None:
            self.uri = uri
        if other is not None:
            self.other = other
        if date_synchronized is not None:
            self.date_synchronized = date_synchronized

    @property
    def name(self):
        """Gets the name of this ReferenceRegistry.  # noqa: E501

        Název identifikační služby (CRŽP, Google, Facebook, ...)  # noqa: E501

        :return: The name of this ReferenceRegistry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReferenceRegistry.

        Název identifikační služby (CRŽP, Google, Facebook, ...)  # noqa: E501

        :param name: The name of this ReferenceRegistry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this ReferenceRegistry.  # noqa: E501

        identifikátor uuid  # noqa: E501

        :return: The uuid of this ReferenceRegistry.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ReferenceRegistry.

        identifikátor uuid  # noqa: E501

        :param uuid: The uuid of this ReferenceRegistry.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def uri(self):
        """Gets the uri of this ReferenceRegistry.  # noqa: E501

        identifikátor uri  # noqa: E501

        :return: The uri of this ReferenceRegistry.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ReferenceRegistry.

        identifikátor uri  # noqa: E501

        :param uri: The uri of this ReferenceRegistry.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def other(self):
        """Gets the other of this ReferenceRegistry.  # noqa: E501

        Jiný identifikátor  # noqa: E501

        :return: The other of this ReferenceRegistry.  # noqa: E501
        :rtype: str
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this ReferenceRegistry.

        Jiný identifikátor  # noqa: E501

        :param other: The other of this ReferenceRegistry.  # noqa: E501
        :type: str
        """

        self._other = other

    @property
    def date_synchronized(self):
        """Gets the date_synchronized of this ReferenceRegistry.  # noqa: E501


        :return: The date_synchronized of this ReferenceRegistry.  # noqa: E501
        :rtype: DateTimeType
        """
        return self._date_synchronized

    @date_synchronized.setter
    def date_synchronized(self, date_synchronized):
        """Sets the date_synchronized of this ReferenceRegistry.


        :param date_synchronized: The date_synchronized of this ReferenceRegistry.  # noqa: E501
        :type: DateTimeType
        """

        self._date_synchronized = date_synchronized

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReferenceRegistry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReferenceRegistry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
