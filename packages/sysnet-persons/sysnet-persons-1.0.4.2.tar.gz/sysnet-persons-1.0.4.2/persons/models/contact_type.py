# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'IdentifierType',
        'first_name': 'str',
        'last_name': 'str',
        'degree_before': 'list[str]',
        'degree_after': 'list[str]',
        'full_name': 'str',
        'birthdate': 'BirthDateType',
        'phone': 'list[PhoneNumberType]',
        'phone_default': 'int',
        'email': 'list[MailAddressType]',
        'email_default': 'int',
        'web': 'str',
        'isds': 'str',
        'reference': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'degree_before': 'degree_before',
        'degree_after': 'degree_after',
        'full_name': 'full_name',
        'birthdate': 'birthdate',
        'phone': 'phone',
        'phone_default': 'phoneDefault',
        'email': 'email',
        'email_default': 'email_default',
        'web': 'web',
        'isds': 'isds',
        'reference': 'reference'
    }

    def __init__(self, identifier=None, first_name=None, last_name=None, degree_before=None, degree_after=None, full_name=None, birthdate=None, phone=None, phone_default=0, email=None, email_default=0, web=None, isds=None, reference=None):  # noqa: E501
        """ContactType - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._first_name = None
        self._last_name = None
        self._degree_before = None
        self._degree_after = None
        self._full_name = None
        self._birthdate = None
        self._phone = None
        self._phone_default = None
        self._email = None
        self._email_default = None
        self._web = None
        self._isds = None
        self._reference = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if degree_before is not None:
            self.degree_before = degree_before
        if degree_after is not None:
            self.degree_after = degree_after
        if full_name is not None:
            self.full_name = full_name
        if birthdate is not None:
            self.birthdate = birthdate
        if phone is not None:
            self.phone = phone
        if phone_default is not None:
            self.phone_default = phone_default
        if email is not None:
            self.email = email
        if email_default is not None:
            self.email_default = email_default
        if web is not None:
            self.web = web
        if isds is not None:
            self.isds = isds
        if reference is not None:
            self.reference = reference

    @property
    def identifier(self):
        """Gets the identifier of this ContactType.  # noqa: E501


        :return: The identifier of this ContactType.  # noqa: E501
        :rtype: IdentifierType
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ContactType.


        :param identifier: The identifier of this ContactType.  # noqa: E501
        :type: IdentifierType
        """

        self._identifier = identifier

    @property
    def first_name(self):
        """Gets the first_name of this ContactType.  # noqa: E501

        Křestní jméno  # noqa: E501

        :return: The first_name of this ContactType.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactType.

        Křestní jméno  # noqa: E501

        :param first_name: The first_name of this ContactType.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ContactType.  # noqa: E501

        Příjmení  # noqa: E501

        :return: The last_name of this ContactType.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactType.

        Příjmení  # noqa: E501

        :param last_name: The last_name of this ContactType.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def degree_before(self):
        """Gets the degree_before of this ContactType.  # noqa: E501

        Tituly před jménem  # noqa: E501

        :return: The degree_before of this ContactType.  # noqa: E501
        :rtype: list[str]
        """
        return self._degree_before

    @degree_before.setter
    def degree_before(self, degree_before):
        """Sets the degree_before of this ContactType.

        Tituly před jménem  # noqa: E501

        :param degree_before: The degree_before of this ContactType.  # noqa: E501
        :type: list[str]
        """

        self._degree_before = degree_before

    @property
    def degree_after(self):
        """Gets the degree_after of this ContactType.  # noqa: E501

        Tituly za jménem  # noqa: E501

        :return: The degree_after of this ContactType.  # noqa: E501
        :rtype: list[str]
        """
        return self._degree_after

    @degree_after.setter
    def degree_after(self, degree_after):
        """Sets the degree_after of this ContactType.

        Tituly za jménem  # noqa: E501

        :param degree_after: The degree_after of this ContactType.  # noqa: E501
        :type: list[str]
        """

        self._degree_after = degree_after

    @property
    def full_name(self):
        """Gets the full_name of this ContactType.  # noqa: E501

        Celé jméno pro zobrazení a tisk  # noqa: E501

        :return: The full_name of this ContactType.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ContactType.

        Celé jméno pro zobrazení a tisk  # noqa: E501

        :param full_name: The full_name of this ContactType.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def birthdate(self):
        """Gets the birthdate of this ContactType.  # noqa: E501


        :return: The birthdate of this ContactType.  # noqa: E501
        :rtype: BirthDateType
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this ContactType.


        :param birthdate: The birthdate of this ContactType.  # noqa: E501
        :type: BirthDateType
        """

        self._birthdate = birthdate

    @property
    def phone(self):
        """Gets the phone of this ContactType.  # noqa: E501

        Telefonní číslo  # noqa: E501

        :return: The phone of this ContactType.  # noqa: E501
        :rtype: list[PhoneNumberType]
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ContactType.

        Telefonní číslo  # noqa: E501

        :param phone: The phone of this ContactType.  # noqa: E501
        :type: list[PhoneNumberType]
        """

        self._phone = phone

    @property
    def phone_default(self):
        """Gets the phone_default of this ContactType.  # noqa: E501

        Index hlavního telefonního čísla  # noqa: E501

        :return: The phone_default of this ContactType.  # noqa: E501
        :rtype: int
        """
        return self._phone_default

    @phone_default.setter
    def phone_default(self, phone_default):
        """Sets the phone_default of this ContactType.

        Index hlavního telefonního čísla  # noqa: E501

        :param phone_default: The phone_default of this ContactType.  # noqa: E501
        :type: int
        """

        self._phone_default = phone_default

    @property
    def email(self):
        """Gets the email of this ContactType.  # noqa: E501

        Elektronická pošta  # noqa: E501

        :return: The email of this ContactType.  # noqa: E501
        :rtype: list[MailAddressType]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactType.

        Elektronická pošta  # noqa: E501

        :param email: The email of this ContactType.  # noqa: E501
        :type: list[MailAddressType]
        """

        self._email = email

    @property
    def email_default(self):
        """Gets the email_default of this ContactType.  # noqa: E501

        Index hlavní adresy elektronické pošty  # noqa: E501

        :return: The email_default of this ContactType.  # noqa: E501
        :rtype: int
        """
        return self._email_default

    @email_default.setter
    def email_default(self, email_default):
        """Sets the email_default of this ContactType.

        Index hlavní adresy elektronické pošty  # noqa: E501

        :param email_default: The email_default of this ContactType.  # noqa: E501
        :type: int
        """

        self._email_default = email_default

    @property
    def web(self):
        """Gets the web of this ContactType.  # noqa: E501

        Webová stránka subjektu  # noqa: E501

        :return: The web of this ContactType.  # noqa: E501
        :rtype: str
        """
        return self._web

    @web.setter
    def web(self, web):
        """Sets the web of this ContactType.

        Webová stránka subjektu  # noqa: E501

        :param web: The web of this ContactType.  # noqa: E501
        :type: str
        """

        self._web = web

    @property
    def isds(self):
        """Gets the isds of this ContactType.  # noqa: E501

        Identifikátor datové schránky  # noqa: E501

        :return: The isds of this ContactType.  # noqa: E501
        :rtype: str
        """
        return self._isds

    @isds.setter
    def isds(self, isds):
        """Sets the isds of this ContactType.

        Identifikátor datové schránky  # noqa: E501

        :param isds: The isds of this ContactType.  # noqa: E501
        :type: str
        """

        self._isds = isds

    @property
    def reference(self):
        """Gets the reference of this ContactType.  # noqa: E501

        identifikátor uuid  # noqa: E501

        :return: The reference of this ContactType.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ContactType.

        identifikátor uuid  # noqa: E501

        :param reference: The reference of this ContactType.  # noqa: E501
        :type: str
        """

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
