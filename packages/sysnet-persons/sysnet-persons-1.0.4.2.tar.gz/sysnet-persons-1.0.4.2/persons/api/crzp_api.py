# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from persons.api_client import ApiClient


class CrzpApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_crzp_person(self, crzp_id, person_id, **kwargs):  # noqa: E501
        """Odstraní CRŽP uuid z osoby  # noqa: E501

        Odstraní CRŽP uuid ze záznamu osoby (subjektu) identifikovanému person_id. Pokud osoba nemá CRŽP uuid, vrátí chybu.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_crzp_person(crzp_id, person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crzp_id: Identifikátor CRŽP (uuid) (required)
        :param str person_id: Identifikátor osoby (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_crzp_person_with_http_info(crzp_id, person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_crzp_person_with_http_info(crzp_id, person_id, **kwargs)  # noqa: E501
            return data

    def delete_crzp_person_with_http_info(self, crzp_id, person_id, **kwargs):  # noqa: E501
        """Odstraní CRŽP uuid z osoby  # noqa: E501

        Odstraní CRŽP uuid ze záznamu osoby (subjektu) identifikovanému person_id. Pokud osoba nemá CRŽP uuid, vrátí chybu.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_crzp_person_with_http_info(crzp_id, person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crzp_id: Identifikátor CRŽP (uuid) (required)
        :param str person_id: Identifikátor osoby (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crzp_id', 'person_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_crzp_person" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crzp_id' is set
        if ('crzp_id' not in params or
                params['crzp_id'] is None):
            raise ValueError("Missing the required parameter `crzp_id` when calling `delete_crzp_person`")  # noqa: E501
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `delete_crzp_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crzp_id' in params:
            path_params['crzp_id'] = params['crzp_id']  # noqa: E501

        query_params = []
        if 'person_id' in params:
            query_params.append(('person_id', params['person_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/crzp/person/{crzp_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crzp_person(self, crzp_id, **kwargs):  # noqa: E501
        """Vrátí subjekt podle CRŽP uuid  # noqa: E501

        Vrátí subjekt podle CRŽP uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crzp_person(crzp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crzp_id: Identifikátor CRŽP (uuid) (required)
        :return: PersonType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crzp_person_with_http_info(crzp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crzp_person_with_http_info(crzp_id, **kwargs)  # noqa: E501
            return data

    def get_crzp_person_with_http_info(self, crzp_id, **kwargs):  # noqa: E501
        """Vrátí subjekt podle CRŽP uuid  # noqa: E501

        Vrátí subjekt podle CRŽP uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crzp_person_with_http_info(crzp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crzp_id: Identifikátor CRŽP (uuid) (required)
        :return: PersonType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crzp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crzp_person" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crzp_id' is set
        if ('crzp_id' not in params or
                params['crzp_id'] is None):
            raise ValueError("Missing the required parameter `crzp_id` when calling `get_crzp_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crzp_id' in params:
            path_params['crzp_id'] = params['crzp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/crzp/person/{crzp_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crzp_person_list(self, **kwargs):  # noqa: E501
        """Vrátí subjekty s vazbou do CRŽP  # noqa: E501

        Vrátí všechny subjekty s vazbou do  CRŽP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crzp_person_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: První dokument na stránce
        :param int page_size: Velikost stránky při stránkovaném výstupu
        :param int page: Číslo stránky výstupu
        :return: DocumentEntryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crzp_person_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_crzp_person_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_crzp_person_list_with_http_info(self, **kwargs):  # noqa: E501
        """Vrátí subjekty s vazbou do CRŽP  # noqa: E501

        Vrátí všechny subjekty s vazbou do  CRŽP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crzp_person_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: První dokument na stránce
        :param int page_size: Velikost stránky při stránkovaném výstupu
        :param int page: Číslo stránky výstupu
        :return: DocumentEntryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'page_size', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crzp_person_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/crzp/person', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentEntryList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_crzp_person(self, crzp_id, person_id, **kwargs):  # noqa: E501
        """Přiřadí CRŽP uuid osobě  # noqa: E501

        Přiřadí CRŽP uuid osobě (subjektu) identifikovanému person_id. Pokud osoba již má CRŽP uuid, vrátí chybu.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_crzp_person(crzp_id, person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crzp_id: Identifikátor CRŽP (uuid) (required)
        :param str person_id: Identifikátor osoby (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_crzp_person_with_http_info(crzp_id, person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_crzp_person_with_http_info(crzp_id, person_id, **kwargs)  # noqa: E501
            return data

    def post_crzp_person_with_http_info(self, crzp_id, person_id, **kwargs):  # noqa: E501
        """Přiřadí CRŽP uuid osobě  # noqa: E501

        Přiřadí CRŽP uuid osobě (subjektu) identifikovanému person_id. Pokud osoba již má CRŽP uuid, vrátí chybu.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_crzp_person_with_http_info(crzp_id, person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crzp_id: Identifikátor CRŽP (uuid) (required)
        :param str person_id: Identifikátor osoby (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crzp_id', 'person_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_crzp_person" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crzp_id' is set
        if ('crzp_id' not in params or
                params['crzp_id'] is None):
            raise ValueError("Missing the required parameter `crzp_id` when calling `post_crzp_person`")  # noqa: E501
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `post_crzp_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crzp_id' in params:
            path_params['crzp_id'] = params['crzp_id']  # noqa: E501

        query_params = []
        if 'person_id' in params:
            query_params.append(('person_id', params['person_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/crzp/person/{crzp_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_crzp_person(self, crzp_id, person_id, **kwargs):  # noqa: E501
        """Přiřadí CRŽP uuid osobě  # noqa: E501

        Přiřadí CRŽP uuid osobě (subjektu) identifikovanému person_id. Pokud osoba již má CRŽP uuid, přepíše obsah.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_crzp_person(crzp_id, person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crzp_id: Identifikátor CRŽP (uuid) (required)
        :param str person_id: Identifikátor osoby (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_crzp_person_with_http_info(crzp_id, person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_crzp_person_with_http_info(crzp_id, person_id, **kwargs)  # noqa: E501
            return data

    def put_crzp_person_with_http_info(self, crzp_id, person_id, **kwargs):  # noqa: E501
        """Přiřadí CRŽP uuid osobě  # noqa: E501

        Přiřadí CRŽP uuid osobě (subjektu) identifikovanému person_id. Pokud osoba již má CRŽP uuid, přepíše obsah.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_crzp_person_with_http_info(crzp_id, person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crzp_id: Identifikátor CRŽP (uuid) (required)
        :param str person_id: Identifikátor osoby (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crzp_id', 'person_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_crzp_person" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crzp_id' is set
        if ('crzp_id' not in params or
                params['crzp_id'] is None):
            raise ValueError("Missing the required parameter `crzp_id` when calling `put_crzp_person`")  # noqa: E501
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `put_crzp_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crzp_id' in params:
            path_params['crzp_id'] = params['crzp_id']  # noqa: E501

        query_params = []
        if 'person_id' in params:
            query_params.append(('person_id', params['person_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/crzp/person/{crzp_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
