# coding: utf-8

"""
    Persons Registry API

    This is a API to Persons Registry  # noqa: E501

    OpenAPI spec version: 1.0.4
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from persons.api_client import ApiClient


class LinkApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_individual_role(self, individual_id, role_code, **kwargs):  # noqa: E501
        """Odebere roli uživateli  # noqa: E501

        Odebere roli uživateli  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_individual_role(individual_id, role_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str individual_id: Identifikátor uživatele (required)
        :param str role_code: Kód role (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_individual_role_with_http_info(individual_id, role_code, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_individual_role_with_http_info(individual_id, role_code, **kwargs)  # noqa: E501
            return data

    def delete_individual_role_with_http_info(self, individual_id, role_code, **kwargs):  # noqa: E501
        """Odebere roli uživateli  # noqa: E501

        Odebere roli uživateli  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_individual_role_with_http_info(individual_id, role_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str individual_id: Identifikátor uživatele (required)
        :param str role_code: Kód role (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['individual_id', 'role_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_individual_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'individual_id' is set
        if ('individual_id' not in params or
                params['individual_id'] is None):
            raise ValueError("Missing the required parameter `individual_id` when calling `delete_individual_role`")  # noqa: E501
        # verify the required parameter 'role_code' is set
        if ('role_code' not in params or
                params['role_code'] is None):
            raise ValueError("Missing the required parameter `role_code` when calling `delete_individual_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'individual_id' in params:
            path_params['individual_id'] = params['individual_id']  # noqa: E501

        query_params = []
        if 'role_code' in params:
            query_params.append(('role_code', params['role_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/individual/role/{individual_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_person_member(self, person_id, identifier, **kwargs):  # noqa: E501
        """Odebere člena osobě  # noqa: E501

        Odebere člena osobě  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_person_member(person_id, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: Identifikátor osoby (required)
        :param str identifier: Identifikátor osoby nebo uživatele (required)
        :param bool is_person: Příznak, zda se přidává osoba nebo uživatel
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_person_member_with_http_info(person_id, identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_person_member_with_http_info(person_id, identifier, **kwargs)  # noqa: E501
            return data

    def delete_person_member_with_http_info(self, person_id, identifier, **kwargs):  # noqa: E501
        """Odebere člena osobě  # noqa: E501

        Odebere člena osobě  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_person_member_with_http_info(person_id, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: Identifikátor osoby (required)
        :param str identifier: Identifikátor osoby nebo uživatele (required)
        :param bool is_person: Příznak, zda se přidává osoba nebo uživatel
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'identifier', 'is_person']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_person_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `delete_person_member`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `delete_person_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in params:
            path_params['person_id'] = params['person_id']  # noqa: E501

        query_params = []
        if 'identifier' in params:
            query_params.append(('identifier', params['identifier']))  # noqa: E501
        if 'is_person' in params:
            query_params.append(('is_person', params['is_person']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/person/member/{person_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_person_role(self, person_id, role_code, **kwargs):  # noqa: E501
        """Odebere roli osobě  # noqa: E501

        Odebere roli osobě  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_person_role(person_id, role_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: Identifikátor osoby (required)
        :param str role_code: Kód role (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_person_role_with_http_info(person_id, role_code, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_person_role_with_http_info(person_id, role_code, **kwargs)  # noqa: E501
            return data

    def delete_person_role_with_http_info(self, person_id, role_code, **kwargs):  # noqa: E501
        """Odebere roli osobě  # noqa: E501

        Odebere roli osobě  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_person_role_with_http_info(person_id, role_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: Identifikátor osoby (required)
        :param str role_code: Kód role (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'role_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_person_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `delete_person_role`")  # noqa: E501
        # verify the required parameter 'role_code' is set
        if ('role_code' not in params or
                params['role_code'] is None):
            raise ValueError("Missing the required parameter `role_code` when calling `delete_person_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in params:
            path_params['person_id'] = params['person_id']  # noqa: E501

        query_params = []
        if 'role_code' in params:
            query_params.append(('role_code', params['role_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/person/role/{person_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_individual_roles(self, individual_id, **kwargs):  # noqa: E501
        """Získá všechny role pro uživatele  # noqa: E501

        Získá všechny role pro uživatele  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_individual_roles(individual_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str individual_id: Identifikátor uživatele (required)
        :return: RoleListType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_individual_roles_with_http_info(individual_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_individual_roles_with_http_info(individual_id, **kwargs)  # noqa: E501
            return data

    def get_individual_roles_with_http_info(self, individual_id, **kwargs):  # noqa: E501
        """Získá všechny role pro uživatele  # noqa: E501

        Získá všechny role pro uživatele  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_individual_roles_with_http_info(individual_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str individual_id: Identifikátor uživatele (required)
        :return: RoleListType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['individual_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_individual_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'individual_id' is set
        if ('individual_id' not in params or
                params['individual_id'] is None):
            raise ValueError("Missing the required parameter `individual_id` when calling `get_individual_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'individual_id' in params:
            path_params['individual_id'] = params['individual_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/individual/role/{individual_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleListType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_person_members(self, person_id, **kwargs):  # noqa: E501
        """Získá všechny uživatele pro osobu  # noqa: E501

        Získá všechny uživatele pro osobu  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_person_members(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: Identifikátor osoby (required)
        :return: list[MemberType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_person_members_with_http_info(person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_person_members_with_http_info(person_id, **kwargs)  # noqa: E501
            return data

    def get_person_members_with_http_info(self, person_id, **kwargs):  # noqa: E501
        """Získá všechny uživatele pro osobu  # noqa: E501

        Získá všechny uživatele pro osobu  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_person_members_with_http_info(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: Identifikátor osoby (required)
        :return: list[MemberType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_person_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `get_person_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in params:
            path_params['person_id'] = params['person_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/person/member/{person_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MemberType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_person_roles(self, person_id, **kwargs):  # noqa: E501
        """Získá všechny role pro osobu  # noqa: E501

        Získá všechny role pro osobu  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_person_roles(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: Identifikátor osoby (required)
        :return: RoleListType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_person_roles_with_http_info(person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_person_roles_with_http_info(person_id, **kwargs)  # noqa: E501
            return data

    def get_person_roles_with_http_info(self, person_id, **kwargs):  # noqa: E501
        """Získá všechny role pro osobu  # noqa: E501

        Získá všechny role pro osobu  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_person_roles_with_http_info(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: Identifikátor osoby (required)
        :return: RoleListType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_person_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `get_person_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in params:
            path_params['person_id'] = params['person_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/person/role/{person_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleListType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_individual_role(self, individual_id, role_code, **kwargs):  # noqa: E501
        """Přiřadí uživateli roli  # noqa: E501

        Přiřadí uživateli roli  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_individual_role(individual_id, role_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str individual_id: Identifikátor uživatele (required)
        :param str role_code: Kód role (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_individual_role_with_http_info(individual_id, role_code, **kwargs)  # noqa: E501
        else:
            (data) = self.put_individual_role_with_http_info(individual_id, role_code, **kwargs)  # noqa: E501
            return data

    def put_individual_role_with_http_info(self, individual_id, role_code, **kwargs):  # noqa: E501
        """Přiřadí uživateli roli  # noqa: E501

        Přiřadí uživateli roli  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_individual_role_with_http_info(individual_id, role_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str individual_id: Identifikátor uživatele (required)
        :param str role_code: Kód role (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['individual_id', 'role_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_individual_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'individual_id' is set
        if ('individual_id' not in params or
                params['individual_id'] is None):
            raise ValueError("Missing the required parameter `individual_id` when calling `put_individual_role`")  # noqa: E501
        # verify the required parameter 'role_code' is set
        if ('role_code' not in params or
                params['role_code'] is None):
            raise ValueError("Missing the required parameter `role_code` when calling `put_individual_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'individual_id' in params:
            path_params['individual_id'] = params['individual_id']  # noqa: E501

        query_params = []
        if 'role_code' in params:
            query_params.append(('role_code', params['role_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/individual/role/{individual_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_person_member(self, person_id, identifier, **kwargs):  # noqa: E501
        """Přiřadí uživatela za člena osoby  # noqa: E501

        Přiřadí uživatele (identifier) nebo jinou osobu za člena osoby (person_id)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_person_member(person_id, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: Identifikátor osoby (required)
        :param str identifier: Identifikátor osoby nebo uživatele (required)
        :param bool is_person: Příznak, zda se přidává osoba nebo uživatel
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_person_member_with_http_info(person_id, identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.put_person_member_with_http_info(person_id, identifier, **kwargs)  # noqa: E501
            return data

    def put_person_member_with_http_info(self, person_id, identifier, **kwargs):  # noqa: E501
        """Přiřadí uživatela za člena osoby  # noqa: E501

        Přiřadí uživatele (identifier) nebo jinou osobu za člena osoby (person_id)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_person_member_with_http_info(person_id, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: Identifikátor osoby (required)
        :param str identifier: Identifikátor osoby nebo uživatele (required)
        :param bool is_person: Příznak, zda se přidává osoba nebo uživatel
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'identifier', 'is_person']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_person_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `put_person_member`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `put_person_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in params:
            path_params['person_id'] = params['person_id']  # noqa: E501

        query_params = []
        if 'identifier' in params:
            query_params.append(('identifier', params['identifier']))  # noqa: E501
        if 'is_person' in params:
            query_params.append(('is_person', params['is_person']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/person/member/{person_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_person_role(self, person_id, role_code, **kwargs):  # noqa: E501
        """Přiřadí osobě roli  # noqa: E501

        Přiřadí osobě roli  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_person_role(person_id, role_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: Identifikátor osoby (required)
        :param str role_code: Kód role (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_person_role_with_http_info(person_id, role_code, **kwargs)  # noqa: E501
        else:
            (data) = self.put_person_role_with_http_info(person_id, role_code, **kwargs)  # noqa: E501
            return data

    def put_person_role_with_http_info(self, person_id, role_code, **kwargs):  # noqa: E501
        """Přiřadí osobě roli  # noqa: E501

        Přiřadí osobě roli  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_person_role_with_http_info(person_id, role_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: Identifikátor osoby (required)
        :param str role_code: Kód role (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'role_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_person_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `put_person_role`")  # noqa: E501
        # verify the required parameter 'role_code' is set
        if ('role_code' not in params or
                params['role_code'] is None):
            raise ValueError("Missing the required parameter `role_code` when calling `put_person_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in params:
            path_params['person_id'] = params['person_id']  # noqa: E501

        query_params = []
        if 'role_code' in params:
            query_params.append(('role_code', params['role_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/person/role/{person_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
