import pytest

import math

from ashapi import GeoPoint, Vec3, Quat, Euler, ecef2lla, lla2ecef, EARTH_RADIUS



def test_ecef2lla_p():

    p = Vec3(EARTH_RADIUS, 0, 0)

    geo = ecef2lla(p)

    assert geo.lat == 0
    assert geo.lon == 0
    assert geo.alt == 0


@pytest.mark.parametrize("p, expected",  [
    ( Vec3(0, 6370988.9, 0), GeoPoint(0, 90, -8.1) ),
    ( Vec3(-6370999.8, 0, 0), GeoPoint(0, 180, 2.8) ),
    ( Vec3(0, -6370996.7, 0), GeoPoint(0, -90, -0.3) ),
    ( Vec3(0, 0, 6370986.5), GeoPoint(90, 0, -10.5) ),
    ( Vec3(0, 0, -6371041), GeoPoint(-90, 0, 44) ),
    ( Vec3(3471321.94130506, 5146446.41932076, 1433168.79100112), GeoPoint(13, 56, 28) ),    
    ( Vec3(-2615978.95642992, 4919940.85614683, 3088708.51592005), GeoPoint(29, 118, -25) ), 
    ( Vec3(-4579982.85987508, -2751931.33632016, 3469889.30105135), GeoPoint(33, -149, -8) ),
    ( Vec3(3326367.93400636, -2078545.37513452, 5020419.03286284), GeoPoint(52, -32, 6.2) ), 
    ( Vec3(-1322782.56123388, -69324.0965086, 6231743.05314669), GeoPoint(78, -177, -33.1) ),
    ( Vec3(5315053.33524684, 2256106.28762315, -2692489.95747519), GeoPoint(-25, 23, -23) ),
    ( Vec3(-4046465.2098347, 2151543.71695916, -4425660.21175966), GeoPoint(-44, 152, -8.9) ),
    ( Vec3(-924277.74917109, -2844634.41240126, -5625301.05411488), GeoPoint(-62, -108, 50.5) ),
    ( Vec3(544602.43676898, -1781314.30633865, -6092635.77003086), GeoPoint(-73, -73, 22) ),
    ( Vec3(-173649.36629073, -409092.27039982, -6355525.4545876), GeoPoint(-86, -113, 48) ), 
])
def test_ecef2lla_p_many(p, expected):

    geo = ecef2lla(p)

    assert geo.lat == pytest.approx(expected.lat)
    assert geo.lon == pytest.approx(expected.lon)
    assert geo.alt == pytest.approx(expected.alt)


def test_ecef2lla_pq():

    p = Vec3(EARTH_RADIUS, 0, 0)
    q = Quat().make_rotate(math.pi, Vec3(1, 0, 1))

    geo, eul = ecef2lla(p, q)

    assert geo.lat == 0
    assert geo.lon == 0
    assert geo.alt == 0

    assert eul.heading == 0
    assert eul.pitch == 0
    assert eul.roll == 0


ecef_to_lla_test_data = [
    ( Vec3(6371000.2, 0, 0), Quat(-1, 0, 0, 0), GeoPoint(0, 0, 3.2), Euler(180, -90, 180) ),
    ( Vec3(0, 6370988.9, 0), Quat(-0.707106781186547, -0.707106781186547, 0, 0), GeoPoint(0, 90, -8.1), Euler(180, -90, 180) ),
    ( Vec3(-6370999.8, 0, 0), Quat(0, -1, 0, 0), GeoPoint(0, 180, 2.8), Euler(180, -90, 180) ),
    ( Vec3(0, -6370996.7, 0), Quat(-0.707106781186547, 0.707106781186547, 0, 0), GeoPoint(0, -90, -0.3), Euler(180, -90, 180) ),
    ( Vec3(0, 0, 6370986.5), Quat(-0.707106781186548, 0, -0.707106781186547, 0), GeoPoint(90, 0, -10.5), Euler(180, -90, 180) ),
    ( Vec3(0, 0, -6371041), Quat(-0.707106781186547, 0, 0.707106781186547, 0), GeoPoint(-90, 0, 44), Euler(180, -90, 180) ),
    ( Vec3(3471321.94130506, 5146446.41932076, 1433168.79100112), Quat(-0.87727187830202, -0.466453731824565, -0.099952505100268, 0.053145689680004), GeoPoint(13, 56, 28), Euler(180, -90, 180) ),      
    ( Vec3(-2615978.95642992, 4919940.85614683, 3088708.51592005), Quat(-0.498632896929052, -0.829864499584022, -0.128955235284171, 0.214617552225129), GeoPoint(29, 118, -25), Euler(180, -90, 180) ),  
    ( Vec3(-4579982.85987508, -2751931.33632016, 3469889.30105135), Quat(-0.256233428897961, 0.923947895656408, -0.075899799499983, -0.273685835335244), GeoPoint(33, -149, -8), Euler(180, -90, 180) ), 
    ( Vec3(3326367.93400636, -2078545.37513452, 5020419.03286284), Quat(-0.863976289244801, 0.247741214345964, -0.421389392012894, -0.120831463767407), GeoPoint(52, -32, 6.2), Euler(180, -90, 180) ),  
    ( Vec3(-1322782.56123388, -69324.0965086, 6231743.05314669), Quat(-0.020343309660731, 0.776879652945633, -0.016473687345602, -0.629104738669452), GeoPoint(78, -177, -33.1), Euler(180, -90, 180) ), 
    ( Vec3(5315053.33524684, 2256106.28762315, -2692489.95747519), Quat(-0.956696576399496, -0.194642118319258, 0.212094524756542, -0.043151118756895), GeoPoint(-25, 23, -23), Euler(180, -90, 180) ),  
    ( Vec3(-4046465.2098347, 2151543.71695916, -4425660.21175966), Quat(-0.224306075666204, -0.899642531558259, 0.090625537183311, -0.363479176626269), GeoPoint(-44, 152, -8.9), Euler(180, -90, 180) ),
    ( Vec3(-924277.74917109, -2844634.41240126, -5625301.05411488), Quat(-0.503830298100049, 0.69346291329051, 0.302731784801236, 0.416674555352391), GeoPoint(-62, -108, 50.5), Euler(180, -90, 180) ), 
    ( Vec3(544602.43676898, -1781314.30633865, -6092635.77003086), Quat(-0.646185852361368, 0.478152377981518, 0.478152377981518, 0.353814147638631), GeoPoint(-73, -73, 22), Euler(180, -90, 180) ),
    ( Vec3(-173649.36629073, -409092.27039982, -6355525.4545876), Quat(-0.403661157268499, 0.609865482696568, 0.376420118840663, 0.568708763129177), GeoPoint(-86, -113, 48), Euler(180, -90, 180) ),
    ( Vec3(6371000.2, 0, 0), Quat(-0.956304755963035, 0, 0, -0.292371704722737), GeoPoint(0, 0, 3.2), Euler(180, -90, 146) ),
    ( Vec3(0, 6370988.9, 0), Quat(-0.676209577822409, -0.676209577822409, -0.206738015036518, -0.206738015036518), GeoPoint(0, 90, -8.1), Euler(180, -90, 146) ),
    ( Vec3(-6370999.8, 0, 0), Quat(0, -0.956304755963035, -0.292371704722737, 0), GeoPoint(0, 180, 2.8), Euler(180, -90, 146) ),
    ( Vec3(0, -6370996.7, 0), Quat(-0.676209577822409, 0.676209577822409, 0.206738015036518, -0.206738015036518), GeoPoint(0, -90, -0.3), Euler(180, -90, 146) ),
    ( Vec3(0, 0, 6370986.5), Quat(-0.676209577822409, 0.206738015036518, -0.676209577822409, -0.206738015036518), GeoPoint(90, 0, -10.5), Euler(180, -90, 146) ),
    ( Vec3(0, 0, -6371041), Quat(-0.676209577822409, -0.206738015036518, 0.676209577822409, -0.206738015036518), GeoPoint(-90, 0, 44), Euler(180, -90, 146) ),
    ( Vec3(3471321.94130506, 5146446.41932076, 1433168.79100112), Quat(-0.854477565383255, -0.416848637873064, -0.231962928745636, -0.205665998764555), GeoPoint(13, 56, 28), Euler(180, -90, 146) ),
    ( Vec3(-2615978.95642992, 4919940.85614683, 3088708.51592005), Quat(-0.539593110420361, -0.75590050578413, -0.365949403240846, 0.059453635800053), GeoPoint(29, 118, -25), Euler(180, -90, 146) ),
    ( Vec3(-4579982.85987508, -2751931.33632016, 3469889.30105135), Quat(-0.165019252456405, 0.905766720646186, 0.197552882089575, -0.336642470384659), GeoPoint(33, -149, -8), Euler(180, -90, 146) ),
    ( Vec3(3326367.93400636, -2078545.37513452, 5020419.03286284), Quat(-0.790896933398278, 0.360118436421991, -0.330544158525892, -0.368153923997273), GeoPoint(52, -32, 6.2), Euler(180, -90, 146) ),
    ( Vec3(-1322782.56123388, -69324.0965086, 6231743.05314669), Quat(0.164478021113353, 0.747750146975124, 0.211383762939276, -0.60756366171369), GeoPoint(78, -177, -33.1), Euler(180, -90, 146) ),
    ( Vec3(5315053.33524684, 2256106.28762315, -2692489.95747519), Quat(-0.902277319872745, -0.248147621224855, 0.145919154794555, -0.320976629036671), GeoPoint(-25, 23, -23), Euler(180, -90, 146) ),
    ( Vec3(-4046465.2098347, 2151543.71695916, -4425660.21175966), Quat(-0.108233940449556, -0.886828774393487, -0.176364388372661, -0.413177615023425), GeoPoint(-44, 152, -8.9), Euler(180, -90, 146) ),
    ( Vec3(-924277.74917109, -2844634.41240126, -5625301.05411488), Quat(-0.603639160334318, 0.574651674067602, 0.492252779707342, 0.251162135825799), GeoPoint(-62, -108, 50.5), Euler(180, -90, 146) ),
    ( Vec3(544602.43676898, -1781314.30633865, -6092635.77003086), Quat(-0.721395849349333, 0.317461167271074, 0.597057619006447, 0.149427692891223), GeoPoint(-73, -73, 22), Euler(180, -90, 146) ),
    ( Vec3(-173649.36629073, -409092.27039982, -6355525.4545876), Quat(-0.552297435060245, 0.473162669763041, 0.538279760715047, 0.425839794257344), GeoPoint(-86, -113, 48), Euler(180, -90, 146) ),
    ( Vec3(6371000.2, 0, 0), Quat(-0.829037572555042, 0, 0, -0.559192903470747), GeoPoint(0, 0, 3.2), Euler(180, -90, 112) ),
    ( Vec3(0, 6370988.9, 0), Quat(-0.586218089412104, -0.586218089412104, -0.395409094035559, -0.39540909403556), GeoPoint(0, 90, -8.1), Euler(180, -90, 112) ),
    ( Vec3(-6370999.8, 0, 0), Quat(0, -0.829037572555042, -0.559192903470747, 0), GeoPoint(0, 180, 2.8), Euler(180, -90, 112) ),
    ( Vec3(0, -6370996.7, 0), Quat(-0.586218089412104, 0.586218089412104, 0.39540909403556, -0.39540909403556), GeoPoint(0, -90, -0.3), Euler(180, -90, 112) ),
    ( Vec3(0, 0, 6370986.5), Quat(-0.586218089412104, 0.39540909403556, -0.586218089412104, -0.39540909403556), GeoPoint(90, 0, -10.5), Euler(180, -90, 112) ),
    ( Vec3(0, 0, -6371041), Quat(-0.586218089412104, -0.39540909403556, 0.586218089412104, -0.39540909403556), GeoPoint(-90, 0, 44), Euler(180, -90, 112) ),
    ( Vec3(3471321.94130506, 5146446.41932076, 1433168.79100112), Quat(-0.757010040977426, -0.330814938004884, -0.343701998832865, -0.446504435196868), GeoPoint(13, 56, 28), Euler(180, -90, 112) ),
    ( Vec3(-2615978.95642992, 4919940.85614683, 3088708.51592005), Quat(-0.533398018630704, -0.615877997848433, -0.570963074237941, -0.10090596287536), GeoPoint(29, 118, -25), Euler(180, -90, 112) ),
    ( Vec3(-4579982.85987508, -2751931.33632016, 3469889.30105135), Quat(-0.059383963001088, 0.808430149837571, 0.453741320892914, -0.370179755640745), GeoPoint(33, -149, -8), Euler(180, -90, 112) ),
    ( Vec3(3326367.93400636, -2078545.37513452, 5020419.03286284), Quat(-0.648700708525906, 0.441024732574679, -0.210812509695326, -0.583303233122686), GeoPoint(52, -32, 6.2), Euler(180, -90, 112) ),
    ( Vec3(-1322782.56123388, -69324.0965086, 6231743.05314669), Quat(0.334925537344908, 0.653274390703107, 0.420768283009986, -0.532927299824785), GeoPoint(78, -177, -33.1), Euler(180, -90, 112) ),
    ( Vec3(5315053.33524684, 2256106.28762315, -2692489.95747519), Quat(-0.769007607984278, -0.279967382397228, 0.066991838675736, -0.570751835044608), GeoPoint(-25, 23, -23), Euler(180, -90, 112) ),
    ( Vec3(-4046465.2098347, 2151543.71695916, -4425660.21175966), Quat(0.017296811649143, -0.796514617796463, -0.427941743949887, -0.426768259982461), GeoPoint(-44, 152, -8.9), Euler(180, -90, 112) ),
    ( Vec3(-924277.74917109, -2844634.41240126, -5625301.05411488), Quat(-0.650695701726434, 0.405621344575427, 0.638755563939075, 0.063700534663699), GeoPoint(-62, -108, 50.5), Euler(180, -90, 112) ),
    ( Vec3(544602.43676898, -1781314.30633865, -6092635.77003086), Quat(-0.733562710968153, 0.129026870208291, 0.663785703298145, -0.068017320869711), GeoPoint(-73, -73, 22), Euler(180, -90, 112) ),
    ( Vec3(-173649.36629073, -409092.27039982, -6355525.4545876), Quat(-0.652668170440098, 0.295109940180558, 0.653098871580226, 0.245756477924059), GeoPoint(-86, -113, 48), Euler(180, -90, 112) ),
    ( Vec3(6371000.2, 0, 0), Quat(-0.707106781186547, 0, 0, -0.707106781186548), GeoPoint(0, 0, 3.2), Euler(180, -90, 90) ),
    ( Vec3(0, 6370988.9, 0), Quat(-0.5, -0.5, -0.5, -0.5), GeoPoint(0, 90, -8.1), Euler(180, -90, 90) ),
    ( Vec3(-6370999.8, 0, 0), Quat(0, -0.707106781186547, -0.707106781186547, 0), GeoPoint(0, 180, 2.8), Euler(180, -90, 90) ),
    ( Vec3(0, -6370996.7, 0), Quat(-0.5, 0.5, 0.5, -0.5), GeoPoint(0, -90, -0.3), Euler(180, -90, 90) ),
    ( Vec3(0, 0, 6370986.5), Quat(-0.5, 0.5, -0.5, -0.5), GeoPoint(90, 0, -10.5), Euler(180, -90, 90) ),
    ( Vec3(0, 0, -6371041), Quat(-0.5, -0.5, 0.5, -0.5), GeoPoint(-90, 0, 44), Euler(180, -90, 90) ),
]

@pytest.mark.parametrize("p, q, expected_geo, expected_euler",  ecef_to_lla_test_data)
def test_ecef2lla_pq_many(p, q, expected_geo, expected_euler):

    #TODO: check why some of these tests are failing

    geo, eul = ecef2lla(p, q)

    assert geo.lat == pytest.approx(expected_geo.lat)
    assert geo.lon == pytest.approx(expected_geo.lon)
    assert geo.alt == pytest.approx(expected_geo.alt)

    assert eul.equals(expected_euler) or eul.equiv(expected_euler)


def test_lla2ecef_geo():

    geo = GeoPoint(0, 0, 0)

    p = lla2ecef(geo)

    assert p.x == EARTH_RADIUS
    assert p.y == 0
    assert p.z == 0


@pytest.mark.parametrize("geo, expected_p",  [
        (GeoPoint(0, 90, 0), Vec3(0, EARTH_RADIUS, 0)),
        (GeoPoint(0, 180, 0), Vec3(-EARTH_RADIUS, 0, 0)),
        (GeoPoint(0, -180, 0), Vec3(-EARTH_RADIUS, -0, 0)),
        (GeoPoint(0, -90, 0), Vec3(0, -EARTH_RADIUS, 0)),
        (GeoPoint(90, 0, 0), Vec3(0, 0, EARTH_RADIUS)),
        (GeoPoint(90, 90, 0), Vec3(0, 0, EARTH_RADIUS)),
        (GeoPoint(90, 180, 0), Vec3(-0, 0, EARTH_RADIUS)),
        (GeoPoint(90, -180, 0), Vec3(-0, -0, EARTH_RADIUS)),
        (GeoPoint(90, -90, 0), Vec3(0, -0, EARTH_RADIUS)),
        (GeoPoint(-90, 0, 0), Vec3(0, 0, -EARTH_RADIUS)),
        (GeoPoint(-90, 90, 0), Vec3(0, 0, -EARTH_RADIUS)),
        (GeoPoint(-90, 180, 0), Vec3(-0, 0, -EARTH_RADIUS)),
        (GeoPoint(-90, -180, 0), Vec3(-0, -0, -EARTH_RADIUS)),
        (GeoPoint(-90, -90, 0), Vec3(0, -0, -EARTH_RADIUS)),
        (GeoPoint(45, 45, 0), Vec3(3185498.5, 3185498.5, 4504975.18161915)),
        (GeoPoint(45, 135, 0), Vec3(-3185498.5, 3185498.5, 4504975.18161915)),
        (GeoPoint(45, -135, 0), Vec3(-3185498.5, -3185498.5, 4504975.18161915)),
        (GeoPoint(45, -45, 0), Vec3(3185498.5, -3185498.5, 4504975.18161915)),
        (GeoPoint(45, -135, 0), Vec3(-3185498.5, -3185498.5, 4504975.18161915)),
        (GeoPoint(-45, 45, 0), Vec3(3185498.5, 3185498.5, -4504975.18161915)),
        (GeoPoint(-45, 135, 0), Vec3(-3185498.5, 3185498.5, -4504975.18161915)),
        (GeoPoint(-45, -135, 0), Vec3(-3185498.5, -3185498.5, -4504975.18161915)),
        (GeoPoint(-45, -45, 0), Vec3(3185498.5, -3185498.5, -4504975.18161915)),
        (GeoPoint(-45, -135, 0), Vec3(-3185498.5, -3185498.5, -4504975.18161915)),
])
def test_lla2ecef_geo_many(geo, expected_p):

    p = lla2ecef(geo)

    assert p.x == pytest.approx(expected_p.x, abs=1E-8)
    assert p.y == pytest.approx(expected_p.y, abs=1E-8)
    assert p.z == pytest.approx(expected_p.z, abs=1E-8)


def test_lla2ecef_geo_eul():

    geo = GeoPoint(0, 0, 0)
    eul = Euler(0, 0, 0)
    p, q = lla2ecef(geo, eul)

    assert p.x == EARTH_RADIUS
    assert p.y == 0
    assert p.z == 0

    expected_q = Quat().make_rotate(math.pi, Vec3(1,0,1))

    assert q.equals(expected_q) or q.equiv(expected_q)


lla_to_ecef_test_data = [(geo, eul, p, q) for p, q, geo, eul in ecef_to_lla_test_data]

@pytest.mark.parametrize("geo, eul, expected_p, expected_q",  lla_to_ecef_test_data)
def test_lla2ecef_geo_eul_many(geo, eul, expected_p, expected_q):

    #TODO: check why some of these tests are failing

    p, q = lla2ecef(geo, eul)

    assert p.x == pytest.approx(expected_p.x, abs=1E-8)
    assert p.y == pytest.approx(expected_p.y, abs=1E-8)
    assert p.z == pytest.approx(expected_p.z, abs=1E-8)

    assert q.equals(expected_q) or q.equiv(expected_q)


if __name__ == "__main__":

    for (v, q, geo, eul) in ecef_to_lla_test_data:
        print(f"    ( Vec3({v.x}, {v.y}, {v.z}), Quat({q.x}, {q.y}, {q.z}, {q.w}), GeoPoint({geo.lat}, {geo.lon}, {geo.alt}), Euler({-eul.heading}, {eul.pitch}, {-eul.roll}) ),")
