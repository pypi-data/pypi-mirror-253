# The user name used to log in the game. Spaces and underscores are not allowed.
username: myagent
# The maximum number of turns per game. The game will end after the turn number reaches this limit.
max_turns: 1000
# The name of service used
service: freeciv-web
# The URL that hosts the game.
host: localhost
# The port to be connected by the client. Used in the single-thread mode. For parallel running, the client port is chosen from available ports.
client_port: 6001
# Whether to start a multiplayer game or single-player game.
multiplayer_game: True
# Whether to use the hotseat mode in a single-player game.
hotseat_game: False
# Whether to wait for an observer to join before starting the game. If set to True, the game will not start until a user observes the game through the browser.
wait_for_observer: False
# The duration in seconds before considering the server as timed out. In pytest, we automatically set it to be 5 in conftest.py.
server_timeout: 30
# Sometimes we perform an invalid action and cannot receive the response to wait_for_packs. We wait for wait_for_timeout seconds and clear the wait_for_packs to prevent the process from stucking.
wait_for_timeout: 10000
# Sometimes, the server is stuck for unknown reasons and will not return a begin_turn packet. We wait for begin_turn_timeout seconds before we close the environment. This configuration should be carefully set when playing with human or AI agents because they may take more than 60 seconds for each of their turns. In those cases, the server will send a begin_turn packet only after they finish their turns.
begin_turn_timeout: 30
# Whether in pytest mode. In pytest, we automatically set it as True in conftest.py.
pytest: False
# The number of episode scores maintained in the ParallelTensorEnv.
score_window: 10
# The number of AI players to be initialized when a game starts.
aifill: 4
# The maximum number of players allowed to join a game.
maxplayers: 10
# Whether start multiple clients for self play. When it is true, the following clients will add increasing index to their username for login to the same game. Note that when running pytest, we automatically set this as False. By doing so, different tests connecting to the same port will raise exception and force one test to re-select a random new port.
self_play: True
# The minimum number of players needed for starting a game.
minp: 1
# Decides whether one can take control/observe a player. Please check the details of this setting in the Freeciv instruction.
allowtake: HAhadOo
# Whether to allow an AI to control a player when the previous player disconnects.
autotoggle: disabled
# Whether to end the game when some players succeed under victory conditions. Options: enabled, disabled.
endvictory: enabled
# Victory condition options: SPACERACE|ALLIED|CULTURE. If a certain victory condition is not set, the calculation logic for that victory condition will be skipped
victories: "SPACERACE|ALLIED"
# Whether to open the chatbox in the web interface. Options: enabled, disabled.
openchatbox: enabled
# The ruleset to be used.
ruleset: classic
# The type of runner.
runner_type: "parallel"
# whether to alow an AI to help a player to get a action response
advisor: disabled

# Parameters for parallel running
# Number of environments running simultaneously to sample experience.
batch_size_run: 5
# Number of epochs to run. Each epoch runs batch_size_run environments.
epoch_num: 1
# The port used by the first environment; other parallel environments use ports following this port.
port_start: 6300

debug:
  # Records the game state and available actions at every step.
  # **Warning**: generates many log files if True. Turned off by default.
  record_action_and_observation: False

  # Take screenshots during playing.
  # *wait_for_observer* flag should be set to *True* if enable screenshots.
  # You can exec 'update_javascript_for_clean_screenshot' command first for generating more clean screenshots.
  # **Warning**: generates many log files if True. Turned off by default.
  take_screenshot: False
  global_view_screenshot: True
  sleep_time_after_turn: 0.0
  # The headless mode for browser when take_screenshot is true
  headless: False
  # The window size (width) for sceenshot. For example, window_size_x: 3840, window_size_y: 2160.
  window_size_x: 
  # The window size (height) for sceenshot.
  window_size_y: 
  # Get webpage image data by locating elements by ID on the web page. 
  # The parameter type is list. 
  # Options include, but are not limited to: ['cities_tab', 'tech_tab', 'players_tab', 'civ_tab', 'map_tab'].
  get_webpage_image: 
  # If true, auto save game in every turn begining. The save will be deleted in the end of that turn unless the program finds some issues in that turn.
  autosave: True
  # If true, will save the game when using KeyboardInterrupt. Note that when using this, we should disable autosave. Otherwise, the game will be saved in the beginning of every turn and cannot be saved again when KeyboardInterrupt.
  interrupt_save: False
  # Password used to login to the Freeciv-web account.
  password: civrealm
  # load_game: "testcontroller_T230_2023-09-08-09_14"
  # load_game: "myagent_T1_2023-08-28-12_19"
  # load_game: "testcontroller_T200_2023-07-31-01_51"
  # The name of the saved game to be loaded. 
  load_game: ""
  
  # whether to use randomly generated seeds for running games. if True, the following random seeds (mapseed, gameseed, agentseed) are ignored
  randomly_generate_seeds: True
  # The seed for generating a map. The same seed leads to the same map.
  mapseed: 88
  # The seed for fixing the behavior of random outputs.
  gameseed: 1729
  # The seed for fixing the action sequence when game/map are fixed.
  agentseed: 1729
  # Whether to print debug information for tensor env.
  tensor_debug: False
  # The path to the directory that stores the log files.. Use null for the default path `civrealm/logs``. 
  logging_path: null
  host:

trainer:
  epoch: 300
  lr: 1.0e-5
  max_steps: 20000000
