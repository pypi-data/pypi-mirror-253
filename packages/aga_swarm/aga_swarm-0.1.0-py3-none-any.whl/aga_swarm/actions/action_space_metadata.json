{
    "aga_swarm/actions": {
        "type": "folder",
        "name": "actions",
        "description": "This is the root of the action space",
        "children": [
            "aga_swarm/actions/swarm",
            "aga_swarm/actions/data",
            "aga_swarm/actions/reasoning",
            "aga_swarm/actions/math",
            "aga_swarm/actions/software",
            "aga_swarm/actions/communication",
            "aga_swarm/actions/external_apis"
        ]
    },
    "aga_swarm/actions/swarm": {
        "type": "folder",
        "name": "swarm",
        "description": "This folder contains all actions pertaining to internal swarm operations such as:\n- navigating the action space to find the best action to take\n- navigating the swarm memory to find relevant information\n- different types of actions/memories and how to handle them\n- documentation to understand internals of the swarm",
        "children": [
            "aga_swarm/actions/swarm/documentation",
            "aga_swarm/actions/swarm/memory",
            "aga_swarm/actions/swarm/actions"
        ]
    },
    "aga_swarm/actions/data": {
        "type": "folder",
        "name": "data",
        "description": "This folder contains all actions pertaining to data operations. File/folder operations on any cloud provider or local machines, database operations, data transformations, data preprocessing, cryptography, validation and compression. ",
        "children": [
            "aga_swarm/actions/data/file_operations",
            "aga_swarm/actions/data/folder_operations",
            "aga_swarm/actions/data/database_operations",
            "aga_swarm/actions/data/data_transformations",
            "aga_swarm/actions/data/data_preprocessing",
            "aga_swarm/actions/data/cryptography",
            "aga_swarm/actions/data/data_validation",
            "aga_swarm/actions/data/data_compression"
        ]
    },
    "aga_swarm/actions/reasoning": {
        "type": "folder",
        "name": "reasoning",
        "description": "This folder contains all actions pertaining to reasoning operations. Decomposing directives, requirements analysis and reviewing reports to see if a directive has been completed.",
        "children": [
            "aga_swarm/actions/reasoning/decompose_directive",
            "aga_swarm/actions/reasoning/requirements_analysis",
            "aga_swarm/actions/reasoning/review_reports"
        ]
    },
    "aga_swarm/actions/math": {
        "type": "folder",
        "name": "math",
        "description": "This folder is currently empty. It will contain actions pertaining to math.",
        "children": []
    },
    "aga_swarm/actions/software": {
        "type": "folder",
        "name": "software",
        "description": "This folder contains all actions pertaining to software. Writing, debugging, testing, refactoring or reviewing code. Writing documentation.",
        "children": [
            "aga_swarm/actions/software/writing_code",
            "aga_swarm/actions/software/debugging_code",
            "aga_swarm/actions/software/testing_code",
            "aga_swarm/actions/software/refactoring_code",
            "aga_swarm/actions/software/reviewing_code",
            "aga_swarm/actions/software/writing_documentation"
        ]
    },
    "aga_swarm/actions/external_apis": {
        "type": "folder",
        "name": "external_apis",
        "description": "This folder contains functions to interact with external apis: Cloud providers, openai, web apis",
        "children": [
            "aga_swarm/actions/external_apis/cloud_providers",
            "aga_swarm/actions/external_apis/openai",
            "aga_swarm/actions/external_apis/web"
        ]
    },
    "aga_swarm/actions/communication": {
        "type": "folder",
        "name": "communication",
        "description": "This folder is currently empty. It will contain actions to communicate with the user",
        "children": []
    },
    "aga_swarm/actions/swarm/actions": {
        "type": "folder",
        "name": "actions",
        "description": "This folder contains an action router that takes a directive and routes it to the appropriate action, as well as all the actions to handle each type of action.",
        "children": [
            "aga_swarm/actions/swarm/actions/action_types",
            "aga_swarm/actions/swarm/actions/route_to_action/route_to_action.py"
        ]
    },
    "aga_swarm/actions/swarm/documentation": {
        "type": "folder",
        "name": "documentation",
        "description": "This folder contains all the documentation to understand the internals of the swarm. It is currently empty.",
        "children": []
    },
    "aga_swarm/actions/swarm/memory": {
        "type": "folder",
        "name": "memory",
        "description": "This folder contains all the actions to handle each type of memory as well as a memory router to navigate the swarms memory",
        "children": []
    },
    "aga_swarm/actions/swarm/actions/route_to_action/route_to_action.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "route_to_action.py",
        "description": "Finds the best action to take given a directive",
        "input_schema": {
            "directive": {
                "type": "string",
                "description": "The directive to be broken down"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id"
            }
        },
        "output_schema": {
            "node_output": {
                "type": "aga_swarm.core.swarm.types.NodeOutput",
                "description": "The output of the node"
            }
        },
        "dependencies": [
            "openai"
        ]
    },
    "aga_swarm/actions/swarm/actions/action_types": {
        "type": "folder",
        "name": "action_types",
        "description": "Every action in the action space has a type. This folder contains all the actions to handle each type of action. Each of these will take the action type, params and the swarm and return the output of said action.",
        "children": [
            "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
            "aga_swarm/actions/swarm/actions/action_types/default_swarm_action.py",
            "aga_swarm/actions/swarm/actions/action_types/action.py"
        ]
    },
    "aga_swarm/actions/swarm/actions/action_types/action.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/default_swarm_action.py",
        "name": "action.py",
        "description": "Passes the action to the appropriate action_type for execution. This function serves as a universal entry point for executing actions. Every action action_type is expected to follow the default_swarm_action.py action type.",
        "input_schema": {
            "action_id": {
                "type": "string",
                "description": "The type of action to be taken"
            },
            "params": {
                "type": "Dict[str, Any]",
                "description": "The params for the action"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id"
            }
        },
        "output_schema": {
            "output": {
                "type": "Dict[str, Any]",
                "description": "The output of the action"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/default_swarm_action.py",
        "name": "internal_default_swarm_action.py",
        "description": "This action type is only used to execute actions that are defined in the swarm package itself. It simply calls the main function of the action script specified by the action_id with the params provided.",
        "input_schema": {
            "action_id": {
                "type": "string",
                "description": "The type of action to be taken"
            },
            "params": {
                "type": "Dict[str, Any]",
                "description": "The params for the action"
            }
        },
        "output_schema": {
            "output": {
                "type": "Dict[str, Any]",
                "description": "The output of the action"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/swarm/actions/action_types/default_swarm_action.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/default_swarm_action.py",
        "name": "default_swarm_action.py",
        "description": "This action calls the main function of the action script specified by the action_id with the params provided.",
        "input_schema": {
            "action_id": {
                "type": "string",
                "description": "The type of action to be taken"
            },
            "params": {
                "type": "Dict[str, Any]",
                "description": "The params for the action"
            }
        },
        "output_schema": {
            "output": {
                "type": "Dict[str, Any]",
                "description": "The output of the action"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/reasoning/decompose_directive/decompose_directive.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "decompose_directive.py",
        "description": "Decompose directives into immediate parralel sub-directives.",
        "input_schema": {
            "directive": {
                "type": "string",
                "description": "The directive to be decomposed"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id"
            }
        },
        "output_schema": {
            "node_output": {
                "type": "aga_swarm.core.swarm.types.NodeOutput",
                "description": "The output of the node"
            }
        },
        "dependencies": [
            "openai"
        ]
    },
    "aga_swarm/actions/reasoning/requirements_analysis/requirements_analysis.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "requirements_analysis.py",
        "description": "Analyze the requirements of a directive and identify what requirements are unclear or missing. Ask questions to clarify.",
        "input_schema": {
            "directive": {
                "type": "string",
                "description": "The directive to be analyzed"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id"
            }
        },
        "output_schema": {
            "node_output": {
                "type": "aga_swarm.core.swarm.types.NodeOutput",
                "description": "The output of the node"
            }
        },
        "dependencies": [
            "openai"
        ]
    },
    "aga_swarm/actions/reasoning/review_reports/review_reports.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "review_reports.py",
        "description": "Review reports to see if a directive has been completed.",
        "input_schema": {
            "directive": {
                "type": "string",
                "description": "The directive to be reviewed"
            },
            "reports": {
                "type": "List[str]",
                "description": "The reports to be reviewed"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id"
            }
        },
        "output_schema": {
            "node_output": {
                "type": "aga_swarm.core.swarm.types.NodeOutput",
                "description": "The output of the node"
            }
        },
        "dependencies": [
            "openai"
        ]
    },
    "aga_swarm/actions/data/file_operations": {
        "type": "folder",
        "name": "file_operations",
        "description": "This folder contains all actions pertaining to file operations on any cloud provider or local machines",
        "children": [
            "aga_swarm/actions/data/file_operations/upload_file",
            "aga_swarm/actions/data/file_operations/retrieve_file",
            "aga_swarm/actions/data/file_operations/delete_file",
            "aga_swarm/actions/data/file_operations/rename_file",
            "aga_swarm/actions/data/file_operations/move_file"
        ]
    },
    "aga_swarm/actions/data/folder_operations": {
        "type": "folder",
        "name": "folder_operations",
        "description": "This folder contains all actions pertaining to folder operations on any cloud provider or local machines",
        "children": [
            "aga_swarm/actions/data/folder_operations/make_folder",
            "aga_swarm/actions/data/folder_operations/delete_folder",
            "aga_swarm/actions/data/folder_operations/move_folder",
            "aga_swarm/actions/data/folder_operations/list_folder",
            "aga_swarm/actions/data/folder_operations/rename_folder"
        ]
    },
    "aga_swarm/actions/data/database_operations": {
        "type": "folder",
        "name": "database_operations",
        "description": "This folder is currently empty.",
        "children": []
    },
    "aga_swarm/actions/data/data_transformations": {
        "type": "folder",
        "name": "data_transformations",
        "description": "This folder is currently empty.",
        "children": []
    },
    "aga_swarm/actions/data/data_preprocessing": {
        "type": "folder",
        "name": "data_preprocessing",
        "description": "This folder is currently empty.",
        "children": []
    },
    "aga_swarm/actions/data/cryptography": {
        "type": "folder",
        "name": "cryptography",
        "description": "This folder is currently empty.",
        "children": []
    },
    "aga_swarm/actions/data/data_validation": {
        "type": "folder",
        "name": "data_validation",
        "description": "This folder is currently empty.",
        "children": []
    },
    "aga_swarm/actions/data/data_compression": {
        "type": "folder",
        "name": "data_compression",
        "description": "This folder is currently empty.",
        "children": []
    },
    "aga_swarm/actions/software/writing_code": {},
    "aga_swarm/actions/software/debugging_code": {
        "type": "folder",
        "name": "debugging_code",
        "description": "This folder contains all actions pertaining to debugging code",
        "children": []
    },
    "aga_swarm/actions/software/testing_code": {
        "type": "folder",
        "name": "testing_code",
        "description": "This folder contains all actions pertaining to testing code",
        "children": []
    },
    "aga_swarm/actions/software/refactoring_code": {
        "type": "folder",
        "name": "refactoring_code",
        "description": "This folder contains all actions pertaining to refactoring code",
        "children": []
    },
    "aga_swarm/actions/software/reviewing_code": {
        "type": "folder",
        "name": "reviewing_code",
        "description": "This folder contains all actions pertaining to reviewing code",
        "children": []
    },
    "aga_swarm/actions/software/writing_documentation": {
        "type": "folder",
        "name": "writing_documentation",
        "description": "This folder contains all actions pertaining to writing documentation",
        "children": []
    },
    "aga_swarm/actions/external_apis/cloud_providers": {
        "type": "folder",
        "name": "cloud_providers",
        "description": "This folder contains all actions pertaining to cloud provider apis",
        "children": [
            "aga_swarm/actions/external_apis/cloud_providers/aws",
            "aga_swarm/actions/external_apis/cloud_providers/azure",
            "aga_swarm/actions/external_apis/cloud_providers/gcp"
        ]
    },
    "aga_swarm/actions/external_apis/openai": {
        "type": "folder",
        "name": "openai",
        "description": "This folder contains all actions pertaining to openais api",
        "children": []
    },
    "aga_swarm/actions/external_apis/web": {
        "type": "folder",
        "name": "web",
        "description": "This folder contains all actions pertaining to web apis",
        "children": []
    },
    "aga_swarm/actions/external_apis/cloud_providers/aws": {
        "type": "folder",
        "name": "aws",
        "description": "This folder contains all actions pertaining to aws apis",
        "children": []
    },
    "aga_swarm/actions/external_apis/cloud_providers/azure": {
        "type": "folder",
        "name": "azure",
        "description": "This folder contains all actions pertaining to azure apis",
        "children": []
    },
    "aga_swarm/actions/external_apis/cloud_providers/gcp": {
        "type": "folder",
        "name": "gcp",
        "description": "This folder contains all actions pertaining to gcp apis",
        "children": []
    },
    "aga_swarm/actions/data/file_operations/retrieve_file": {
        "type": "folder",
        "name": "retrieve_file",
        "description": "This folder contains all actions pertaining to file retrieval operations on any cloud provider or local machines",
        "children": [
            "aga_swarm/actions/data/file_operations/retrieve_file/mac_retrieve_file.py",
            "aga_swarm/actions/data/file_operations/retrieve_file/retrieve_file.py"
        ]
    },
    "aga_swarm/actions/data/file_operations/upload_file": {
        "type": "folder",
        "name": "upload_file",
        "description": "This folder contains all actions pertaining to file upload operations on any cloud provider or local machines",
        "children": [
            "aga_swarm/actions/data/file_operations/upload_file/mac_upload_file.py",
            "aga_swarm/actions/data/file_operations/upload_file/upload_file.py"
        ]
    },
    "aga_swarm/actions/data/file_operations/delete_file": {
        "type": "folder",
        "name": "delete_file",
        "description": "This folder contains all actions pertaining to file deletion operations on any cloud provider or local machines",
        "children": [
            "aga_swarm/actions/data/file_operations/delete_file/mac_delete_file.py",
            "aga_swarm/actions/data/file_operations/delete_file/delete_file.py"
        ]
    },
    "aga_swarm/actions/data/file_operations/rename_file": {
        "type": "folder",
        "name": "rename_file",
        "description": "This folder contains all actions pertaining to file renaming operations on any cloud provider or local machines",
        "children": [
            "aga_swarm/actions/data/file_operations/rename_file/mac_rename_file.py",
            "aga_swarm/actions/data/file_operations/rename_file/rename_file.py"
        ]
    },
    "aga_swarm/actions/data/file_operations/move_file": {
        "type": "folder",
        "name": "move_file",
        "description": "This folder contains all actions pertaining to file moving operations on any cloud provider or local machines",
        "children": [
            "aga_swarm/actions/data/file_operations/move_file/mac_move_file.py",
            "aga_swarm/actions/data/file_operations/move_file/move_file.py"
        ]
    },
    "aga_swarm/actions/data/folder_operations/make_folder": {
        "type": "folder",
        "name": "make_folder",
        "description": "This folder contains all actions pertaining to folder creation operations on any cloud provider or local machines",
        "children": [
            "aga_swarm/actions/data/folder_operations/make_folder/mac_make_folder.py",
            "aga_swarm/actions/data/folder_operations/make_folder/make_folder.py"
        ]
    },
    "aga_swarm/actions/data/folder_operations/delete_folder": {
        "type": "folder",
        "name": "delete_folder",
        "description": "This folder contains all actions pertaining to folder deletion operations on any cloud provider or local machines",
        "children": [
            "aga_swarm/actions/data/folder_operations/delete_folder/mac_delete_folder.py",
            "aga_swarm/actions/data/folder_operations/delete_folder/delete_folder.py"
        ]
    },
    "aga_swarm/actions/data/folder_operations/move_folder": {
        "type": "folder",
        "name": "move_folder",
        "description": "This folder contains all actions pertaining to folder moving operations on any cloud provider or local machines",
        "children": [
            "aga_swarm/actions/data/folder_operations/move_folder/mac_move_folder.py",
            "aga_swarm/actions/data/folder_operations/move_folder/move_folder.py"
        ]
    },
    "aga_swarm/actions/data/folder_operations/list_folder": {
        "type": "folder",
        "name": "list_folder",
        "description": "This folder contains all actions pertaining to folder listing operations on any cloud provider or local machines",
        "children": [
            "aga_swarm/actions/data/folder_operations/list_folder/mac_list_folder.py",
            "aga_swarm/actions/data/folder_operations/list_folder/list_folder.py"
        ]
    },
    "aga_swarm/actions/data/folder_operations/rename_folder": {
        "type": "folder",
        "name": "rename_folder",
        "description": "This folder contains all actions pertaining to folder renaming operations on any cloud provider or local machines",
        "children": [
            "aga_swarm/actions/data/folder_operations/rename_folder/mac_rename_folder.py",
            "aga_swarm/actions/data/folder_operations/rename_folder/rename_folder.py"
        ]
    },
    "aga_swarm/actions/data/file_operations/retrieve_file/retrieve_file.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "retrieve_file.py",
        "description": "This action calls the appropriate file retrieval action based on the 'platform' param in the swarm config",
        "input_schema": {
            "file_path": {
                "type": "string",
                "description": "The path to the file to be retrieved"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id"
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            },
            "data": {
                "type": "bytes",
                "description": "The binary of the file"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/file_operations/retrieve_file/mac_retrieve_file.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "mac_retrieve_file.py",
        "description": "This action retrieves a file from a mac",
        "input_schema": {
            "file_path": {
                "type": "string",
                "description": "The path to the file to be retrieved"
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            },
            "data": {
                "type": "bytes",
                "description": "The binary of the file"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/file_operations/upload_file/upload_file.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "upload_file.py",
        "description": "This action calls the appropriate file upload action based on the 'platform' param in the swarm config",
        "input_schema": {
            "file_path": {
                "type": "string",
                "description": "The path to the file to be uploaded"
            },
            "data": {
                "type": "bytes",
                "description": "The binary of the file"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id"
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/file_operations/upload_file/mac_upload_file.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "mac_upload_file.py",
        "description": "This action uploads a file to a mac",
        "input_schema": {
            "file_path": {
                "type": "string",
                "description": "The path to the file to be uploaded"
            },
            "data": {
                "type": "bytes",
                "description": "The binary of the file"
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/file_operations/delete_file/delete_file.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "delete_file.py",
        "description": "This action calls the appropriate file deletion action based on the 'platform' param in the swarm config",
        "input_schema": {
            "file_path": {
                "type": "string",
                "description": "The path to the file to be deleted"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id."
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/file_operations/delete_file/mac_delete_file.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "mac_delete_file.py",
        "description": "This action deletes a file from a mac",
        "input_schema": {
            "file_path": {
                "type": "string",
                "description": "The path to the file to be deleted"
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/file_operations/rename_file/rename_file.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "rename_file.py",
        "description": "This action calls the appropriate file rename action based on the 'platform' param in the swarm config",
        "input_schema": {
            "file_path": {
                "type": "string",
                "description": "The path to the file to be renamed"
            },
            "new_file_name": {
                "type": "string",
                "description": "The new name of the file"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id."
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/file_operations/rename_file/mac_rename_file.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "mac_rename_file.py",
        "description": "This action renames a file on a mac",
        "input_schema": {
            "file_path": {
                "type": "string",
                "description": "The path to the file to be renamed"
            },
            "new_file_name": {
                "type": "string",
                "description": "The new name of the file"
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/file_operations/move_file/move_file.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "move_file.py",
        "description": "This action calls the appropriate file move action based on the 'platform' param in the swarm config",
        "input_schema": {
            "file_path": {
                "type": "string",
                "description": "The path to the file to be moved"
            },
            "new_file_path": {
                "type": "string",
                "description": "The new path of the file"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id."
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/file_operations/move_file/mac_move_file.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "mac_move_file.py",
        "description": "This action moves a file on a mac",
        "input_schema": {
            "file_path": {
                "type": "string",
                "description": "The path to the file to be moved"
            },
            "new_file_path": {
                "type": "string",
                "description": "The new path of the file"
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/folder_operations/make_folder/make_folder.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "make_folder.py",
        "description": "This action makes a folder using the appropriate platform set in swarm config",
        "input_schema": {
            "folder_path": {
                "type": "string",
                "description": "The path to the folder to be made"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id."
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/folder_operations/make_folder/mac_make_folder.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "mac_make_folder.py",
        "description": "This action makes a folder on a mac",
        "input_schema": {
            "folder_path": {
                "type": "string",
                "description": "The path to the folder to be made"
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/folder_operations/delete_folder/delete_folder.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "delete_folder.py",
        "description": "This action calls the appropriate folder delete action based on the 'platform' param in the swarm config",
        "input_schema": {
            "folder_path": {
                "type": "string",
                "description": "The path to the folder to be deleted"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id."
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/folder_operations/delete_folder/mac_delete_folder.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "mac_delete_folder.py",
        "description": "This action deletes a folder on a mac",
        "input_schema": {
            "folder_path": {
                "type": "string",
                "description": "The path to the folder to be deleted"
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/folder_operations/rename_folder/rename_folder.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "rename_folder.py",
        "description": "This action calls the appropriate folder rename action based on the 'platform' param in the swarm config",
        "input_schema": {
            "folder_path": {
                "type": "string",
                "description": "The path to the folder to be moved"
            },
            "new_folder_path": {
                "type": "string",
                "description": "The new path of the folder"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id."
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/folder_operations/rename_folder/mac_rename_folder.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "mac_rename_folder.py",
        "description": "This action renames a folder on a mac",
        "input_schema": {
            "folder_path": {
                "type": "string",
                "description": "The path to the folder to be moved"
            },
            "new_folder_path": {
                "type": "string",
                "description": "The new path of the folder"
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/folder_operations/move_folder/move_folder.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "move_folder.py",
        "description": "This action calls the appropriate folder move action based on the 'platform' param in the swarm config",
        "input_schema": {
            "folder_path": {
                "type": "string",
                "description": "The path to the folder to be moved"
            },
            "new_folder_path": {
                "type": "string",
                "description": "The new path of the folder"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id."
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/folder_operations/move_folder/mac_move_folder.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "mac_move_folder.py",
        "description": "This action moves a folder on a mac",
        "input_schema": {
            "folder_path": {
                "type": "string",
                "description": "The path to the folder to be moved"
            },
            "new_folder_path": {
                "type": "string",
                "description": "The new path of the folder"
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is 'Failure'"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/folder_operations/list_folder/list_folder.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "list_folder.py",
        "description": "This action calls the appropriate folder list action based on the 'platform' param in the swarm config",
        "input_schema": {
            "folder_path": {
                "type": "string",
                "description": "The path to the folder to be listed"
            },
            "swarm_id": {
                "type": "aga_swarm.swarm.types.swarm.SwarmID",
                "description": "The swarm id."
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is Failure"
            },
            "contents": {
                "type": "List[str]",
                "description": "The contents of the folder"
            }
        },
        "dependencies": []
    },
    "aga_swarm/actions/data/folder_operations/list_folder/mac_list_folder.py": {
        "type": "aga_swarm/actions/swarm/actions/action_types/internal_default_swarm_action.py",
        "name": "mac_list_folder.py",
        "description": "This action lists the contents of a folder on a mac",
        "input_schema": {
            "folder_path": {
                "type": "string",
                "description": "The path to the folder to be listed"
            }
        },
        "output_schema": {
            "status": {
                "type": "string",
                "description": "'Success' or 'Failure'"
            },
            "error_message": {
                "type": "string",
                "description": "Error message if status is Failure"
            },
            "contents": {
                "type": "List[str]",
                "description": "The contents of the folder"
            }
        },
        "dependencies": []
    }
}