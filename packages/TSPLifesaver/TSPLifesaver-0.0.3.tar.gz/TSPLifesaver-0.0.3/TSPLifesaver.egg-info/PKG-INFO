Metadata-Version: 2.1
Name: TSPLifesaver
Version: 0.0.3
Summary: A toolset that simplifies the process of solving TSP (Traveling Salesman Problem) problems. 
Author-email: Christian Lee <chrisliyuhan@gmail.com>
License: Copyright (c) 2023 Christian Lee
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: repository, https://github.com/lxbme/TSPLifesaver
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE

# TSP Lifesaver
[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://makeapullrequest.com) 

**!!! This package is currently under development and may contain bugs. !!!**

## Introduction

This is a framework that simplifies the process of solving TSP (Traveling Salesman Problem) problems.

## Installation 

```python
pip install TSPLifesaver
```

## Quick Start

### How to import:
```python
from TSPLifesaver.structure import BasicRoute, PointWithEuclideanDistance
from TSPLifesaver.optimizer import SimulatedAnnealing
from TSPLifesaver.tools import route_from_sequence, simulated_annealing
```

### Define a point:
```python
point = PointWithEuclideanDistance([1,1,1], name="test_point")
print(point)
# test_point([1,1,1])

print(point.distance_to(point))
# 0

print(point.distance_to([1,1,2]))
# 1
```

### Define a route:
```python
points = [PointWithEuclideanDistance(i) for i in [[1,1,1],[2,2,2],[3,3,3]]]
route = BasicRoute(points, name="TestRoute")

#or you can
route = route_from_sequence([[1,1,1],[2,2,2],[3,3,3]])

print(route)

# TestRoute(
# None: [1, 1, 1]
# None: [2, 2, 2]
# None: [3, 3, 3]
# )
```

### Calculate total distance:
```python
print(route.distance())
# 6.928203230275509
```

### **Optimize the route:**
```python
optimizer = SimulatedAnnealing(route, temperature=10000, cooling_rate=0.003, min_temperature=1)
route = optimizer.optimize()

# or you can 
optimized_route = simulated_annealing(route,epoch=50)
```
