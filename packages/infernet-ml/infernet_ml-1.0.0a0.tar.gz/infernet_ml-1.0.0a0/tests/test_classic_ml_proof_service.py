"""
Test for classic ml proof service
"""
import json
import logging
import os
from inspect import getmembers
from typing import Any

import pytest
from eth_abi.abi import decode
from huggingface_hub import hf_hub_download  # type: ignore
from ml.utils.decode import decode_multidim_array
from ml.utils.ezkl_utils import generate_witness_data
from quart import Quart
from torch import jit, tensor

import ezkl
from classic_ml_proof_service import create_app

MODEL_NAME = "Ritual-Net/example_model"
EZKL_MEMBERS = [m[0] for m in getmembers(ezkl)]


@pytest.fixture()
def app() -> Quart:
    return create_app({"TESTING": True, "MODEL_NAME": MODEL_NAME})


@pytest.fixture()
def client(app) -> Any:  # type: ignore
    return app.test_client()


@pytest.fixture()
def runner(app) -> Any:  # type: ignore
    return app.test_cli_runner()


@pytest.mark.asyncio
async def test_get_data_attester_calldata(client):  # type: ignore
    # test only relevant if ezkl library built for proof service
    if "generate_encoded_data_attester_calldata" in EZKL_MEMBERS:
        with open(
            os.path.join("tests/test_data/test_proof.pf"), "r", encoding="utf-8"
        ) as td:
            proof_json = json.load(td)
            res = await client.post(
                "/get_data_attester_calldata?verifier_address=0x0000000000000000000000000000000000000000",
                json=proof_json,
            )

            logging.info("da calldata: %s", await res.get_data(as_text=True))
            assert (
                await res.get_data(as_text=True)
                == "4c7985d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000d641e8e1e1300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000ca013bf30c303f8603fee08a48fd5979bce2029bfd92dda56e4f570fad31c1e0cb8182df0e8ec21c11f1cbfe7e8fe264649a8b8798664f8d2165521dbd39f9a268904bbaa14e012a079d7797249114b9d9d92aaf9a7fd5eafe1aa9b9e08510e8aea0325efd32f2b2a4f8e6d5a169ed9553780dc61d6473ead626de28e4fe4cd0a6b1f50d7c9a7f51cdb03f3b9e57f7b93fde89181dc0f3c5cfd981f57d4669008c904b283acf3480945b6b254ea5805c637e9307456fc8f8de8c7bb9e8d63c2be1b1b0973a421abc601b7033082c0b70b5870c0b1402964446e6503fb35758022331520d54c94d550855e3926584a89b3184d9c516981af5cef4928fdbf7f43c4242111840a94a57a2d7753c799faefab19f2cd3ec78b38e337196c280deec73ccf0e55738770260fccf25b82974283209504458b0837b59f05d1d735e4c2021e6a087eb53032eece170e0003fc579c133ca55b1c6302680c49eca65f241951ce470e643d3ae866e5563e8de9e8d46edac9fb29b9ac319c6be90a95d549f7151f6716acb12075bc78b2a11954a60b3c1c3e6d899c303aa61089ba22b336f033d9e61f3fed8428a3f30122b07126c26806f26c72d3cd613135760030a18e4920b3dd1f2a0aadf161075df21473071a27d9546d750018dfe793e84d3b928edfa5f4fa250c7415ba34c778890e87b2c7173d51c348b094c0e8ed140a9b2e6449f95b292f993d1ab731753d2ab8b750a9141f56b4c1b3f773abfb1a7b9b7bdb929ef9891a974819b15bb9679426bbe3d7b639b378f73e5be69bdb38c284e8ca107e095105acf074c2f561822976e8599ddcadb90ec66f9290e11cdc6077a9ab4be5748d2011e42d934ef3e83765b483704cec6d6373dc5ad3f2345dd7951a0ef2d494841b9a24b32f64c413b405673592b53055b00ae1996b6583c4d45021554184abd80cbe1a0cd82f7d670a97a836258627c6b6aa3f93fdbc143b87f47b99b364abce15b50420cfb55838b98527b11291b8f30656fc0a59785d404d503a390fe8e8c72f3aa77a44437e63ad89ea7d3c85a54088e365cae6ab615afd58664280fc3f24221f70f3913aef9932db2f458e995f3628d8e296d96bd77a8f36c37cd7a8b0951b3c9269768f97072976fbce447acfbfa82376297447f4c9cae2ed7f4c04fdbc1d633737096028d8a32d875fff2ef15e97044e319b14e4896a750bdec7171f0e1dd1decf78d550a5cf1920e7c4b3b0fc8aae600aeff9310f0e7e40e9e79af2e21e223e56276533fd819deae48fbc81f0360ce65201a6ebc68fe2d7642fb8ddda1e9320fdb53888c64fd10de01cf803a71e3a70e83aa23dc8723b563e4b6ed37410878714ee49b2a98981c5608fae685e6e5bdc2a3afdcd94e6dfde4fa21603eb218ee6c647ce7bff397614ceef790f87edc6c9d0fe902f27557d74cedddc98e828b9976372494978f7003cdc801cc620831219c8956d52335b4eb131a768066629444d10b3904b5f9d32128b4721326dc412934bfd3c2eafa98d0097baba4d9d2caf190b7418924194cb2d09f53ef57ced2d4a283421ab4b88c2ca03c3f2e4741caebd3e89b6c06cc48f9f4288c75d41bdf1ca78ae07e06e494d627e5226442c1e5a1624dbc0f1121dbfcb473c3555fdc22c694a757d5211a3e118934690f9d507aa7bb18ee5d2c46eae8e811f384cc6797666302b0db7b0471193eead4d36942c4abe3c6dcaca1e501c8800c7f7b292efc6da9e1cd164c5f6daefefa993641f0ff6044da66f0607365b234e56afdd7fa3ce29e257c0371883ee1453b70bece602f8a4540ac7facaf614c1a65fcd1cb1ca7878f6e2c5767fe9e42fe863af88970f9a93b72fd0e3370494ab8f80679b6a26fd01cca80c101c84f1640e9fb128272503c60fa4b835e521c16846ed5bc2826cbc61e2fddc2b54e65e6bea16c8f96325cca345b24925ff81b43a0ee74f2ed3a48057f4dbf7fa7fad473d2e5a82655f1289c3fbd66f5787af13dc505d23d5c3f2c875d7b590929e810a1974b823d3d12e90898607cc81b7e9d50dd63a0403fdca3e991ca7535e03eba439974a8748e824fe31001eccd887963d2c250aa6657fb8540b083a7fabcc04e3361afbd9bfdf10bb6ba4a285527997e490146b3e845c1a8bbdc7bace054c0c15f36deeb60f5e1298c9786c5c633d3bd6753147a49f728e0f449bc1ed3bec1df1e219b8c155a018f435bb6acf0c9b09cc2426a8c5d0b5042837e6e34220b5fbfeea91f64f7a8001eab7474e74515fc3165011b66d08054f1f2f6cbe05e7d652a7e33b89f2a8ae1568f65e7ad0e263dd820cac5c7a68b889f3ef5462def662983be6b2652cf93023ed00c6567f860d58bb88eacf0bd42ba5b94b9e59b5c4314e9f1174137ac4d7104942150daf3d0649413b275c95996bc77a3a93a1511105a8a8207eaaf0429a0a327b52e4663140ec1ef4711081de2b10f75812966d561ee59233f6ef57a2151847e185ddcab077a5f71945eee45030c8fb2b76261f2ce6d8db8c5f9c3ece250930121daef32c8cba25cd189bf6fc63b701dc371d8254bb0ef4cb9793e958c722a29e55a36327ac5cf996eb3b0db8faa487e65a4bd6a4206ba5d16457d809e50f30c7445c67c20ea40fd01e0f11a4f111ebf1173d8f328383396ee8926b28dc274a508983400ee9d5e8187117f7e79de39dc3fa8966decc9cf9341d088c8b820575467765ffbaf3e2d09441c00c2969e540347caae6c70f30a713ca13bcad6c2c9bc6907597bf1295e3b5af5a1ea15db04945381567dc51d16c6143db31a6890f6c8f971e1889a4db1855acade92422f1fe512c243e20923ef820beab1da222027bbace1ce1f6b27b17bf01fb33521ce8cdd7f49e96e9eff284a8cac0d26dfc10cdf22d7ca7922f64c3837f287648206be92ef6c13517539742778ceb3f7cba0d7b2429eafe8e4b5d6b6980aeee46e1f4d0fdc899c75e2c0036aac19c38a8ae2344975b5d8bc6113f7a02b2661ccb953649b7a67f6d6aedb406cc425eec39380b792973e13fd39225d785a888a3c9fe0511874fadd17a053784fbf80ca62b9b15c625c9edf2fbbac47aee095885fb65fe3c2b5d889d5b2684461dd6ac2508231343a497e21da96ea7fb79a767eb1709648e48799acc3e041c8a518371f1e25e249e27a5dff70b12c3f4656ab3bd601ba7372f8d1850f97076b30a56e0aa34b1045e75121b27eb6e06a95dd0b62b350a352931b327000b77459b82a82e5a729c020650f59fd2d7b33d97d8ca29125cf090e790617625cf7d3dd1014a7d7a9b211150df9ac07086abd177e4ffaa58fd9ab702e4865ea6c34a53cf8375a31d86ea018743701bbcb4003cc3b7dd2f9674e5cb5850574bb1c4a490f77c39056de3210409360ad3f09e47a08e1518ca3bdcd0147b0b20c68732b25b199f3c9e731296238dfaf2c17a39fd2f196930055aa36ec77ac3fb584911c634cd2910a6afbd1b02e72ff30601701df11d0fe5bac81716bd0d691dd29ce565faecb787534612d024f9c7a3ec65829e9e8dd5e7a26ee83366861bb9511f51b40983caf9affa87901db0ab972670c68fa798aeb4162efa8a6587518c1f30066a3514c1a94e4c285b1402962fd97f60368dcd58e6f5d5f89255a38517829779a61976f38c18bbaf0829b7ddd8012cb68299f0c79f79430a3778b636fb0b33d918cabd8a54fe20651e2dbd4a15d44e2828b98fc5c4dd573b7cea1663333bce0a9a5acf3d34783466b21cfbed8326379f343be3c908aaaa98b818a1ae638e487073e7a076199a4db93421f95082e31fbd040e230676ce71a8be7ea96afdae1a4128a318dcb42c2c8250081e72f549fbeab620f8357cfffdfdca5010794c59134216b456777f3eb46b5919eeab421e66de189ffd42897732747dde624f8e48601dd4bf772c7bf6ddb48e0144db9fcc784e7d035577ef4143dce69981dd6bed55f3b93fc19921a7b9c6a73043d0d44d02000ab225092ed3443e60b09acf58298c33d74e111aa8fdbb32dd1482274c1f94814ae9d0b1192c72e99b14b8910248c7abd30a62fb3acfdb9e240115dec1810ee50b3dd2d5846d0eb2661cbcf03d26ba97375cd63a1a6fa80f702d0e79ab3284aa3e1dc1a609ebdd0574a25ae9ed8be5ed52199026366c7fb5be24d4b19dad37bf1d5e93b19dcf8d543435ef2b018c40c56e93d45b94b042acb90adf38fa99e49387fe4e4c78480548dff2be4d4315dc7ea1d4c79169c16b955a03111f20aeed2c6bbac4410d5c3b21bda8a56a14c7e77b955cd9c37a1e39821227d44ba2a73e3bce9774abda5b654f8f367cd8f54a971fe114031018eb9a4a5217e32daa7b563fd1243dc58bf9c788dda243a43789bac3e147cee03440b8645c16ca715592fbb2fe60d0e79f684b16eda48117063b8b21f99b447d579d84c4ae285c8524fe6aac8ec0265572cc098d0d14605564afac5007584fd4b7b66e86020563b48f3f33f353ccd2e5e117f7038b181b5522d6c9d45e8e4546baa58812a00d122a9206040fcbf3ece903d2c977ac3edc3e0ee60cdcedc55d0deea13d287e0000000000000000000000000000000000000000000000000000000000000002169f30e513aa335b9e43fba0bdf1a28dd63a4e547c767100d9351cdc060394e9000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000"  # noqa: E501
            )


@pytest.mark.asyncio
async def test_get_verifier_calldata(client):  # type: ignore
    # test only relevant if ezkl library built for proof service
    if "generate_encoded_verifier_calldata" in EZKL_MEMBERS:
        with open(
            os.path.join("tests/test_data/test_proof.pf"), "r", encoding="utf-8"
        ) as td:
            proof_json = json.load(td)
            res = await client.post("/get_verifier_calldata", json=proof_json)

            logging.info("vf calldata: %s", await res.get_data(as_text=True))
            assert (
                await res.get_data(as_text=True)
                == "1e8e1e1300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000ca013bf30c303f8603fee08a48fd5979bce2029bfd92dda56e4f570fad31c1e0cb8182df0e8ec21c11f1cbfe7e8fe264649a8b8798664f8d2165521dbd39f9a268904bbaa14e012a079d7797249114b9d9d92aaf9a7fd5eafe1aa9b9e08510e8aea0325efd32f2b2a4f8e6d5a169ed9553780dc61d6473ead626de28e4fe4cd0a6b1f50d7c9a7f51cdb03f3b9e57f7b93fde89181dc0f3c5cfd981f57d4669008c904b283acf3480945b6b254ea5805c637e9307456fc8f8de8c7bb9e8d63c2be1b1b0973a421abc601b7033082c0b70b5870c0b1402964446e6503fb35758022331520d54c94d550855e3926584a89b3184d9c516981af5cef4928fdbf7f43c4242111840a94a57a2d7753c799faefab19f2cd3ec78b38e337196c280deec73ccf0e55738770260fccf25b82974283209504458b0837b59f05d1d735e4c2021e6a087eb53032eece170e0003fc579c133ca55b1c6302680c49eca65f241951ce470e643d3ae866e5563e8de9e8d46edac9fb29b9ac319c6be90a95d549f7151f6716acb12075bc78b2a11954a60b3c1c3e6d899c303aa61089ba22b336f033d9e61f3fed8428a3f30122b07126c26806f26c72d3cd613135760030a18e4920b3dd1f2a0aadf161075df21473071a27d9546d750018dfe793e84d3b928edfa5f4fa250c7415ba34c778890e87b2c7173d51c348b094c0e8ed140a9b2e6449f95b292f993d1ab731753d2ab8b750a9141f56b4c1b3f773abfb1a7b9b7bdb929ef9891a974819b15bb9679426bbe3d7b639b378f73e5be69bdb38c284e8ca107e095105acf074c2f561822976e8599ddcadb90ec66f9290e11cdc6077a9ab4be5748d2011e42d934ef3e83765b483704cec6d6373dc5ad3f2345dd7951a0ef2d494841b9a24b32f64c413b405673592b53055b00ae1996b6583c4d45021554184abd80cbe1a0cd82f7d670a97a836258627c6b6aa3f93fdbc143b87f47b99b364abce15b50420cfb55838b98527b11291b8f30656fc0a59785d404d503a390fe8e8c72f3aa77a44437e63ad89ea7d3c85a54088e365cae6ab615afd58664280fc3f24221f70f3913aef9932db2f458e995f3628d8e296d96bd77a8f36c37cd7a8b0951b3c9269768f97072976fbce447acfbfa82376297447f4c9cae2ed7f4c04fdbc1d633737096028d8a32d875fff2ef15e97044e319b14e4896a750bdec7171f0e1dd1decf78d550a5cf1920e7c4b3b0fc8aae600aeff9310f0e7e40e9e79af2e21e223e56276533fd819deae48fbc81f0360ce65201a6ebc68fe2d7642fb8ddda1e9320fdb53888c64fd10de01cf803a71e3a70e83aa23dc8723b563e4b6ed37410878714ee49b2a98981c5608fae685e6e5bdc2a3afdcd94e6dfde4fa21603eb218ee6c647ce7bff397614ceef790f87edc6c9d0fe902f27557d74cedddc98e828b9976372494978f7003cdc801cc620831219c8956d52335b4eb131a768066629444d10b3904b5f9d32128b4721326dc412934bfd3c2eafa98d0097baba4d9d2caf190b7418924194cb2d09f53ef57ced2d4a283421ab4b88c2ca03c3f2e4741caebd3e89b6c06cc48f9f4288c75d41bdf1ca78ae07e06e494d627e5226442c1e5a1624dbc0f1121dbfcb473c3555fdc22c694a757d5211a3e118934690f9d507aa7bb18ee5d2c46eae8e811f384cc6797666302b0db7b0471193eead4d36942c4abe3c6dcaca1e501c8800c7f7b292efc6da9e1cd164c5f6daefefa993641f0ff6044da66f0607365b234e56afdd7fa3ce29e257c0371883ee1453b70bece602f8a4540ac7facaf614c1a65fcd1cb1ca7878f6e2c5767fe9e42fe863af88970f9a93b72fd0e3370494ab8f80679b6a26fd01cca80c101c84f1640e9fb128272503c60fa4b835e521c16846ed5bc2826cbc61e2fddc2b54e65e6bea16c8f96325cca345b24925ff81b43a0ee74f2ed3a48057f4dbf7fa7fad473d2e5a82655f1289c3fbd66f5787af13dc505d23d5c3f2c875d7b590929e810a1974b823d3d12e90898607cc81b7e9d50dd63a0403fdca3e991ca7535e03eba439974a8748e824fe31001eccd887963d2c250aa6657fb8540b083a7fabcc04e3361afbd9bfdf10bb6ba4a285527997e490146b3e845c1a8bbdc7bace054c0c15f36deeb60f5e1298c9786c5c633d3bd6753147a49f728e0f449bc1ed3bec1df1e219b8c155a018f435bb6acf0c9b09cc2426a8c5d0b5042837e6e34220b5fbfeea91f64f7a8001eab7474e74515fc3165011b66d08054f1f2f6cbe05e7d652a7e33b89f2a8ae1568f65e7ad0e263dd820cac5c7a68b889f3ef5462def662983be6b2652cf93023ed00c6567f860d58bb88eacf0bd42ba5b94b9e59b5c4314e9f1174137ac4d7104942150daf3d0649413b275c95996bc77a3a93a1511105a8a8207eaaf0429a0a327b52e4663140ec1ef4711081de2b10f75812966d561ee59233f6ef57a2151847e185ddcab077a5f71945eee45030c8fb2b76261f2ce6d8db8c5f9c3ece250930121daef32c8cba25cd189bf6fc63b701dc371d8254bb0ef4cb9793e958c722a29e55a36327ac5cf996eb3b0db8faa487e65a4bd6a4206ba5d16457d809e50f30c7445c67c20ea40fd01e0f11a4f111ebf1173d8f328383396ee8926b28dc274a508983400ee9d5e8187117f7e79de39dc3fa8966decc9cf9341d088c8b820575467765ffbaf3e2d09441c00c2969e540347caae6c70f30a713ca13bcad6c2c9bc6907597bf1295e3b5af5a1ea15db04945381567dc51d16c6143db31a6890f6c8f971e1889a4db1855acade92422f1fe512c243e20923ef820beab1da222027bbace1ce1f6b27b17bf01fb33521ce8cdd7f49e96e9eff284a8cac0d26dfc10cdf22d7ca7922f64c3837f287648206be92ef6c13517539742778ceb3f7cba0d7b2429eafe8e4b5d6b6980aeee46e1f4d0fdc899c75e2c0036aac19c38a8ae2344975b5d8bc6113f7a02b2661ccb953649b7a67f6d6aedb406cc425eec39380b792973e13fd39225d785a888a3c9fe0511874fadd17a053784fbf80ca62b9b15c625c9edf2fbbac47aee095885fb65fe3c2b5d889d5b2684461dd6ac2508231343a497e21da96ea7fb79a767eb1709648e48799acc3e041c8a518371f1e25e249e27a5dff70b12c3f4656ab3bd601ba7372f8d1850f97076b30a56e0aa34b1045e75121b27eb6e06a95dd0b62b350a352931b327000b77459b82a82e5a729c020650f59fd2d7b33d97d8ca29125cf090e790617625cf7d3dd1014a7d7a9b211150df9ac07086abd177e4ffaa58fd9ab702e4865ea6c34a53cf8375a31d86ea018743701bbcb4003cc3b7dd2f9674e5cb5850574bb1c4a490f77c39056de3210409360ad3f09e47a08e1518ca3bdcd0147b0b20c68732b25b199f3c9e731296238dfaf2c17a39fd2f196930055aa36ec77ac3fb584911c634cd2910a6afbd1b02e72ff30601701df11d0fe5bac81716bd0d691dd29ce565faecb787534612d024f9c7a3ec65829e9e8dd5e7a26ee83366861bb9511f51b40983caf9affa87901db0ab972670c68fa798aeb4162efa8a6587518c1f30066a3514c1a94e4c285b1402962fd97f60368dcd58e6f5d5f89255a38517829779a61976f38c18bbaf0829b7ddd8012cb68299f0c79f79430a3778b636fb0b33d918cabd8a54fe20651e2dbd4a15d44e2828b98fc5c4dd573b7cea1663333bce0a9a5acf3d34783466b21cfbed8326379f343be3c908aaaa98b818a1ae638e487073e7a076199a4db93421f95082e31fbd040e230676ce71a8be7ea96afdae1a4128a318dcb42c2c8250081e72f549fbeab620f8357cfffdfdca5010794c59134216b456777f3eb46b5919eeab421e66de189ffd42897732747dde624f8e48601dd4bf772c7bf6ddb48e0144db9fcc784e7d035577ef4143dce69981dd6bed55f3b93fc19921a7b9c6a73043d0d44d02000ab225092ed3443e60b09acf58298c33d74e111aa8fdbb32dd1482274c1f94814ae9d0b1192c72e99b14b8910248c7abd30a62fb3acfdb9e240115dec1810ee50b3dd2d5846d0eb2661cbcf03d26ba97375cd63a1a6fa80f702d0e79ab3284aa3e1dc1a609ebdd0574a25ae9ed8be5ed52199026366c7fb5be24d4b19dad37bf1d5e93b19dcf8d543435ef2b018c40c56e93d45b94b042acb90adf38fa99e49387fe4e4c78480548dff2be4d4315dc7ea1d4c79169c16b955a03111f20aeed2c6bbac4410d5c3b21bda8a56a14c7e77b955cd9c37a1e39821227d44ba2a73e3bce9774abda5b654f8f367cd8f54a971fe114031018eb9a4a5217e32daa7b563fd1243dc58bf9c788dda243a43789bac3e147cee03440b8645c16ca715592fbb2fe60d0e79f684b16eda48117063b8b21f99b447d579d84c4ae285c8524fe6aac8ec0265572cc098d0d14605564afac5007584fd4b7b66e86020563b48f3f33f353ccd2e5e117f7038b181b5522d6c9d45e8e4546baa58812a00d122a9206040fcbf3ece903d2c977ac3edc3e0ee60cdcedc55d0deea13d287e0000000000000000000000000000000000000000000000000000000000000002169f30e513aa335b9e43fba0bdf1a28dd63a4e547c767100d9351cdc060394e90000000000000000000000000000000000000000000000000000000000000002"  # noqa: E501
            )


@pytest.mark.asyncio
async def test_witness_prove_verify(client):  # type: ignore
    model = jit.load(hf_hub_download(MODEL_NAME, "model.torch"))  # type: ignore
    model.eval()

    # use canned data first
    data = {"input_shapes": [[4]], "input_data": [[1, 2, 1, 4]], "output_data": [[2]]}
    res = await client.post("/generate_witness", json=data)
    result: dict[str, Any] = await res.get_json()
    logging.info(result)
    assert "witness_file" in result and result["witness_file"]
    assert "processed_input" in result and result["processed_input"]
    assert res.status_code == 200

    # now perform inference on some data
    input_ = tensor([[8, 8, 3, 4]])
    output_ = model.predict(input_)
    data2 = generate_witness_data(input_, output_, None)
    logging.info("testing data: %s", data2)
    res = await client.post("/generate_witness", json=data2)
    result = await res.get_json()
    logging.info(result)
    assert "witness_file" in result and result["witness_file"]
    assert "processed_input" in result and result["processed_input"]
    assert res.status_code == 200

    logging.info("witness_file %s", result["witness_file"])

    res = await client.post("/generate_proof", json=result["witness_file"])
    proof = await res.get_json()

    assert res.status_code == 200

    res = await client.post("/verify_proof", json=proof)
    assert res.status_code == 200

    if "generate_encoded_verifier_calldata" in EZKL_MEMBERS:
        res = await client.post(
            "/service_output", json={"source": 1, "data": data}  # offchain
        )

        assert res.status_code == 200
        output = await res.get_json()
        logging.info("service_output: %s", output)

        assert output["processed_input"], "processed input not set"
        assert decode(["uint256"], bytes.fromhex(output["processed_input"]))[0] == int(  # type: ignore # noqa: E501
            "0x169f30e513aa335b9e43fba0bdf1a28dd63a4e547c767100d9351cdc060394e9", 0
        ), "encoding processed input not expected"
        assert output["proof"], "proof not set"
        assert not output["processed_output"], "processed_output should be empty"
        assert output["raw_input"], "raw input not set"
        assert [1, 2, 1, 4] == decode_multidim_array(
            bytes.fromhex(output["raw_input"]), "int256[]", convert_to_float=False
        ), "encoding raw input not expected"
        assert output["raw_output"], "raw_output not set"
        assert (
            decode(["uint256[]"], bytes.fromhex(output["raw_output"]))[0][0] == 2  # type: ignore # noqa: E501
        ), "encoding raw output not expected"
